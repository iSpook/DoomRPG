#ifndef _MAP_DH_
#define _MAP_DH_

#include "Monsters.dh"

struct LevelInfo
{
    int LevelNum;
    // If we start in the Outpost, we set this on MAP01 to tell ourselves that
    // we need to replace the placeholder info with real info.
    bool NeedsRealInfo;
    str LumpName;
    str NiceName;
    
    int MaxMonstersKilled;
    int MaxTotalMonsters;
    int MaxMonsterPercentage;
    int MaxItemsFound;
    int MaxTotalItems;
    int MaxItemPercentage;
    int MaxSecretsFound;
    int MaxTotalSecrets;
    int MaxSecretPercentage;
    int ShortestTime;
    
    int UniqueSecrets;
    
    int Par;
    int Sucks;
    
    bool KillBonus;
    bool ItemsBonus;
    bool SecretsBonus;
    bool AllBonus;
    bool ParBonus;
    
    // Event stuff
    unsigned int Event;
    MonsterInfoPtr SelectedMonster;
};

struct DRLAEventMonsterReplacement
{
    str SourceMonster;
    str DestMonster;
};

extern
{
    variable static LevelInfo *CurrentLevel;
    variable static DynamicArray KnownLevels;
    variable static int LastVisitedLevel;
    variable static int AllBonusMaps;
    
    variable static DRLAEventMonsterReplacement[] NightmareReplacements;
    variable static DRLAEventMonsterReplacement[] TechnoReplacements;
    variable static DRLAEventMonsterReplacement[] ArmageddonReplacements;
};

extern
{
    script void MapInit() open;
    script void MapLoop();
    script void CalculateBonusMaps();
    script void DecideMapEvent();
    script void SetupMapEvent();
    script void SetupOutpostEvent();

    // Events
    script void MegaBossEvent();
    script void EnvironmentalHazard();
    script void ThermonuclearBomb();
    script void OneMonsterEvent();
    script void RainbowSectors();
    script void DRLAReplaceMonsters(DRLAEventMonsterReplacement *, str);
};

extern "ACS"
{
    script void MapExit(bool) @ MAP_EXIT_SCRIPTNUM;
};

extern
{
    function int FindLevelInfoIndex(int = 0);
};

#endif
