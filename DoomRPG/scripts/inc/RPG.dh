#ifndef _RPG_DH_
#define _RPG_DH_

#include "Defs.dh"
#include "Skills.dh" // For some reason, forward declaring SkillLevel causes incomplete type, have to include the header

library("RPG");

// Forward Declarations
struct ItemInfo;
struct MonsterInfo;
struct LootItem;
struct ShieldPart;
struct ShieldAccessory;
// struct SkillLevelInfo;

AddressSpaceDecl MapArray ItemSpace;
AddressSpaceDecl MapArray LootSpace;
AddressSpaceDecl MapArray MonsterSpace;
AddressSpaceDecl MapArray ShieldSpace;

struct MissionInfo
{
    // Basic
    bool Active;
    int Type;
    int Difficulty;
    
    // Reward
    int RewardXP;
    int RewardRank;
    int RewardCredits;
    ItemInfo ItemSpace *RewardItem;
    
    // Mission Data
    LootItem LootSpace *Item;
    MonsterInfo MonsterSpace *Monster;
    int Current;
    int Amount;
};

struct PlayerData
{
    int TID;
    
    // Flags
    bool FirstRun;
    bool InMenu;
    bool InShop;
    bool InMinigame;
    bool LastLegs;      // You're about to die, do something about it!
    
    // Primary Stats
    int Strength;       // Increases Damage
    int Defense;        // Reduces Damage taken
    int Vitality;       // Increases max Health and HP regen rate
    int Energy;         // Increases max EP and EP regen rate
    int Regeneration;   // Increases both HP/EP regen rate
    int Agility;        // Increases movement speed, jump height and survival bonus (and optionally weapon speed)
    int Capacity;       // Increases max ammo capacities
    int Luck;           // Increases drop chances
    int ActualHealth;   // The player's real, actual Health
    int HealthMax;      // Max player Health
    
    // Stat Bonuses
    int StrengthBonus;
    int DefenseBonus;
    int VitalityBonus;
    int EnergyBonus;
    int RegenerationBonus;
    int AgilityBonus;
    int CapacityBonus;
    int LuckBonus;
    
    // Stat Perks
    bool[STAT_MAX] Perks;
    int AgilityTimer;
    
    // Secondary Stats
    int LevelDamage;            // Damage dependent on the player's level
    int BonusDamage;            // Damage bonus given by the Strength stat
    int TotalDamage;            // Combined LevelDamage and BonusDamage
    fixed DamageFactor;         // General damage the player will defend against
    int Mass;                   // Player mass, for preventing knockback
    fixed StatusEffectResist;   // Chance to resist a status effect
    int AuraRange;              // The reach of your auras to affect other players
    int ToxicityRegenBonus;     // Speed at which Toxicity dissipates over time
    fixed Speed;                // Movement Speed
    fixed JumpHeight;           // Jump Height
    int WeaponSpeed;            // Weapon Speed Increase bsed on Agility
    fixed SurvivalBonus;        // Chance that you will survive a fatal hit
    int InvItems;               // How many inventory items you are currently carrying
    int StatCap;                // Current Stat Cap
    
    // Energy Points (EP)
    int EP;
    int EPMax;
    
    // Level
    int Level;
    long int XP;
    long int XPNext;
    
    // Rank
    str RankString;
    int RankLevel;
    long int Rank;
    long int RankNext;
    int PayTimer;
    int PayKills;
    int PayBonus;
    
    // Combo System
    int Combo;
    int ComboTimer;
    int BonusGained;
    int XPGained;
    int RankGained;

    // HP/EP Regen Timers
    int HPRate;
    int HPTime;
    int HPAmount;
    int EPRate;
    int EPTime;
    int EPAmount;
    int RegenBoostTimer;

    // Luck Chance Percentages
    fixed HealthChance;
    fixed EPChance;
    fixed ArmorChance;
    fixed PowerupChance;
    fixed WeaponChance;
    fixed TokenChance;
    fixed AugChance;
    fixed ShieldChance;
    fixed StimChance;
    
    // Menu Data
    bool MenuBlock;
    int Menu;
    int OutpostMenu;
    int MenuIndex;
    int StatPage;
    int SkillPage;
    int ShieldPage;
    int StimSelected;
    int ShopIndex;
    int ShopPage;
    
    // Skill Info
    SkillLevelInfo[MAX_CATEGORIES][MAX_SKILLS] SkillLevel;
    bool[AURA_MAX] Aura;
    bool TeamAura;
    int[AURA_MAX] AuraLevel;
    int AuraTimer;
    bool AuraBonus;
    fixed AuraCostMult;
    fixed SkillCostMult;
    bool SkillWheelOpen;
    int SkillSelected;
    int[MAX_SKILLKEYS] SkillCategory;
    int[MAX_SKILLKEYS] SkillIndex;
    int Summons;
    int[MAX_SUMMONS] SummonTID;
    bool[SOUL_MAX - 1] SoulActive;
    
    // Status Effects
    bool[SE_MAX] StatusType;
    int StatusTypeHUD;
    int[SE_MAX] StatusIntensity;
    int[SE_MAX] StatusTimer;
    int[SE_MAX] StatusTimerMax;
    int Toxicity;
    
    // Locker
    int[ITEM_CATEGORIES][ITEM_MAX] Locker;
    bool LockerGlobal;
    int LockerPage;
    int LockerIndex;
    
    // GUI
    // bool GUIOpen;
    // MouseInfo Mouse;
    // GUIWindow *[MAX_WINDOWS] Window;
    
    // Auto-Sell
    bool[ITEM_CATEGORIES][ITEM_MAX] AutoSell;
    int AutoSellTimer;
    int AutoSellPay;
    
    // Toxic Meter
    int ToxicTimer;
    int ToxicOffset;
    int ToxicStage;
    
    // Password System
    int[PW_SIZE] PasswordData;
    int PasswordChecksum;
    
    // Misc
    int ShopDiscount;
    int ShopCard;
    int DelayTimer;
    int DamageType;
    bool AutosaveTimerReset;
    
    // Associated Drops
    DynamicArray DropTID;
    
    // Structception
    struct
    {
        int Battery;
        int BatteryMax;
        int Slots;
        int SlotsUsed;
        bool[MAX_AUGS] Active;
        int[MAX_AUGS] Level;
    } Augs;
    
    struct
    {
        // Current Parts
        ShieldPart ShieldSpace *Body;
        ShieldPart ShieldSpace *Battery;
        ShieldPart ShieldSpace *Capacitor;
        ShieldAccessory ShieldSpace *Accessory;
        
        // Flags
        bool Active;
        bool Full;
        
        // Stats
        int Charge;
        int Capacity;
        int Interval;
        int ChargeRate;
        fixed DelayRate;
        int Timer;
        
        // Accessories
        int AccessoryBattery;
        int AccessoryTimer;
        Position AccessoryPosition;
    } Shield;
    
    struct
    {
        int[MAX_COMPOUNDS] Vials;
        bool[MAX_COMPOUNDS] ActiveBonus;
        int[MAX_COMPOUNDS] Current;
        int[MAX_COMPOUNDS] Last;

        int[MAX_COMPOUNDS] PowerupTimer;
        int[MAX_COMPOUNDS] PowerupTimerMax;
        
        bool Active;
        int Size;
        int Amount;
        int Capacity;
        int VialMax;
        int Timer;
        int TimerMax;
    } Stim;
    
    struct
    {
        // Flags
        bool Init;
        bool Active;
        bool MenuOpen;
        
        // TID
        int TID;
        
        // Stats
        int Level;
        int Threat;
        int Strength;
        int Defense;
        int Vitality;
        int Energy;
        int Regeneration;
        int Agility;
        int Capacity;
        int Luck;
        
        // Aura
        int Aura;
        int AuraTimer;
        
        // Battery
        int Battery;
        int BatteryMax;
        
        // Ammo
        int Clip;
        int ClipMax;
        int Shell;
        int ShellMax;
        int Rocket;
        int RocketMax;
        int Plasma;
        int PlasmaMax;
        
        // Timers
        int RefitTimer;
        
        // Offsets
        fixed AngleOffset;
        fixed LookAngleOffset;
        fixed DistanceOffset;
    } Turret;
    
    MissionInfo Mission;
};

extern
{
    // Version
    variable MapRegister str Version;
    
    // Flags
    variable static bool InBase;
    variable static bool Transported;
    
    // Arrays
    variable static str[MAX_PLAYERS] PlayerWeapon;
    
    // Structs
    variable static PlayerData[MAX_PLAYERS] _PlayerData;

    // --------------------------------------------------
    // Multiplayer HUD
    // 
    
    // HUD Timers
    variable GlobalArray(26) int[MAX_PLAYERS] RegenBoostTimerHUD @ 0;
    
    // HUD Item Counts
    variable GlobalArray(18) int[MAX_PLAYERS] Credits @ 0;
    variable GlobalArray(19) int[MAX_PLAYERS] Continues @ 0;
    
    // Energy Points (EP)
    variable GlobalArray(2)  int[MAX_PLAYERS] EP @ 0;
    
    // Shield
    variable GlobalArray(50) int[MAX_PLAYERS] Shield @ 0;
    variable GlobalArray(51) int[MAX_PLAYERS] ShieldCapacity @ 0;
    variable GlobalArray(52) int[MAX_PLAYERS] ShieldHealth @ 0;
};

extern "ACS"
{
    script void QuickHeal(bool) net;
    script void QuickEP() net;
    script void StatusEffect(int, int, int);
    script int AddHealth(int, int);
    script int AddHealthDirect(int, int);
};

extern
{
    script void GlobalInit() open;
    script void Init() enter;
    script void Loop();
    script void WeaponSpeed();
    script void PlayerDamage();
    script void StatRandomizer();
    script void AutosaveHandler();
    script void Dead() death;
    script void Respawn() respawn;
};

extern
{
    function void CheckHUD();
    function void DefaultLoadout();
    function void CheckCompatibility();
    function void AssignTIDs();
};

#endif
