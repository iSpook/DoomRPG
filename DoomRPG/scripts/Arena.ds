#include "RPG.dh"

#include "Arena.dh"
#include "Menu.dh"
#include "ItemData.dh"
#include "Outpost.dh"
#include "Shop.dh"
#include "Stats.dh"
#include "Utils.dh"

static int ArenaMaxWave;

bool ArenaActive = false;
bool ArenaTimerActive = false;
int ArenaState = ARENA_READY;
int ArenaPlayerNumber = -1;
int ArenaMonstersTID = 1099;
int ArenaItemSpotTID = 1200;
int ArenaItemTID = 1201;
int ArenaSpotSpawns = 1100;
int ArenaSectorTag = 100;
int ArenaWave;
int ArenaTimer;
int ArenaCount;
int ArenaMod;
int ArenaEnvironment;
int ArenaKey;

str[MAX_MODS] ArenaMods =
{
    "\cgNo Regeneration";
};

str[MAX_ENVIRONMENTS] ArenaEnvironments =
{
    "\cmBlackout";
    "\cjFoggy";
    "\ciThe Floor is Lava";
    "\cuGrayscale";
};

str[MAX_BONUS] ArenaBonus =
{
    "\cjSelect Your Own!";
    "\cvFull EP";
    "\cfMoney Drop";
    "\cuAmmo Drop";
    "\cgHealth Drop";
    "\cdArmor Drop";
    "\cuWeapon Drop";
    "\caPowerup Drop";
    "\cuStim Drop";
    "\ciMod Drop";
    "\cqKey Drop";
};

str[MAX_DEF_MONSTERS] Monsters =
{
    "ZombieMan"; "ShotgunGuy"; "DoomImp"; "Demon"; "Spectre"; "ChaingunGuy";
    "HellKnight"; "BaronOfHell"; "Cacodemon"; "LostSoul";
    "PainElemental"; "Revenant"; "Fatso"; "Arachnotron"; "ArchVile";
    "Cyberdemon"; "SpiderMastermind";
};

// Arena Script
acscript void ArenaLoop()
{
    SetOutpostMusic(OUTPOST_MUSIC_COMBAT);
    ArenaSetEnvironment(0);
    
    // Arena Loop
    while (true)
    {
        // Stop the script if the Arena is stopped or the Arena activator dies
        if (!ArenaActive || ClassifyActor(Players(ArenaPlayerNumber).TID) & ACTOR_DEAD)
        {
            ArenaStop();
            return;
        };
        
        // Arena HUD
        ArenaDrawHUD();
        
        // Arena Status Handling
        if (ArenaState == ARENA_INTERMISSION)
        {
            int BonusRandomizer = Random(-10, MAX_BONUS - 1);

            ArenaMod = -1;
            ArenaGetBonus(BonusRandomizer);
            ArenaSetEnvironment(0);
            ArenaState = ARENA_WAITING;
        }
        else if (ArenaState == ARENA_WAITING)
        {
            int Buttons = GetPlayerInput(ArenaPlayerNumber, INPUT_BUTTONS);
            int OldButtons = GetPlayerInput(ArenaPlayerNumber, INPUT_OLDBUTTONS);
            bool Ready = true;
            
            SetHudSize(0, 0, false);
            SetFont("BIGFONT");
            
            if (ArenaPlayerNumber == PlayerNumber())
            {
                if (!Player.InMenu && !Player.InShop && !Player.OutpostMenu)
                    HudMessage("Press \cd%K\c- to start the next wave\nPress \cd%K\c- to exit the Arena\n", "+use" , "+speed",
                               HUDMSG_PLAIN, 0, CR_WHITE, 1.5, 0.75, 0.05);
                
                if (Buttons & BT_USE && !(OldButtons & BT_USE) && (!Player.InMenu && !Player.InShop && !Player.OutpostMenu))
                {
                    // Check to see if others are still in the menu
                    for (int i = 0; i < MAX_PLAYERS; i++)
                        if (Players(i).InMenu || Players(i).InShop)
                            Ready = false;
                    
                    if (Ready)
                    {
                        // Multiplayer Countdown
                        if (InMultiplayer)
                        {
                            SetFont("BIGFONT");
                            HudMessage("3\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 0.25, 0.75);
                            Delay(35);
                            HudMessage("2\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 0.25, 0.75);
                            Delay(35);
                            HudMessage("1\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 0.25, 0.75);
                            Delay(35);
                        };
                        
                        ArenaWave++;
                        ArenaState = ARENA_READY;
                    }
                    else
                    {
                        ActivatorSound("menu/error", 127);
                        HudMessage("Someone is currently in a menu!\n", HUDMSG_FADEOUT, 0, CR_RED, 1.5, 0.5, 2.0, 2.0);
                    };
                };
                if (Buttons & BT_SPEED && !(OldButtons & BT_SPEED) && (!Player.InMenu && !Player.InShop && !Player.OutpostMenu))
                {
                    ArenaStop();
                    return;
                };
            };
        }
        else if (ArenaState == ARENA_READY)
        {
            int ModRandomizer = Random(-10, MAX_MODS - 1);
            
            // Clean corpses every couple of waves
            if (ArenaWave > 1 && (ArenaWave % 4) == 0)
                Thing_Remove(ArenaMonstersTID);
            
            // Change the music every random amount of waves
            if (ArenaWave > 1 && (ArenaWave % 9) == 0)
                SetOutpostMusic(OUTPOST_MUSIC_COMBAT);
            
            if (ArenaWave >= ArenaMaxWave)
                ArenaMaxWave = ArenaWave;
            ArenaMod = ModRandomizer;
            ArenaSetEnvironment(-1);
            ArenaSpawnMobs();
            ArenaState = ARENA_ACTIVE;
        }
        else if (ArenaState == ARENA_ACTIVE)
        {
            ArenaCheckMod();
            ArenaCount = ThingCount(0, ArenaMonstersTID);
            if (ArenaCount <= 0)
                ArenaState = ARENA_INTERMISSION;
            if (ArenaTimerActive && ArenaTimer > 0)
                ArenaTimer--;
        };
        
        Delay(1);
    };
};

// Stop the Arena session
acscript void ArenaStop()
{
    if (ArenaWave > 1)
        ArenaState = ARENA_WAITING
    else
        ArenaState = ARENA_READY;
    
    ArenaActive = false;
    
    if (ArenaWave >= ArenaMaxWave)
        ArenaMaxWave = ArenaWave;
    
    ArenaPlayerNumber = -1;
    ArenaCount = 0;
    ArenaMod = -1;
    ArenaSetEnvironment(0);
    
    ResetOutpostMusic();
    
    Ceiling_RaiseByValue(ArenaSectorTag - 1, 64, 128);
    Thing_Remove(ArenaMonstersTID);
};

// Arena Test Script
acscript void SetArena(int Wave, int Environment, int Bonus)
{
    if (Wave > 0)
        ArenaWave = Wave;
    
    if (Environment >= 0)
        ArenaSetEnvironment(Environment);
    
    if (Bonus >= 0)
        ArenaGetBonus(Bonus);
};

acscript void ArenaChooseBonus()
{
    int BonusChoice = 1;
    bool CanChooseKey = false;
    
    // There's a 1/4 chance you can use Drop Key
    if (Random(1, 4) == 1) CanChooseKey = true;
    
    Player.OutpostMenu = OMENU_BONUSSELECTOR;
    
    while (true)
    {
        fixed X = 48.1;
        fixed Y = 50.0;
        int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
        int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
        
        SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
        
        // Prevent the menus from being opened
        Player.InMenu = false;
        Player.InShop = false;
        
        // Set the HUD Size
        SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);
        
        // Title
        SetFont("BIGFONT");
        HudMessage("Choose a Bonus\n", HUDMSG_PLAIN, 0, CR_GREEN, 24.1, 24.0, 0.05);
        
        // Input
        if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD)
        {
            ActivatorSound("menu/move", 127);
            BonusChoice--;
            if (BonusChoice < 1) BonusChoice = MAX_BONUS - (CanChooseKey ? 1 : 2);
            if (BonusChoice == 10 && !GetCVar("drpg_ext_doomrl")) BonusChoice--;
        };
        if (Buttons == BT_BACK && OldButtons != BT_BACK)
        {
            ActivatorSound("menu/move", 127);
            BonusChoice++;
            if (BonusChoice == 10 && !GetCVar("drpg_ext_doomrl")) BonusChoice++;
            if (BonusChoice > MAX_BONUS - (CanChooseKey ? 1 : 2)) BonusChoice = 1;
        };
        if (Buttons == BT_USE && OldButtons != BT_USE)
        {
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            ArenaGetBonus(BonusChoice);
            Player.OutpostMenu = 0;
            return;
        };
            
        // Drawing
        for (int i = 1; i < MAX_BONUS - 1 + (CanChooseKey ? 1 : 0); i++)
        {
            // Skip Mod Drop if DRLA extension isn't enabled
            if (i == 10 && !GetCVar("drpg_ext_doomrl")) continue;
            
            // Cursor
            if (i == BonusChoice)
                HudMessage("-->\n", HUDMSG_PLAIN, 0, MenuCursorColor, X - 24.0, Y, 0.05);
            
            // Bonus String
            HudMessage("%s\n", ArenaBonus[i], HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
            
            // Move down Y
            Y += 16.0;
        };
        
        Delay(1);
    };
};

function void ArenaGetBonus(int Bonus)
{
    str SpawnItem;
    
    switch (Bonus)
    {
    case 0: // Choose Your Own!
        ActivatorSound("arena/pickbonus", 127);
        ArenaChooseBonus();
        break;
    case 1: // Full EP
        if (InMultiplayer)
            for (int i = 0; i < MAX_PLAYERS; i++)
                Players(i).EP = Players(i).EPMax
        else
        {
            if (Player.EP >= Player.EPMax)
            {
                ArenaGetBonus(Random(0, MAX_BONUS - 1));
                return;
            }
            else
                Player.EP = Player.EPMax;
        };
        break;
    case 2: // Money Drop
        SpawnSpot("TeleportFog", ArenaItemSpotTID, 0, 0);
        for (int i = 0; i < ArenaWave * PlayerCount(); i++)
        {
            SpawnSpot("DRPGMoneyDropper", ArenaItemSpotTID, ArenaItemTID, 0);
            SetActorVelocity(ArenaItemTID, Random(-8, 8), Random(-8, 8), Random(-8, 8), true, false);
            Thing_ChangeTID(ArenaItemTID, 0);
        };
        break;
    case 3: // Ammo Drop
        SpawnSpot("TeleportFog", ArenaItemSpotTID, 0, 0);
        for (int i = 0; i < PlayerCount(); i++)
        {
            SpawnSpot("DRPGBackpackRandomizer", ArenaItemSpotTID, ArenaItemTID, 0);
            SetActorVelocity(ArenaItemTID, Random(-8, 8), Random(-8, 8), Random(-8, 8), true, false);
            Thing_ChangeTID(ArenaItemTID, 0);
        };
        break;
    case 4: // Health Drop
        SpawnSpot("TeleportFog", ArenaItemSpotTID, 0, 0);
        for (int i = 0; i < PlayerCount(); i++)
        {
            if (Random(1, 4) == 1)
                SpawnItem = "Megasphere"
            else if (Random(1, 2) == 1)
                SpawnItem = "Soulsphere"
            else
                SpawnItem = "DRPGHealthDropper";
            SpawnSpot(SpawnItem, ArenaItemSpotTID, ArenaItemTID, 0);
            SetActorVelocity(ArenaItemTID, Random(-8, 8), Random(-8, 8), Random(-8, 8), true, false);
            Thing_ChangeTID(ArenaItemTID, 0);
        };
        break;
    case 5: // Armor Drop
        SpawnSpot("TeleportFog", ArenaItemSpotTID, 0, 0);
        for (int i = 0; i < PlayerCount(); i++)
        {
            if (Random(1, 2) == 1)
                SpawnItem = "DRPGGreenArmorRandomizer"
            else
                SpawnItem = "DRPGBlueArmorRandomizer";
            SpawnSpot(SpawnItem, ArenaItemSpotTID, ArenaItemTID, 0);
            SetActorVelocity(ArenaItemTID, Random(-8, 8), Random(-8, 8), Random(-8, 8), true, false);
            Thing_ChangeTID(ArenaItemTID, 0);
        };
        break;
    case 6: // Weapon Drop
        SpawnSpot("TeleportFog", ArenaItemSpotTID, 0, 0);
        for (int i = 0; i < PlayerCount(); i++)
        {
            SpawnSpot("DRPGWeaponDropper", ArenaItemSpotTID, ArenaItemTID, 0);
            SetActorVelocity(ArenaItemTID, Random(-8, 8), Random(-8, 8), Random(-8, 8), true, false);
            Thing_ChangeTID(ArenaItemTID, 0);
        };
        break;
    case 7: // Powerup Drop
        SpawnSpot("TeleportFog", ArenaItemSpotTID, 0, 0);
        for (int i = 0; i < PlayerCount(); i++)
        {
            SpawnSpot("DRPGPowerupDropper", ArenaItemSpotTID, ArenaItemTID, 0);
            SetActorVelocity(ArenaItemTID, Random(-8, 8), Random(-8, 8), Random(-8, 8), true, false);
            Thing_ChangeTID(ArenaItemTID, 0);
        };
        break;
    case 8: // Stim Drop
        SpawnSpot("TeleportFog", ArenaItemSpotTID, 0, 0);
        if (Random(1, 10) == 1)
        {
            for (int i = 0; i < PlayerCount(); i++)
            {
                SpawnSpot("DRPGStimDropper", ArenaItemSpotTID, ArenaItemTID, 0);
                SetActorVelocity(ArenaItemTID, Random(-8, 8), Random(-8, 8), Random(-8, 8), true, false);
                Thing_ChangeTID(ArenaItemTID, 0);
            };
        }
        else
            for (int i = 0; i < (ArenaWave / 10 + 1) * PlayerCount(); i++)
            {
                SpawnSpot("DRPGVialDropper", ArenaItemSpotTID, ArenaItemTID, 0);
                SetActorVelocity(ArenaItemTID, Random(-8, 8), Random(-8, 8), Random(-8, 8), true, false);
                Thing_ChangeTID(ArenaItemTID, 0);
            };
        break;
    case 9: // Mod Drop (DRLA Only)
        if (GetCVar("drpg_ext_doomrl"))
        {
            SpawnSpot("TeleportFog", ArenaItemSpotTID, 0, 0);
            for (int i = 0; i < PlayerCount(); i++)
            {
                SpawnSpot("RLModPackSpawner", ArenaItemSpotTID, ArenaItemTID, 0);
                SetActorVelocity(ArenaItemTID, Random(-8, 8), Random(-8, 8), Random(-8, 8), true, false);
                Thing_ChangeTID(ArenaItemTID, 0);
            };
        }
        else
        {
            ArenaGetBonus(Random(0, MAX_BONUS - 1));
            return;
        };
        break;
    case 10: // Key Drop
        SpawnSpot("TeleportFog", ArenaItemSpotTID, 0, 0);
        if (ArenaKey == 0) SpawnItem = "DRPGRedCard";
        if (ArenaKey == 1) SpawnItem = "DRPGYellowCard";
        if (ArenaKey == 2) SpawnItem = "DRPGBlueCard";
        if (ArenaKey == 3) SpawnItem = "DRPGRedSkull";
        if (ArenaKey == 4) SpawnItem = "DRPGYellowSkull";
        if (ArenaKey == 5) SpawnItem = "DRPGBlueSkull";
        if (ArenaKey == 6)
        { 
            ArenaGetBonus(Random(0, MAX_BONUS - 1));
            return;
        };
        for (int i = 0; i < PlayerCount(); i++)
        {
            SpawnSpot(SpawnItem, ArenaItemSpotTID, ArenaItemTID, 0);
            SetActorVelocity(ArenaItemTID, Random(-8, 8), Random(-8, 8), Random(-8, 8), true, false);
            Thing_ChangeTID(ArenaItemTID, 0);
        };
        if (ArenaKey < 6) ArenaKey++;
        ActivatorSound("arena/keydrop", 127);
        break;
    };
    
    // Bonus Message
    if (Bonus > 0)
    {
        SetHudSize(0, 0, false);
        SetFont("BIGFONT");
        HudMessageBold("%s\n", ArenaBonus[Bonus], HUDMSG_FADEOUT, MENU_ID, CR_WHITE, 0.5, 0.5, 2.0, 1.0);
        if (Bonus != 10)
            ActivatorSound("arena/drop", 127);
    };
};

function void ArenaDrawHUD()
{
    fixed X = 0.1;
    fixed Y = 24.0;
    
    // Don't draw the HUD if you're in a menu
    if (Player.InMenu || Player.InShop || Player.OutpostMenu > 0) return;
    
    SetHudSize(320, 240, false);
    SetFont("SMALLFONT");
    
    // Wave
    HudMessageBold("Wave: %d\n", ArenaWave,
                   HUDMSG_PLAIN, 0, CR_GREEN, X, Y, 0.05);
    Y += 8.0;

    // Monster Count
    if (ArenaCount > 0)
    {
        HudMessageBold("Monsters: %d\n", ArenaCount,
                       HUDMSG_PLAIN, 0, CR_GREEN, X, Y, 0.05);
        Y += 8.0;
    };
    
    // Timer
    if (ArenaTimerActive && ArenaTimer > 0)
    {
        HudMessageBold("Time: %d\n", ArenaTimer / 35 + 1,
                       HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
        Y += 8.0;
    };
    
    // Mod
    if (ArenaMod >= 0)
    {
        HudMessageBold("%s\n", ArenaMods[ArenaMod],
                       HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
        Y += 8.0;
    };

    // Environment
    if (ArenaEnvironment > 0)
    {
        HudMessageBold("%s\n", ArenaEnvironments[ArenaEnvironment - 1],
                       HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
        Y += 8.0;
    };
};

function void ArenaCheckMod()
{
    switch (ArenaMod)
    {
    case 0: // No Regeneration
        Player.HPRate = 0;
        Player.EPRate = 0;
        break;
    };
};

function void ArenaSpawnMobs()
{
    int MonsterID = 1;
    int Spawned;
    
    for (int i = ArenaSpotSpawns; i <= ArenaSpotSpawns + 30; i++)
    {
        // Check to make sure there wasn't a chance that nothing at all spawned
        if (i == ArenaSpotSpawns + 30)
        {
            if (Spawned == 0)
                i = ArenaSpotSpawns
            else
                break;
        };
        
        // Get a random monster from the list
        MonsterID = Random(-5 + (ArenaWave / 10), ArenaWave / 5);
        
        if (MonsterID > 16)
            MonsterID = 16;
        
        // Skip this spawn spot if < 0 is hit by the randomizer
        if (MonsterID < 0)
            continue;
        
        // Spawn the monster
        if (SpawnSpotFacingForced(Monsters[MonsterID], i, ArenaMonstersTID))
        {
            SpawnSpotForced("TeleportFog", i, 0, 0);
            Spawned++;
        };
    };
};

function void ArenaSetEnvironment(int ID)
{
    if (ID == -1)
    {
        int EnvironmentRandomizer = Random(-10, MAX_ENVIRONMENTS);
        if (EnvironmentRandomizer > 0)
            ID = EnvironmentRandomizer;
    };

    switch (ID)
    {
    case 0: // Normal
        Light_Fade(ArenaSectorTag, 192, 35);
        Light_Fade(ArenaSectorTag + 1, 192, 35);
        Light_Fade(ArenaSectorTag + 2, 192, 35);
        Sector_SetFade(ArenaSectorTag, 0, 0, 0);
        Sector_SetFade(ArenaSectorTag + 1, 0, 0, 0);
        Sector_SetFade(ArenaSectorTag + 2, 0, 0, 0);
        ChangeFloor(ArenaSectorTag, "CEIL5_1");
        ChangeFloor(ArenaSectorTag + 1, "CEIL5_2");
        ChangeFloor(ArenaSectorTag + 2, "FLAT3");
        Sector_SetDamage(ArenaSectorTag, 0, 0);
        Sector_SetDamage(ArenaSectorTag + 1, 0, 0);
        Sector_SetDamage(ArenaSectorTag + 2, 0, 0);
        Sector_SetColor(ArenaSectorTag, 255, 255, 255);
        Sector_SetColor(ArenaSectorTag + 1, 255, 255, 255);
        Sector_SetColor(ArenaSectorTag + 2, 255, 255, 255);
        break;
    case 1: // Blackout
        Light_Fade(ArenaSectorTag, 0, 35);
        Light_Fade(ArenaSectorTag + 1, 0, 35);
        Light_Fade(ArenaSectorTag + 2, 0, 35);
        break;
    case 2: // Foggy
        int r = Random(0, 255);
        int g = Random(0, 255);
        int b = Random(0, 255);
        Light_Fade(ArenaSectorTag, 128, 35);
        Light_Fade(ArenaSectorTag + 1, 128, 35);
        Light_Fade(ArenaSectorTag + 2, 128, 35);
        Sector_SetFade(ArenaSectorTag, r, g, b);
        Sector_SetFade(ArenaSectorTag + 1, r, g, b);
        Sector_SetFade(ArenaSectorTag + 2, r, g, b);
        break;
    case 3: // The Floor is Lava
        ChangeFloor(ArenaSectorTag, "LAVA1");
        ChangeFloor(ArenaSectorTag + 1, "LAVA1");
        ChangeFloor(ArenaSectorTag + 2, "LAVA1");
        Sector_SetDamage(ArenaSectorTag, 1, MOD_SLIME);
        Sector_SetDamage(ArenaSectorTag + 1, 1, MOD_SLIME);
        Sector_SetDamage(ArenaSectorTag + 2, 1, MOD_SLIME);
        break;
    case 4: // Grayscale
        Sector_SetColor(ArenaSectorTag, 255, 255, 255, 255);
        Sector_SetColor(ArenaSectorTag + 1, 255, 255, 255, 255);
        Sector_SetColor(ArenaSectorTag + 2, 255, 255, 255, 255);
        break;
    };
    
    ArenaEnvironment = ID;
};
