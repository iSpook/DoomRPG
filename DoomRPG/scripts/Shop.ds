#include "RPG.dh"

#include "ItemData.dh"
#include "Menu.dh"
#include "Minigame.dh"
#include "Shield.dh"
#include "Shop.dh"
#include "Utils.dh"

// Global Shop Card Rank
static int GlobalShopCard;

int ShopSpotID = 1000;

// Open the Shop
acscript void OpenShop(bool FromBase) net
{
    // If you're dead, return
    if (GetActorProperty(0, APROP_Health) <= 0) return;
    
    // If you're in an Outpost menu, return
    if (Player.OutpostMenu > 0) return;
    
    // If you're in any minigames, return
    if (Player.InMinigame) return;
    
    // Close the main menu if it's open
    Player.InMenu = false;
    
    if (Player.OutpostMenu == OMENU_LOCKER) // Locker
    {
        Player.LockerGlobal = !Player.LockerGlobal;
        ActivatorSound("menu/move", 127);
        return;
    };
    
    if (Player.InShop)
    {
        // Sanity Check to prevent the shop closing itself after buying an item in the Outpost Shop
        if (!FromBase) return;
        
        ActivatorSound("menu/leave", 127);
        SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
        Player.InShop = false;
    }
    else
    {
        // Don't let you Shop Anywhere if it's disabled
        if (!InBase && !GetCVar("drpg_shoptype")) return;
        
        ActivatorSound("menu/shop", 127);
        Player.InShop = true;
    };
};

script void AutoSellHandler()
{
    while (true)
    {
        if (Player.RankLevel > 0 || InBase)
            for (int i = 0; i < ItemCategories; i++)
                for (int j = 0; j < ItemMax[i]; j++)
                {
                    ItemInfoPtr Item = &ItemData[i][j];
                    
                    if (Player.AutoSell[i][j] && CheckInventory(Item->Actor) > 0)
                    {
                        // DoomRL Compatibility
                        if (GetCVar("drpg_ext_doomrl"))
                        {
                            if (i == 0) // Weapons
                                TakeInventory("RLWeaponLimit", CheckInventory(Item->Actor));
                            if (i == 3) // Armor
                                TakeInventory("RLArmorInInventory", CheckInventory(Item->Actor));
                            if (i == 9) // Mod Packs
                                if (j == 8) // Special handling case for Armor Modpack
                                    TakeInventory("RLArmorModItemInInventory", CheckInventory(Item->Actor))
                                else
                                    if (PlayerClass(PlayerNumber()) == 2) // Special handling case for Technician
                                        TakeInventory("RLScavengerModLimit", CheckInventory(Item->Actor))
                                    else
                                        TakeInventory("RLModLimit", CheckInventory(Item->Actor));
                            if (i == 10) // Boots
                                TakeInventory("RLBootsInInventory", CheckInventory(Item->Actor));
                        };
                        
                        Player.AutoSellPay += SellItem(Item->Actor, true, true);
                        DrawPay(Player.AutoSellPay);
                        Player.AutoSellTimer = 35 * 6;
                    };
                };
        
        if (Player.AutoSellTimer <= 0)
            Player.AutoSellPay = 0;
        
        Delay(1);
    };
};

function void ShopLoop()
{
    ItemInfoPtr ItemPtr = &ItemData[Player.ShopPage][Player.ShopIndex];
    int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
    int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
    int Cost = ItemPtr->Price - ItemPtr->Price * Player.ShopDiscount / 100;
    int Rank = ItemPtr->Rank;
    int SellPrice;
    int Color;
    
    // Freeze the Player
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);

    // Get the sell price
    SellPrice = GetSellPrice("", 1);
    
    // Set the HUD Size
    SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);

    // Draw Shop
    SetFont("BIGFONT");
    HudMessage("Shop - %s (%d/%d)\n",
               ItemCategoryNames[Player.ShopPage], Player.ShopPage + 1, ItemCategories,
               HUDMSG_PLAIN, 0, CR_GREEN,
               24.1, 24.0, 0.05);
    
    // Draw Price
    if (CategoryFlags[Player.ShopPage] & CF_NOSELL) // No selling
        HudMessage("\cj%d C \ck(Discount: %d%%)\n",
                   Cost, Player.ShopDiscount,
                   HUDMSG_PLAIN, 0, CR_GOLD,
                   24.1, 38.0, 0.05)
    else if (CategoryFlags[Player.ShopPage] & CF_NOBUY || Rank == -1) // No Buying
        HudMessage("\ci%d C \ck(Discount: %d%%)\n",
                   SellPrice, Player.ShopDiscount,
                   HUDMSG_PLAIN, 0, CR_GOLD,
                   24.1, 38.0, 0.05)
    else // Normal
        HudMessage("\cj%d C \ci(%d C) \ck(Discount: %d%%)\n",
                   Cost, SellPrice, Player.ShopDiscount,
                   HUDMSG_PLAIN, 0, CR_GOLD,
                   24.1, 38.0, 0.05);
    
    DrawItemGrid(IG_STORE);
    
    // Draw Shop Card
    if (Player.ShopCard > 0)
    {
        str CardSprite;
        
        SetFont("BIGFONT");
        HudMessage("+%d%%\n", Player.ShopCard * 5, HUDMSG_PLAIN, 0, (InBase ? CR_YELLOW : CR_GREY), 436.4, 364.0, 0.05);
        
        if (Player.ShopCard == 1)
            CardSprite = "UCRDA0"
        else if (Player.ShopCard == 2)
            CardSprite = "UCRDB0"
        else if (Player.ShopCard == 3)
            CardSprite = "UCRDC0"
        else if (Player.ShopCard == 4)
            CardSprite = "UCRDD0"
        else if (Player.ShopCard == 5)
            CardSprite = "UCRDE0";
        
        if (InBase)
            PrintSprite(CardSprite, 0, 458.0, 384.0, 0.05)
        else
            PrintSpritePulse(CardSprite, 0, 458.0, 384.0, 0.5, 64.0, 0.5);
    };
    
    // Check Input
    if (Buttons & BT_FORWARD && !(OldButtons & BT_FORWARD))
    {
        ActivatorSound("menu/move", 127);
        if (Buttons & BT_SPEED)
            Player.ShopIndex -= 54
        else
            Player.ShopIndex -= 9;
        if (Player.ShopIndex < 0) Player.ShopIndex = 0;
    };
    if (Buttons & BT_BACK && !(OldButtons & BT_BACK))
    {
        ActivatorSound("menu/move", 127);
        if (Buttons & BT_SPEED)
            Player.ShopIndex += 54
        else
            Player.ShopIndex += 9;
        if (Player.ShopIndex > ItemMax[Player.ShopPage] - 1) Player.ShopIndex = ItemMax[Player.ShopPage] - 1;
    };
    if ((Buttons & BT_LEFT && !(OldButtons & BT_LEFT)) ||
        (Buttons & BT_MOVELEFT && !(OldButtons & BT_MOVELEFT)))
        if (Buttons & BT_SPEED)
        {
            ActivatorSound("menu/move", 127);
            Player.ShopPage--;
            Player.ShopIndex = 0;
            if (Player.ShopPage < 0) Player.ShopPage = ItemCategories - 1;
        }
        else
        {
            ActivatorSound("menu/move", 127);
            Player.ShopIndex--;
            if (Player.ShopIndex < 0) Player.ShopIndex = 0;
        };
    if ((Buttons & BT_RIGHT && !(OldButtons & BT_RIGHT)) ||
        (Buttons & BT_MOVERIGHT && !(OldButtons & BT_MOVERIGHT)))
        if (Buttons & BT_SPEED)
        {
            ActivatorSound("menu/move", 127);
            Player.ShopPage++;
            Player.ShopIndex = 0;
            if (Player.ShopPage > ItemCategories - 1) Player.ShopPage = 0;
        }
        else
        {
            ActivatorSound("menu/move", 127);
            Player.ShopIndex++;
            if (Player.ShopIndex > ItemMax[Player.ShopPage] - 1) Player.ShopIndex = ItemMax[Player.ShopPage] - 1;
        };
    if (Buttons & BT_USE && !(OldButtons & BT_USE) && !Player.MenuBlock)
        if (Buttons & BT_SPEED)
            SellItem(ItemPtr->Actor, false, false)
        else
            BuyItem(ItemPtr->Actor);
    if (Buttons & BT_ZOOM && !(OldButtons & BT_ZOOM))
        if (CheckInventory(ItemPtr->Actor) > 0 && !(GetCVar("drpg_ext_doomrl") && (Player.ShopPage == 0 || Player.ShopPage == 3 || Player.ShopPage == 9 || Player.ShopPage == 10)))
        {
            int Success = DropPlayerItem(ItemPtr->Actor);
            if (Success)
                TakeInventory(ItemPtr->Actor, 1);
        }
        else
            ActivatorSound("menu/error", 127);
    if (Buttons & BT_USE && Buttons & BT_SPEED)
    {
        Player.DelayTimer++;
        
        if (Player.DelayTimer > 35.0 * GetCVarFixed("drpg_menu_repeat"))
        {
            SellItem(ItemPtr->Actor, true, false);
            Player.DelayTimer = 0;
        };
    };
    if (Buttons == BT_ATTACK && OldButtons != BT_ATTACK)
        if (!(CategoryFlags[Player.ShopPage] & CF_NOSELL))
        {
            Player.AutoSell[Player.ShopPage][Player.ShopIndex] = !Player.AutoSell[Player.ShopPage][Player.ShopIndex];
            ActivatorSound("menu/move", 127);
        }
        else
            ActivatorSound("menu/error", 127);
    
    // Reset the Delay Timer if no buttons are pressed
    if (Buttons == 0 && OldButtons == 0)
        Player.DelayTimer = 0;
    
    // Reset the menu block
    Player.MenuBlock = false;   
};

function void BuyItem(str Item)
{
    ItemInfoPtr ItemPtr = &ItemData[Player.ShopPage][Player.ShopIndex];
    int Cost = ItemPtr->Price - ItemPtr->Price * Player.ShopDiscount / 100;
    int Spawned;
    
    // If you're not the required rank, return
    if (ItemPtr->Rank > Player.RankLevel)
    {
        SetHudSize(0, 0, false);
        SetFont("BIGFONT");
        HudMessage("You are not a high enough Rank to buy this item\n", HUDMSG_FADEOUT, 0, CR_RED, 1.5, 0.5, 2.0, 1.0);
        ActivatorSound("menu/error", 127);
        return;
    };
    
    // If the item (or category) is flagged to never be buyable, return
    if (ItemPtr->Rank == -1 || CategoryFlags[Player.ShopPage] & CF_NOBUY)
    {
        SetHudSize(0, 0, false);
        SetFont("BIGFONT");
        HudMessage("You cannot buy this item\n", HUDMSG_FADEOUT, 0, CR_RED, 1.5, 0.5, 2.0, 1.0);
        ActivatorSound("menu/error", 127);
        return;
    };
    
    // If you don't have enough Credits, return
    if (CheckInventory("DRPGCredits") < ItemPtr->Price - ItemPtr->Price * Player.ShopDiscount / 100)
    {
        SetHudSize(0, 0, false);
        SetFont("BIGFONT");
        HudMessage("You don't have enough Credits to buy this item\n", HUDMSG_FADEOUT, 0, CR_RED, 1.5, 0.5, 2.0, 1.0);
        ActivatorSound("menu/error", 127);
        return;
    };
    
    // If the item has no cost, return
    if (Cost == 0)
    {
        ActivatorSound("menu/error", 127);
        return;
    };
    
    // DoomRL Compatibility
    if (GetCVar("drpg_ext_doomrl"))
        if (Player.ShopPage == 0) // Weapons
            Item = StrParam("%sPickup\n", Item);
    
    if (InBase && !GetCVar("drpg_shoptype"))
        Spawned = SpawnSpotForced(Item, ShopSpotID, 0, 0)
    else
    {
        Spawned = SpawnForced(Item, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
        SetActorVelocity(Player.TID, 0.01, 0.01, 0, true, false);
    };
    
    if (Spawned > 0)
    {
        ActivatorSound("menu/buy", 127);
        TakeInventory("DRPGCredits", Cost);
    }
    else
        ActivatorSound("menu/error", 127);
};

function int GetSellPrice(str Item, int Amount)
{
    ItemInfoPtr ItemPtr = &ItemData[Player.ShopPage][Player.ShopIndex];
    int SellCost;
    
    // Just use the current index if item is blank
    if (Item == "")
        SellCost = ItemPtr->Price;
    
    // Iterate to find the item
    for (int i = 0; i < ItemCategories; i++)
        for (int j = 0; j < ItemMax[i]; j++)
        {
            ItemInfoPtr ItemIterPtr = &ItemData[i][j];
            
            if (ItemIterPtr->Actor == Item)
            {
                SellCost = ItemIterPtr->Price;
                break;
            };
        };
    
    // 1/10th normal buying price
    SellCost /= 10;
    
    // Multiply by amount
    SellCost *= Amount;
    
    // Make sure you always get at least 1 Credit from a sale
    if (SellCost == 0) SellCost = 1;
    
    return SellCost;
};

function int SellItem(str Item, bool SellAll, bool AutoSold)
{
    int Amount = 1;
    int SellCost;

    // You must be at least Rank 1 or in the Outpost to sell items
    if (Player.RankLevel == 0 && !InBase)
    {
        SetHudSize(0, 0, false);
        SetFont("BIGFONT");
        HudMessage("You cannot sell items outside the Outpost until you reach the first rank\n", HUDMSG_FADEOUT, 0, CR_RED, 1.5, 0.5, 2.0, 1.0);
        ActivatorSound("menu/error", 127);
        return 0;
    };
    
    // If you're on a page that doesn't allow selling or you don't have any of the required item, fail
    if (!AutoSold && (CheckInventory(Item) == 0 || CategoryFlags[Player.ShopPage] & CF_NOSELL))
    {
        ActivatorSound("menu/error", 127);
        return 0;
    };
    
    if (SellAll)
        Amount = CheckInventory(Item);
    
    // Get Sell Price
    SellCost = GetSellPrice(Item, Amount);
    
    // DoomRL Compatibility
    if (GetCVar("drpg_ext_doomrl") && !AutoSold)
        for (int i = 1; i <= Amount; i++)
        {
            if (Player.ShopPage == 0) // Weapons
                TakeInventory("RLWeaponLimit", 1);
            if (Player.ShopPage == 3) // Armor
                TakeInventory("RLArmorInInventory", 1);
            if (Player.ShopPage == 9) // Mod Packs
                if (Player.ShopIndex == 8) // Special handling case for Armor Modpack
                    TakeInventory("RLArmorModItemInInventory", 1)
                else
                    if (PlayerClass(PlayerNumber()) == 2) // Special handling case for Technician
                        TakeInventory("RLScavengerModLimit", 1)
                    else
                        TakeInventory("RLModLimit", 1);
            if (Player.ShopPage == 10) // Boots
                TakeInventory("RLBootsInInventory", 1);
        };
    
    // Sell the Item
    if (CheckInventory(Item) >= Amount)
    {
        if (AutoSold)
            ActivatorSound("credits/autosell", 127)
        else
            ActivatorSound("credits/payout", 127);
        TakeInventory(Item, Amount);
        GiveInventory("DRPGCredits", SellCost);
    }
    else
        ActivatorSound("menu/error", 127);
    
    return SellCost;
};

function void CheckShopCard()
{
    Player.ShopCard = CheckInventory("DRPGUACCard");
    
    if (Player.ShopCard == 5 && !ItemRanksRemoved)
        RemoveItemRanks();
    
    for (int i = 0; i < MAX_PLAYERS; i++)
        if (Players(i).ShopCard > GlobalShopCard)
            GlobalShopCard = Players(i).ShopCard;
};
