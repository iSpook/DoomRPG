#include "RPG.dh"

#include "Menu.dh"
#include "Popoffs.dh"
#include "Shield.dh"
#include "Shop.dh"
#include "Stats.dh"
#include "Utils.dh"

AddressSpace MapArray ShieldSpace;

ShieldSpace ShieldPart[4][MAX_PARTS] ShieldData =
{
    // Actor, Name, Icon, Description, Capacity, Charge Rate, Delay Rate
    
    /*  Shield Part Rarity colors
        
        White   \cj     Common
        Green   \cd     Uncommon
        Blue    \cn     Rare
        Gold    \ck     Legendary
        
    */
    
    // Bodies
    {
        { "DRPGShieldBody1";        "\cjUAC";               "SHBOA0"; "";   25;   0;   0;    };
        { "DRPGShieldBody2";        "\cjXTron";             "SHBOB0"; "";   50;   0;   0;    };
        { "DRPGShieldBody3";        "\cjBlack Mesa";        "SHBOC0"; "";   150;  0;   2;    };
        { "DRPGShieldBody4";        "\cjEDF";               "SHBOD0"; "";   100;  0;   0;    };
        { "DRPGShieldBody5";        "\cjCyberdyne Systems"; "SHBOE0"; "";   80;   2;   0;    };
        { "DRPGShieldBody6";        "\cjMisfit Tech";       "SHBOF0"; "";   150;  0;   0;    };
        { "DRPGShieldBody7";        "\ckShadaloo";          "SHBOG0"; "";   400;  -1;  4;    };
        { "DRPGShieldBody8";        "\cjArkai";             "SHBOH0"; "";   250;  0;   0;    };
        { "DRPGShieldBody9";        "\cjIronclad Inc.";     "SHBOI0"; "";   150;  0;   -2;   };
        { "DRPGShieldBody10";       "\cjYholl";             "SHBOJ0"; "";   50;   5;   -3;   };
        { "DRPGShieldBody11";       "\cdHyperix";           "SHBOK0"; "";   200;  1;   -1;   };
        { "DRPGShieldBody12";       "\cdXaser Inc.";        "SHBOL0"; "";   500;  0;   2.5;  };
        { "DRPGShieldBody13";       "\cddataDyne";          "SHBOM0"; "";   250;  3;   -1;   };
        { "DRPGShieldBody14";       "\cdStarbright";        "SHBON0"; "";   400;  2;   -1;   };
        { "DRPGShieldBody15";       "\ckHellsing";          "SHBOO0"; "";   666;  -1;  0;    };
        { "DRPGShieldBody16";       "\cnS.H.I.E.L.D.";      "SHBOP0"; "";   500;  0;   0;    };
        { "DRPGShieldBody17";       "\cnUAC Elite";         "SHBOQ0"; "";   400;  1;   -3;   };
        { "DRPGShieldBody18";       "\cnStark Industries";  "SHBOR0"; "";   550;  1;   -1;   };
        { "DRPGShieldBody19";       "\cnWeyland-Yutani";    "SHBOS0"; "";   100;  7;   0;    };
        { "DRPGShieldBody20";       "\cnMegalith";          "SHBOT0"; "";   750;  0;   5;    };
        { "DRPGShieldBody21";       "\ckReaper Industries"; "SHBOU0"; "";   444;  4;   -4;   };
        { "DRPGShieldBody22";       "\ckEternity Systems";  "SHBOV0"; "";   2000; 0;   15;   };
    };
    
    // Batteries
    {
        { "DRPGShieldBattery1";     "\cjCrappy";           "SHBAA0"; "";    25;   0;   0;    };
        { "DRPGShieldBattery2";     "\cjBullet";           "SHBAB0"; "";    50;   1;   0;    };
        { "DRPGShieldBattery3";     "\cjElegant";          "SHBAC0"; "";    20;   0;   -3;   };
        { "DRPGShieldBattery4";     "\cjSpiked";           "SHBAD0"; "";    100;  1;   0;    };
        { "DRPGShieldBattery5";     "\cjStubborn";         "SHBAE0"; "";    250;  0;   0;    };
        { "DRPGShieldBattery6";     "\cdMirrored";         "SHBAF0"; "";    150;  2;   0;    };
        { "DRPGShieldBattery7";     "\cdRefined";          "SHBAG0"; "";    100;  2;   -1;   };
        { "DRPGShieldBattery8";     "\cdClustered";        "SHBAH0"; "";    200;  3;   0;    };
        { "DRPGShieldBattery9";     "\cnWinged";           "SHBAI0"; "";    250;  4;   0;    };
        { "DRPGShieldBattery10";    "\cnOvercharged";      "SHBAJ0"; "";    10;   5;   -2;   };
        { "DRPGShieldBattery11";    "\cnSuperb";           "SHBAK0"; "";    425;  1;   0;    };
        { "DRPGShieldBattery12";    "\ckRedundant";        "SHBAL0"; "";    50;   30;  15;   };
        { "DRPGShieldBattery13";    "\ckReinforced";       "SHBAM0"; "";    1000; 2;   2.5;  };
    };
    
    // Capacitors
    {
        { "DRPGShieldCapacitor1";   "\cjStandard";         "SHCAA0"; "";    0;     1;   0;   };
        { "DRPGShieldCapacitor2";   "\cjOutdated";         "SHCAB0"; "";    0;     3;   2;   };
        { "DRPGShieldCapacitor3";   "\cjCooled";           "SHCAC0"; "";    0;     2;   0;   };
        { "DRPGShieldCapacitor4";   "\cjWarm";             "SHCAD0"; "";    25;    1;   0;   };
        { "DRPGShieldCapacitor5";   "\cjInefficient";      "SHCAE0"; "";    0;     6;   5;   };
        { "DRPGShieldCapacitor6";   "\cdEnergized";        "SHCAF0"; "";    0;     3;   0;   };
        { "DRPGShieldCapacitor7";   "\cdInfused";          "SHCAG0"; "";    0;     4;   0;   };
        { "DRPGShieldCapacitor8";   "\cdPlasmatic";        "SHCAH0"; "";    100;   3;   0;   };
        { "DRPGShieldCapacitor9";   "\cdBurning";          "SHCAI0"; "";    0;     5;   0;   };
        { "DRPGShieldCapacitor10";  "\ckPulsating";        "SHCAJ0"; "";    0;     1;   -5;  };
        { "DRPGShieldCapacitor11";  "\cnFiery";            "SHCAK0"; "";    0;     5;   -1;  };
        { "DRPGShieldCapacitor12";  "\cnEternal";          "SHCAL0"; "";    500;   1;   3;   };
        { "DRPGShieldCapacitor13";  "\cnOverloaded";       "SHCAM0"; "";    0;     10;  1;   };
        { "DRPGShieldCapacitor14";  "\ckDark";             "SHCAN0"; "";    1000;  -1;  15;  };
        { "DRPGShieldCapacitor15";  "\ckChaotic";          "SHCAO0"; "";    0;     7;   -7;  };
    };
    
    // Accessories
    {
        { "DRPGShieldAccessory1";   "\cgX-7";              "SHACA0"; "\cg2x Melee Damage";                                                                                                                                                };
        { "DRPGShieldAccessory2";   "\caSGENX-5b";         "SHACB0"; "Heals you rapidly while active";                                                                                                                                    };
        { "DRPGShieldAccessory3";   "\cgAMP-3000";         "SHACC0"; "\cg2x Damage\c- when full\nHalves \cvCapacity\c- on attack";                                                                                                        };
        { "DRPGShieldAccessory4";   "\cdHRY-VP80";         "SHACD0"; "\cv-50% Capacity\n\ca-50% Delay";                                                                                                                                   };
        { "DRPGShieldAccessory5";   "\cdDEF-2";            "SHACE0"; "\cv2x Capacity\n\ca2x Delay";                                                                                                                                       };
        { "DRPGShieldAccessory6";   "\cdB1-ZUT3";          "SHACF0"; "\cd2x Charge Rate\n\cv-50% Capacity";                                                                                                                               };
        { "DRPGShieldAccessory7";   "\cqCNV-RT99";         "SHACG0"; "Instead of fast charging with \cnEP\c-, uses 1 \cdCell\c- per 10 \cvCapacity";                                                                                      };
        { "DRPGShieldAccessory8";   "\ckREK-T50";          "SHACH0"; "\cd+50% Damage\c- taken, but triples monster killing \ckpayout bonus";                                                                                              };
        { "DRPGShieldAccessory9";   "\ciUW-0t";            "SHACI0"; "When your survival bonus goes off, your Shield reactivates and is fully recharged";                                                                                 };
        { "DRPGShieldAccessory10";  "\cuCU-256";           "SHACJ0"; "When full, gives Light Amplification power";                                                                                                                        };
        { "DRPGShieldAccessory11";  "\cdTX-BGONN";         "SHACK0"; "When full, immune to \cdToxicity";                                                                                                                                  };
        { "DRPGShieldAccessory12";  "\cnWRP30-LITE";       "SHACL0"; "When full, gives Invisibility power";                                                                                                                               };
        { "DRPGShieldAccessory13";  "\ciNOV-A2";           "SHACM0"; "1 in 4 chance of emitting BFG Balls when Shield is depleted";                                                                                                       };
        { "DRPGShieldAccessory14";  "\ccLZ-Y200";          "SHACN0"; "\cd2x Charge Rate\nOnly charges while standing still";                                                                                                              };
        { "DRPGShieldAccessory15";  "\cvBST-700";          "SHACO0"; "Randomly drops \cvShield Boosters\c- when hit";                                                                                                                     };
        { "DRPGShieldAccessory16";  "\cnPH-D88";           "SHACP0"; "When full, recharges \cnEP\c- instead of \cvCapacity";                                                                                                              };
        { "DRPGShieldAccessory17";  "\ckBATT-B";           "SHACQ0"; "When full, recharges \ckAugmentation Battery\c- instead of \cvCapacity";                                                                                            };
        { "DRPGShieldAccessory18";  "\chSHVR-Z7";          "SHACR0"; "When full, regenerates \ccClips\c- and \ciShells";                                                                                                                  };
        { "DRPGShieldAccessory19";  "\cvMM-12";            "SHACS0"; "\cdCharge Rate\c- scales based on current shield health\nThe higher the faster";                                                                                    };
        { "DRPGShieldAccessory20";  "\caMRTE-KRAR";        "SHACT0"; "\cv-50% Capacity\n\cg1.5x Damage";                                                                                                                                  };
        { "DRPGShieldAccessory21";  "\ccSP-00k";           "SHACU0"; "1 in 8 chance of getting Ghosted when hit";                                                                                                                         };
        { "DRPGShieldAccessory22";  "\cvRR-G0";            "SHACV0"; "Scales your \cdCharge Rate\c- up and \caDelay\c- down based on how long you've been in a level";                                                                    };
        { "DRPGShieldAccessory23";  "\cqE1N-T31";          "SHACW0"; "1 second Time Freeze when hit";                                                                                                                                     };
        { "DRPGShieldAccessory24";  "\ckPATR-0T";          "SHACX0"; "Scales your \cvCapacity\c- based off your \ckRank";                                                                                                                 };
        { "DRPGShieldAccessory25";  "\cfRNJSUS-2";         "SHACY0"; "Scales off of your \cfLuck\c- inversely\nWith 100+ \cfLuck\c-, it has no effect\nwith 0 \cfLuck\c-, it's equivalent to having 50 \cfLuck";                          };
        { "DRPGShieldAccessory26";  "\cnPWAA-9001";        "SHACZ0"; "Uses the next level up of your current Skill for the cost of the current.";                                                                                         };
        { "DRPGShieldAccessory27";  "\ckAW-G01";           "SHA2A0"; "Acts as an \cdAugmentation Slot Upgrade";                                                                                                                           };
        { "DRPGShieldAccessory28";  "\ctSCL-AR53";         "SHA2B0"; "Uses your stats as a percentage to modify shield stats\n\chCapacity\c- for \cvCapacity\n\cnEnergy\c- for \cdCharge Rate\n\ctRegeneration\c- for reducing \caDelay"; };
        { "DRPGShieldAccessory29";  "\ckRF-CT";            "SHA2C0"; "Reflects projectiles when hit";                                                                                                                                     };
    };
};

// Max Shield Parts per page
int[4] ShieldPartsMax = { 22; 13; 15; 29; };

// Accessory Prices
int[MAX_PARTS] ShieldAccessoryPrices =
{
    10000;  // X-7
    15000;  // SGENX-5b
    40000;  // AMP-3000
    20000;  // HRY-VP80
    20000;  // DEF-2
    20000;  // B1-ZUT3
    12000;  // CNV-RT99
    15000;  // REK-T50
    50000;  // UW-0t
    12000;  // CU-256
    15000;  // TX-BGONN
    12000;  // WRP30-LITE
    45000;  // NOV-A2
    20000;  // LZ-Y200
    25000;  // BST-700
    75000;  // PH-D88
    120000; // BATT-B
    35000;  // SHVR-Z7
    20000;  // MM-12
    50000;  // MRTE-KRAR
    10000;  // SP-00k
    70000;  // RR-G0
    70000;  // E1N-T31
    45000;  // PATR-0T
    45000;  // RNJSUS-2
    40000;  // PWAA-9001
    80000;  // AW-G01
    200000; // SCL-AR53
    65000;  // RF-CT
};

script void ShieldTimer()
{
    while (true)
    {
        if (Player.Shield.Active)
        {
            // Inventory items for multiplayer/health bar handling
            SetInventory("DRPGShieldCharge", Player.Shield.Charge);
            SetInventory("DRPGShieldChargeMax", Player.Shield.Capacity);
            
            // Shield is Full
            if (Player.Shield.Charge >= Player.Shield.Capacity && !Player.Shield.Full)
            {
                ActivatorSound("shield/full", 127);
                Player.Shield.Full = true;
            };
            
            // Increase Charge
            if (Player.Shield.Timer == 0)
            {
                Player.Shield.Charge += Player.Shield.ChargeRate;
                Player.Shield.Timer = Player.Shield.Interval;
                
                if (Player.Shield.Accessory == SHIELD_ACC_PHD88 && Player.Shield.Charge >= Player.Shield.Capacity && Player.EP < Player.EPMax)
                    Player.EP++;
                if (Player.Shield.Accessory == SHIELD_ACC_BATTB && Player.Shield.Charge >= Player.Shield.Capacity && Player.Augs.Battery < Player.Augs.BatteryMax)
                {
                    Player.Augs.Battery++;
                    DrawBattery();
                };
                if (Player.Shield.Accessory == SHIELD_ACC_SHVRZ7 && Player.Shield.Charge >= Player.Shield.Capacity)
                {
                    GiveInventory("Clip", 1);
                    GiveInventory("Shell", 2);
                };
            };

            // Shield Timer
            if (Player.Shield.Timer > 0)
            {
                if (Player.Shield.Accessory == SHIELD_ACC_LZY200)
                {
                    if (!IsPlayerMoving())
                        Player.Shield.Timer--;
                }
                else if (!CheckInventory("PowerTimeFreezer") && !CheckInventory("DRPGMenuFreezer"))
                    Player.Shield.Timer--;
            };
        };
        
        Delay(1);
    };
};

script void ShieldDamage(int Amount)
{
    switch (Player.Shield.Accessory)
    {
    // BST-700
    case SHIELD_ACC_BST700:
        if (Random(1, 4) == 1)
        {
            int TID = UniqueTID();
            fixed Angle = GetActorAngle(0);
            fixed X = GetActorX(0) + Cos(Angle) * 48.0;
            fixed Y = GetActorY(0) + Sin(Angle) * 48.0;
            fixed DirX = Cos(Angle);
            fixed DirY = Sin(Angle);
            fixed Z = GetActorZ(0);
            
            Spawn("DRPGShieldBooster", X, Y, Z, TID, Angle);
            SetActorVelocity(TID, DirX * RandomFixed(8.0, 16.0), DirY * RandomFixed(8.0, 16.0), RandomFixed(4.0, 8.0), false, false);
        };
        break;
    // SP-00K
    case SHIELD_ACC_SP00K:
        if (Random(1, 8) == 1)
        {
            GiveInventory("DRPGShieldGhost", 1);
            Player.Shield.Ghost = true;
            Player.Shield.GhostTimer = 35 * 5;
        };
        break;
    // E1N-T31
    case SHIELD_ACC_E1NT31:
        GiveInventory("DRPGShieldTimeFreezer", 1);
        UseInventory("DRPGShieldTimeFreezer");
        Player.Shield.TimeFreezerTimer = 35;
        Player.Shield.TimeFreezer = true;
        break;
    };
};

script void ShieldBroken()
{
    if (Player.Shield.Accessory == SHIELD_ACC_NOVA2 && Random(1, 4) == 1) // NOV-A2
        Nova("BFGBall", Random(4, 16));
};

script void ShieldTimerReset()
{
    Player.Shield.Timer = 35.0 * Player.Shield.DelayRate;
};

acscript void ToggleShield() net
{
    // If you're dead, terminate
    if (GetActorProperty(0, APROP_Health) <= 0) return;
    
    // If you have no Shield parts equipped or are missing a part, terminate
    if (Player.Shield.Body == 0 || Player.Shield.Battery == 0 || Player.Shield.Capacitor == 0)
    {
        ActivatorSound("menu/error", 127);
        return;
    };
    
    FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0.0, 0.25);
    
    if (!Player.Shield.Active && !Player.StatusType[SE_EMP])
    {
        GiveInventory("DRPGShieldOn", 1);
        ActivatorSound("shield/on", 127);
        Player.Shield.Timer = 35.0 * Player.Shield.DelayRate;
        Player.Shield.Active = true;
    }
    else
    {
        GiveInventory("DRPGShieldOff", 1);
        ActivatorSound("shield/off", 127);
        Player.Shield.Active = false;
        if (GetCVar("drpg_shield_reset"))
            Player.Shield.Charge = 0;
        GiveInventory("DRPGShieldReflectionOff", 1);
        GiveInventory("DRPGShieldGhostOff", 1);
    };
};

acscript void AddShield(int Amount)
{
    FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0, 0.25);
    Player.Shield.Charge += Amount;
};

function void CheckShields()
{
    ShieldPartPtr PartBodyPtr = &ShieldData[0][Player.Shield.Body - 1];
    ShieldPartPtr PartBatteryPtr = &ShieldData[1][Player.Shield.Battery - 1];
    ShieldPartPtr PartCapacitorPtr = &ShieldData[2][Player.Shield.Capacitor - 1];
    ShieldPartPtr PartAccessoryPtr = &ShieldData[3][Player.Shield.Accessory - 1];
    
    // Check to make sure the Shield has components
    if (Player.Shield.Active && (Player.Shield.Body == 0 || Player.Shield.Battery == 0 || Player.Shield.Capacitor == 0))
    {
        ActivatorSound("shield/off", 127);
        Player.Shield.Active = false;
        if (GetCVar("drpg_shield_reset"))
            Player.Shield.Charge = 0;
        GiveInventory("DRPGShieldOff", 1);
        GiveInventory("DRPGShieldReflectionOff", 1);
        GiveInventory("DRPGShieldGhostOff", 1);
        Player.Shield.Timer = 35 * Player.Shield.DelayRate;
    };
    
    // EP -> Shield Charging
    int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
    if (Player.Shield.Active && (!Player.InMenu && !Player.InShop) && Buttons & BT_SPEED && Buttons & BT_USE && Player.Shield.Charge < Player.Shield.Capacity)
    {
        if (Player.Shield.Accessory == SHIELD_ACC_CNVRT99 && CheckInventory("Cell") > 0)
        {
            FadeRange(0, 255, 255, 0.1, 0, 255, 255, 0.0, 0.5);
            ActivatorSound("regen/shield", 64);
            TakeInventory("Cell", 1);
            Player.Shield.Charge += 10;
        }
        else if (Player.EP > 0)
        {
            FadeRange(0, 255, 255, 0.1, 0, 255, 255, 0.0, 0.5);
            ActivatorSound("regen/shield", 64);
            Player.EP--;
            Player.Shield.Charge++;
        };
    };
    
    // If a part is sold/dropped/nuked from orbit/etc, unequip it
    if (!CheckInventory(PartBodyPtr->Actor))       Player.Shield.Body = 0;
    if (!CheckInventory(PartBatteryPtr->Actor))    Player.Shield.Battery = 0;
    if (!CheckInventory(PartCapacitorPtr->Actor))  Player.Shield.Capacitor = 0;
    if (!CheckInventory(PartAccessoryPtr->Actor))  Player.Shield.Accessory = 0;
    
    // Apply Components stats to Shield
    Player.Shield.Capacity = PartBodyPtr->Capacity + PartBatteryPtr->Capacity + PartCapacitorPtr->Capacity;
    Player.Shield.ChargeRate = PartBodyPtr->ChargeRate + PartBatteryPtr->ChargeRate + PartCapacitorPtr->ChargeRate;
    Player.Shield.DelayRate = 5.0 + PartBodyPtr->DelayRate + PartBatteryPtr->DelayRate + PartCapacitorPtr->DelayRate;
    Player.Shield.Interval = 35;
    
    // Aug Handling
    if (Player.Augs.Active[AUG_REGENERATION])
    {
        if (Player.Augs.Level[AUG_REGENERATION] >= 3)
            Player.Shield.ChargeRate *= 2;
        if (Player.Augs.Level[AUG_REGENERATION] >= 4)
            Player.Shield.DelayRate /= 2.0;
        if (Player.Augs.Level[AUG_REGENERATION] >= 5)
            Player.Shield.Interval /= 2;
    };
    
    // Accessory Powerups Token handling
    SetInventory("DRPGShieldLightAmpToken", Player.Shield.LightAmp);
    SetInventory("DRPGShieldInvisibilityToken", Player.Shield.Invisibility);
    SetInventory("DRPGShieldTimeFreezerToken", Player.Shield.TimeFreezer);
};

function void CheckShieldAccessory()
{
    // X-2
    if (Player.Shield.Accessory == SHIELD_ACC_X7 && Player.Shield.Active)
        if (CheckWeapon("Fist") || CheckWeapon("Knuckle") || CheckWeapon("RLFistRedux"))
            Player.TotalDamage *= 2;
    
    // SGENX-5b
    if (Player.Shield.Accessory == SHIELD_ACC_SGENX5B && Player.Shield.Active && Player.Shield.Charge && Player.ActualHealth < Player.HealthMax)
        if ((Timer() % (35 / 2)) == 0)
            Player.ActualHealth++;
    
    // AMP-3000
    if (Player.Shield.Accessory == SHIELD_ACC_AMP3000 && Player.Shield.Active)
        if (Player.Shield.Charge >= Player.Shield.Capacity)
        {
            int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
            
            if (Buttons & BT_ATTACK && !Player.InMenu && !Player.InShop && !Player.OutpostMenu)
            {
                ActivatorSound("shield/amp", 127);
                FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0.0, 0.5);
                Player.Shield.Charge /= 2;
            };
            
            Player.TotalDamage *= 2;
        };
    
    // HRY-VP80
    if (Player.Shield.Accessory == SHIELD_ACC_HRYVP80)
    {
        Player.Shield.Capacity /= 2;
        Player.Shield.DelayRate /= 2;
    };
    
    // DEF-2
    if (Player.Shield.Accessory == SHIELD_ACC_DEF2)
    {
        Player.Shield.Capacity *= 2;
        Player.Shield.DelayRate *= 2;
    };
    
    // B1-ZUT3
    if (Player.Shield.Accessory == SHIELD_ACC_B1ZUT3)
    {
        Player.Shield.ChargeRate *= 2;
        Player.Shield.Capacity /= 2;
    };
    
    // REK-T50
    if (Player.Shield.Accessory == SHIELD_ACC_REKT50 && Player.Shield.Active)
        Player.DamageFactor *= 2;
    
    // CU-256
    if (Player.Shield.Accessory == SHIELD_ACC_CU256 && Player.Shield.Active)
        if (Player.Shield.Charge >= Player.Shield.Capacity)
        {
            SetInventory("DRPGShieldLightAmp", 1);
            UseInventory("DRPGShieldLightAmp");
            Player.Shield.LightAmp = true;
        };
    if ((!Player.Shield.Active || Player.Shield.Accessory != SHIELD_ACC_CU256 || Player.Shield.Charge < Player.Shield.Capacity) && Player.Shield.LightAmp)
    {
        TakeInventory("PowerLightAmp", 1);
        Player.Shield.LightAmp = false;
    };
    
    // WRP30-LITE
    if (Player.Shield.Accessory == SHIELD_ACC_WRP30LITE && Player.Shield.Active)
        if (Player.Shield.Charge >= Player.Shield.Capacity)
        {
            SetInventory("DRPGShieldInvisibility", 1);
            UseInventory("DRPGShieldInvisibility");
            Player.Shield.Invisibility = true;
        };
    if ((!Player.Shield.Active || Player.Shield.Accessory != SHIELD_ACC_WRP30LITE || Player.Shield.Charge < Player.Shield.Capacity) && Player.Shield.Invisibility)
    {
        TakeInventory("PowerInvisibility", 1);
        Player.Shield.Invisibility = false;
    };
    
    // LZ-Y200
    if (Player.Shield.Accessory == SHIELD_ACC_LZY200)
        Player.Shield.ChargeRate *= 2;
    
    // MM-12
    if (Player.Shield.Accessory == SHIELD_ACC_MM12 && Player.Shield.Active)
        Player.Shield.ChargeRate = (fixed)Player.Shield.ChargeRate * (1.0 + ((fixed)Player.Shield.Charge / (fixed)Player.Shield.Capacity) * 3.0);
    
    // MRTE-KRAR
    if (Player.Shield.Accessory == SHIELD_ACC_MRTEKRAR)
    {
        Player.Shield.Capacity /= 2;
        Player.TotalDamage = Player.TotalDamage * 1.5;
    };
    
    // RR-G0
    if (Player.Shield.Accessory == SHIELD_ACC_RRG0)
    {
        Player.Shield.ChargeRate += Timer() / (35 * 60);
        Player.Shield.DelayRate = Player.Shield.DelayRate - ((Timer() / (35 * 60)) * 0.1);
    };
    
    // SP-00k
    if (Player.Shield.Accessory == SHIELD_ACC_SP00K && Player.Shield.Active)
    {
        // Remove when time is up
        if (Player.Shield.GhostTimer <= 0)
        {
            GiveInventory("DRPGShieldGhostOff", 1);
            Player.Shield.Ghost = false;
        };
        
        // Decrease the ghost timer
        if (Player.Shield.Ghost)
            Player.Shield.GhostTimer--;
    };
    
    // E1N-T31 - Remove when timer ends
    if (Player.Shield.TimeFreezerTimer <= 0 && Player.Shield.TimeFreezer)
    {
        TakeInventory("PowerTimeFreezer", 1);
        Player.Shield.TimeFreezer = false;
    };
    
    // E1N-T31 - Decrease Time Freeze timer
    if (Player.Shield.TimeFreezerTimer > 0)
        Player.Shield.TimeFreezerTimer--;
    
    // PATR-0T
    if (Player.Shield.Accessory == SHIELD_ACC_PATR0T)
        Player.Shield.Capacity = Player.Shield.Capacity * (1 + (Player.RankLevel * 0.125));
    
    // RNJSUS-2
    if (Player.Shield.Accessory == SHIELD_ACC_RNJSUS2 && Player.Shield.Active)
    {
        int Luck = 50 - (Player.Luck / 2);
        
        Player.HealthChance += Luck * 0.025;
        Player.EPChance += Luck * 0.025;
        Player.ArmorChance += Luck * 0.025;
        Player.PowerupChance += Luck * 0.0125;
        Player.WeaponChance += Luck * 0.0125;
        Player.TokenChance += Luck * 0.01;
        Player.AugChance += Luck * 0.0025;
        Player.ShieldChance += Luck * 0.005;
        Player.StimChance += Luck * 0.0125;
    };
    
    // SCL-AR53
    if (Player.Shield.Accessory == SHIELD_ACC_SCLAR53)
    {
        Player.Shield.Capacity = Player.Shield.Capacity * (1.0 + (Player.Capacity * 0.005)) + 1;
        Player.Shield.ChargeRate += (Player.Energy / 10);
        Player.Shield.DelayRate = Player.Shield.DelayRate - ((fixed)Player.Regeneration / 50.0);
    };
    
    // RF-CT
    if (Player.Shield.Accessory == SHIELD_ACC_RFCT && Player.Shield.Active)
        GiveInventory("DRPGShieldReflection", 1);
};

function void DrawShieldModel(int ID, int X, int Y)
{
    PlayerData *CurrentPlayer = (ID == -1 ? &Player : &_PlayerData[ID]);
    ShieldPartPtr PartBodyPtr = &ShieldData[0][CurrentPlayer->Shield.Body - 1];
    ShieldPartPtr PartBatteryPtr = &ShieldData[1][CurrentPlayer->Shield.Battery - 1];
    ShieldPartPtr PartCapacitorPtr = &ShieldData[2][CurrentPlayer->Shield.Capacitor - 1];
    ShieldPartPtr PartAccessoryPtr = &ShieldData[3][CurrentPlayer->Shield.Accessory - 1];
    
    // Body
    if (CurrentPlayer->Shield.Capacitor > 0)
        PrintSprite(PartCapacitorPtr->Icon,     0, X + 0.1, Y + 0.1, 0.05);
    
    // Battery
    if (CurrentPlayer->Shield.Battery > 0)
        PrintSprite(PartBatteryPtr->Icon,       0, X + 0.1, Y + 0.1, 0.05);
    
    // Capacitor
    if (CurrentPlayer->Shield.Body > 0)
        PrintSprite(PartBodyPtr->Icon,          0, X + 0.1, Y + 0.1, 0.05);
    
    // Accessory
    if (CurrentPlayer->Shield.Accessory > 0)
        PrintSprite(PartAccessoryPtr->Icon,     0, X + 0.1, Y + 0.1, 0.05);
};
