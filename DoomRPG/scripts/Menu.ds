#include "RPG.dh"

#include "Augs.dh"
#include "Map.dh"
#include "Menu.dh"
#include "Minigame.dh"
#include "Mission.dh"
#include "Shield.dh"
#include "Shop.dh"
#include "Skills.dh"
#include "Stats.dh"
#include "Stims.dh"
#include "Utils.dh"

str[MAX_MENU] MainMenu =
{
    "Stats"; "Augmentations"; "Skills"; "Shield"; "Stims"; "Shop";
};

int[MAX_MENU] MainMenuColor =
{
    CR_RED; CR_GREEN; CR_LIGHTBLUE; CR_CYAN; CR_GRAY; CR_GOLD;
};

int[6] CursorColors =
{
    CR_BLUE; CR_LIGHTBLUE; CR_CYAN; CR_WHITE; CR_CYAN; CR_LIGHTBLUE;
};

int MenuCursorColor;

acscript void OpenMenu() net
{
    // If you're dead, terminate
    if (GetActorProperty(0, APROP_Health) <= 0) return;
    
    // If you're in an Outpost menu, return
    if (Player.OutpostMenu > 0 && Player.OutpostMenu != OMENU_LOCKER) return;
    
    // If you're in any minigames, terminate
    if (Player.InMinigame) return;
    
    if (Player.OutpostMenu == OMENU_LOCKER) // Locker
    {
        Player.OutpostMenu = 0;
        SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
        ActivatorSound("menu/move", 127);
        return;
    };
    
    if (Player.InShop && InBase)
    {
        ActivatorSound("menu/leave", 127);
        SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
        Player.InMenu = false;
        Player.InShop = false;
        return;
    }
    else if (Player.InShop)
        Player.InShop = false;
    
    if (Player.InMenu)
    {
        if (Player.Menu > 0) 
        {
            Player.Menu = MENUPAGE_MAIN;
            Player.MenuIndex = 0;
            ClearToxicityMeter();
            return;
        }
        else
        {
            ActivatorSound("menu/leave", 127);
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            Player.InMenu = false;
            Player.MenuIndex = 0;
            Player.Menu = MENUPAGE_MAIN;
            ClearToxicityMeter();
        };
    }
    else
    {
        ActivatorSound("menu/enter", 127);
        Player.InMenu = true;
        Player.Menu = MENUPAGE_MAIN;
    };
};

function void MenuLoop()
{
    // Freeze the Player
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
    
    // Set the HUD Size
    SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);
    
    // Draw current menu
    if (Player.Menu == MENUPAGE_MAIN)   DrawMainMenu();
    if (Player.Menu == MENUPAGE_STATS)  DrawStatsMenu();
    if (Player.Menu == MENUPAGE_AUGS)   DrawAugsMenu();
    if (Player.Menu == MENUPAGE_SKILLS) DrawSkillMenu();
    if (Player.Menu == MENUPAGE_SHIELD) DrawShieldMenu();
    if (Player.Menu == MENUPAGE_STIMS)  DrawStimsMenu();
    
    // Handle menu input
    MenuInput();
};

function void DrawMainMenu()
{
    fixed X = 0.0;
    fixed Y = 10.0;
    int LevelNumber = GetLevelInfo(LEVELINFO_LEVELNUM);
    int CurrentKills = GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
    int CurrentItems = GetLevelInfo(LEVELINFO_FOUND_ITEMS);
    int CurrentSecretsFound = GetLevelInfo(LEVELINFO_FOUND_SECRETS);
    int TotalKills = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS);
    int TotalItems = GetLevelInfo(LEVELINFO_TOTAL_ITEMS);
    int TotalSecretsFound = GetLevelInfo(LEVELINFO_TOTAL_SECRETS);
    int StatTokens = CheckInventory("DRPGStatToken");
    int StatCapTokens = CheckInventory("DRPGStatCapToken");
    int SkillTokens = CheckInventory("DRPGSkillToken");
    int AugCanisters = CheckInventory("DRPGAugCanister");
    int AugUpgradeCanisters = CheckInventory("DRPGAugUpgradeCanister");
    int SmallStims = CheckInventory("DRPGStimSmall");
    int MediumStims = CheckInventory("DRPGStimMedium");
    int LargeStims = CheckInventory("DRPGStimLarge");
    int XLStims = CheckInventory("DRPGStimXL");
    
    SetFont("BIGFONT");
    
    // Draw Menu
    for (int i = 0; i < MAX_MENU; i++)
    {
        // Shop menu check
        if (i == 5 && !GetCVar("drpg_shoptype")) continue;
        
        // Items
        HudMessage("%s\n", MainMenu[i],     HUDMSG_PLAIN, MENU_ID + i, MainMenuColor[i],    0.1, Y, 0.05);
        
        // Highlighted Item
        if (i == Player.MenuIndex)
            HudMessage("%s\n", MainMenu[i], HUDMSG_PLAIN, MENU_ID + i, MenuCursorColor,     0.1, Y, 0.05);
        
        Y += 15.0;
    };
    
    // Player Icon
    DrawPlayerSprite(PlayerNumber(), 16.1, 148.1);

    // XP/Rank Display
    SetFont("BIGFONT");
    HudMessage("Level: %d\n", Player.Level,                                             HUDMSG_PLAIN, 0, CR_WHITE,          40.1, 100.0, 0.05);
    HudMessage("XP: %lu / %lu\n", Player.XP, Player.XPNext,                             HUDMSG_PLAIN, 0, CR_WHITE,          40.1, 112.0, 0.05);
    HudMessage("Title: %s (%d/%d)\n", Ranks[Player.RankLevel], Player.RankLevel, 24,    HUDMSG_PLAIN, 0, CR_YELLOW,         40.1, 124.0, 0.05);
    HudMessage("Rank: %lu / %lu\n", Player.Rank, Player.RankNext,                       HUDMSG_PLAIN, 0, CR_YELLOW,         40.1, 136.0, 0.05);
    if (Player.RankLevel > 0)
        HudMessage("Payout: %d C (%s) [%d%%]\n",
                   CalculatePay(), FormatTime(Player.PayTimer), Player.PayBonus,
                   HUDMSG_PLAIN, 0, CR_YELLOW, 40.1, 142.1, 0.05);
    
    // Quick Reference
    PrintSprite("TOKEN1", 0, 16.1, 188.1, 0.05);
    PrintSprite("TOKEN2", 0, 16.1, 208.1, 0.05);
    PrintSprite("TOKEN3", 0, 16.1, 228.1, 0.05);
    PrintSprite("AUGCA0", 0, 16.1, 252.1, 0.05);
    PrintSprite("AUGUA0", 0, 16.1, 264.1, 0.05);
    PrintSprite("AUGUB0", 0, 16.1, 284.1, 0.05);
    PrintSprite("AUGBATT", 0, 16.1, 296.1, 0.05);
    PrintSprite("STIMB0", 0, 16.1, 345.1, 0.05);
    SetFont("BIGFONT");
    HudMessage("%d\n", StatTokens,                                                              HUDMSG_PLAIN, 0, CR_RED,            40.1, 178.0, 0.05);
    HudMessage("%d / %d\n", StatCapTokens, 100,                                                 HUDMSG_PLAIN, 0, CR_YELLOW,         40.1, 198.0, 0.05);
    HudMessage("%d\n", SkillTokens,                                                             HUDMSG_PLAIN, 0, CR_DARKGREEN,      40.1, 218.0, 0.05);
    HudMessage("%d\n", AugCanisters,                                                            HUDMSG_PLAIN, 0, CR_GREEN,          40.1, 240.0, 0.05);
    HudMessage("%d\n", AugUpgradeCanisters,                                                     HUDMSG_PLAIN, 0, CR_GREEN,          40.1, 257.0, 0.05);
    HudMessage("%d / %d\n", Player.Augs.SlotsUsed, Player.Augs.Slots,                           HUDMSG_PLAIN, 0, CR_GREEN,          40.1, 274.0, 0.05);
    HudMessage("%d%%\n", Player.Augs.Battery,                                                   HUDMSG_PLAIN, 0, CR_YELLOW,         40.1, 295.0, 0.05);
    HudMessage("S: %d\nM: %d\nL: %d\nXL: %d\n", SmallStims, MediumStims, LargeStims, XLStims,   HUDMSG_PLAIN, 0, CR_WHITE,          40.1, 334.0, 0.05);
    
    // Level Stats
    if (CurrentLevel && CurrentLevel->KillBonus)
        HudMessage("Monsters: %d / %d\n", CurrentKills, TotalKills,                             HUDMSG_PLAIN, 0, MenuCursorColor,   140.1, 178.0, 0.05)
    else
        HudMessage("Monsters: %d / %d\n", CurrentKills, TotalKills,                             HUDMSG_PLAIN, 0, CR_BRICK,          140.1, 178.0, 0.05);
    if (CurrentLevel && CurrentLevel->ItemsBonus)
        HudMessage("Items: %d / %d\n", CurrentItems, TotalItems,                                HUDMSG_PLAIN, 0, MenuCursorColor,   140.1, 193.0, 0.05)
    else
        HudMessage("Items: %d / %d\n", CurrentItems, TotalItems,                                HUDMSG_PLAIN, 0, CR_LIGHTBLUE,      140.1, 193.0, 0.05);
    if (CurrentLevel && CurrentLevel->SecretsBonus)
        HudMessage("Secrets: %d / %d\n", CurrentSecretsFound, TotalSecretsFound,                HUDMSG_PLAIN, 0, MenuCursorColor,   140.1, 207.0, 0.05)
    else
        HudMessage("Secrets: %d / %d\n", CurrentSecretsFound, TotalSecretsFound,                HUDMSG_PLAIN, 0, CR_GOLD,           140.1, 207.0, 0.05);
    
    // Shield
    if (Player.Shield.Body != 0 || Player.Shield.Battery != 0 || Player.Shield.Capacitor != 0)
    {
        SetFont("SMALLFONT");
        
        // Epic Shield Name
        str ShieldName = "";
        if (Player.Shield.Capacitor)        ShieldName = StrParam("%s %s\n", ShieldName, Player.Shield.Capacitor->Name);
        if (Player.Shield.Battery)          ShieldName = StrParam("%s \c-%s\n", ShieldName, Player.Shield.Battery->Name);
        if (Player.Shield.Body)             ShieldName = StrParam("%s \c-%s\n", ShieldName, Player.Shield.Body->Name);
        if (Player.Shield.Accessory)        ShieldName = StrParam("%s \c-%s\n", ShieldName, Player.Shield.Accessory->Name);
        ShieldName = StrParam("%s\c- Shield\n", ShieldName);
        HudMessage("%s\n", ShieldName, HUDMSG_PLAIN, 0, CR_WHITE, 173.1, 226.1, 0.05);
        
        // Shield Stats
        HudMessage("\cvCapacity: %d / %d\n", Player.Shield.Charge, Player.Shield.Capacity,  HUDMSG_PLAIN, 0, CR_WHITE,          176.1, 238.0, 0.05);
        if (Player.Shield.Accessory && Player.Shield.Accessory->PassiveEffect == SHIELD_PASS_KILLSCHARGE)
        {
            HudMessage("\cgDoes not recharge automatically\n",                                  HUDMSG_PLAIN, 0, CR_WHITE,          176.1, 246.0, 0.05);
        }
        else
        {
            HudMessage("\cdCharge: %d\n", Player.Shield.ChargeRate,                             HUDMSG_PLAIN, 0, CR_WHITE,          176.1, 246.0, 0.05);
            HudMessage("\caDelay: %k\n", Player.Shield.DelayRate,                               HUDMSG_PLAIN, 0, CR_WHITE,          176.1, 254.0, 0.05);
        };
        
        // Draw Shield Model
        DrawShieldModel(-1, 158, 258);
    };
    
    // Current Stim
    if (Player.Stim.Size > 0)
    {
        SetFont("BIGFONT");
        
        // Draw Stim selection
        if (Player.Stim.Size == 1)
            HudMessage("Small Stim: %d/%d\n", Player.Stim.Amount, Player.Stim.Capacity, HUDMSG_PLAIN, 0, CR_GREEN, 176.1, 290.0, 0.05)
        else if (Player.Stim.Size == 2)
            HudMessage("Medium Stim: %d/%d\n", Player.Stim.Amount, Player.Stim.Capacity, HUDMSG_PLAIN, 0, CR_GREEN, 176.1, 290.0, 0.05)
        else if (Player.Stim.Size == 3)
            HudMessage("Large Stim: %d/%d\n", Player.Stim.Amount, Player.Stim.Capacity, HUDMSG_PLAIN, 0, CR_GREEN, 176.1, 290.0, 0.05)
        else if (Player.Stim.Size == 4)
            HudMessage("Extra-Large Stim: %d/%d\n", Player.Stim.Amount, Player.Stim.Capacity, HUDMSG_PLAIN, 0, CR_GREEN, 176.1, 290.0, 0.05);

        // Stim Compound Bar
        if (Player.Stim.Size > 0)
            for (int i = 0; i < MAX_COMPOUNDS; i++)
                if (Player.Stim.Current[i] > 0)
                {
                    DrawBar(StrParam("Stim%d\n", i + 1), 177 + X, 300, Player.Stim.Current[i], true);
                    X += Player.Stim.Current[i];
                };
    };
    
    // Toxicity
    if (Player.Toxicity > 0 || Player.Stim.Size > 0)
        DrawToxicityBar(176, 320);
    
    // Mission Information
    DrawMissionInfo();
};

function void DrawStatsMenu()
{
    // Title
    SetFont("BIGFONT");
    if (Player.StatPage == STATPAGE_STATS)
        HudMessage("Stats\n", HUDMSG_PLAIN, 0, CR_GREEN, 0.1, 10.0, 0.05);
    if (Player.StatPage == STATPAGE_PERKS)
        HudMessage("Perks\n", HUDMSG_PLAIN, 0, CR_GREEN, 0.1, 10.0, 0.05);
    if (Player.StatPage == STATPAGE_TEAM)
        HudMessage("Team\n", HUDMSG_PLAIN, 0, CR_GREEN, 0.1, 10.0, 0.05);
    
    // Stats Page
    if (Player.StatPage == STATPAGE_STATS)
    {
        // Stat Tokens
        if (GetCVar("drpg_randomstatgrowth") < 2)
        {
            PrintSprite("TOKEN1", 0, 16.1, 260.1, 0.05);
            SetFont("BIGFONT");
            HudMessage("%d\n", CheckInventory("DRPGStatToken"), HUDMSG_PLAIN, 0, CR_RED, 32.1, 244.1, 0.05);
        };
        
        // Stat Cap Tokens
        PrintSprite("TOKEN2", 0, 16.1, 280.1, 0.05);
        SetFont("BIGFONT");
        HudMessage("%d / %d\n", CheckInventory("DRPGStatCapToken"), 100, HUDMSG_PLAIN, 0, CR_YELLOW, 32.1, 264.1, 0.05);
        
        // Primary Stats
        SetFont("BIGFONT");
        HudMessage("Strength: %d\n", Player.Strength,       HUDMSG_PLAIN, MENU_ID, CR_RED,              0.1,    25.0,   0.05);
        HudMessage("Defense: %d\n", Player.Defense,         HUDMSG_PLAIN, MENU_ID + 1, CR_GREEN,        200.1,  25.0,   0.05);
        HudMessage("Vitality: %d\n", Player.Vitality,       HUDMSG_PLAIN, MENU_ID + 2, CR_BRICK,        0.1,    75.0,   0.05);
        HudMessage("Energy: %d\n", Player.Energy,           HUDMSG_PLAIN, MENU_ID + 3, CR_LIGHTBLUE,    200.1,  75.0,   0.05);
        HudMessage("Regen: %d\n", Player.Regeneration,      HUDMSG_PLAIN, MENU_ID + 4, CR_PURPLE,       0.1,    125.0,  0.05);
        HudMessage("Agility: %d\n", Player.Agility,         HUDMSG_PLAIN, MENU_ID + 5, CR_ORANGE,       200.1,  125.0,  0.05);
        HudMessage("Capacity: %d\n", Player.Capacity,       HUDMSG_PLAIN, MENU_ID + 6, CR_BLUE,         0.1,    175.0,  0.05);
        HudMessage("Luck: %d\n", Player.Luck,               HUDMSG_PLAIN, MENU_ID + 7, CR_GOLD,         200.1,  175.0,  0.05);
        
        // Ammo Amounts
        int Bullets = CheckInventory("Clip");
        int MaxBullets = GetAmmoCapacity("Clip");
        int Shells = CheckInventory("Shell");
        int MaxShells = GetAmmoCapacity("Shell");
        int Rockets = CheckInventory("RocketAmmo");
        int MaxRockets = GetAmmoCapacity("RocketAmmo");
        int Cells = CheckInventory("Cell");
        int MaxCells = GetAmmoCapacity("Cell");
        
        // Brutal Doom Compatibility
        if (GetCVar("drpg_ext_brutal"))
        {
            Bullets = CheckInventory("NewClip");
            MaxBullets = GetAmmoCapacity("NewClip");
            Shells = CheckInventory("NewShell");
            MaxShells = GetAmmoCapacity("NewShell");
            Rockets = CheckInventory("NewRocket");
            MaxRockets = GetAmmoCapacity("NewRocket");
            Cells = CheckInventory("NewCell");
            MaxCells = GetAmmoCapacity("NewCell");
        };
        
        // Secondary Stats
        SetFont("SMALLFONT");
        HudMessage("+%d%% Base Damage\n", Player.Level * (10 - GameSkill()),                                HUDMSG_PLAIN, 0, CR_RED,                30.1,   36.0,   0.05);
        HudMessage("+%d%% Bonus Damage\n", Player.BonusDamage,                                              HUDMSG_PLAIN, 0, CR_RED,                30.1,   44.0,   0.05);
        HudMessage("+%d%% Total Damage\n", Player.TotalDamage,                                              HUDMSG_PLAIN, 0, CR_RED,                30.1,   52.0,   0.05);
        HudMessage("%k%% Damage Reduction\n", (1.0 - Player.DamageFactor) * 100,                            HUDMSG_PLAIN, 0, CR_GREEN,              230.1,  36.0,   0.05);
        HudMessage("%d Mass\n", Player.Mass,                                                                HUDMSG_PLAIN, 0, CR_GREEN,              230.1,  44.0,   0.05);
        HudMessage("%d Max HP\n", Player.HealthMax,                                                         HUDMSG_PLAIN, 0, CR_BRICK,              30.1,   86.0,   0.05);
        HudMessage("%d HP Regen\n", Player.HPAmount,                                                        HUDMSG_PLAIN, 0, CR_BRICK,              30.1,   94.0,   0.05);
        HudMessage("%k%% Status Resist\n", Player.StatusEffectResist,                                       HUDMSG_PLAIN, 0, CR_BRICK,              30.1,   102.0,  0.05);
        HudMessage("%d Max EP\n", Player.EPMax,                                                             HUDMSG_PLAIN, 0, CR_LIGHTBLUE,          230.1,  86.0,   0.05);
        HudMessage("%d EP Regen\n", Player.EPAmount,                                                        HUDMSG_PLAIN, 0, CR_LIGHTBLUE,          230.1,  94.0,   0.05);
        HudMessage("%d Sec Aura Time\n", ((1050 + (Player.Energy * 5.25)) * (Player.AuraBonus + 1)) / 35,   HUDMSG_PLAIN, 0, CR_LIGHTBLUE,          230.1,  102.0,  0.05);
        HudMessage("%d Aura Range\n", Player.AuraRange,                                                     HUDMSG_PLAIN, 0, CR_LIGHTBLUE,          230.1,  110.0,  0.05);
        HudMessage("HP Timer: %k Sec\n", (fixed)Player.HPTime / (35.0 * 2.0),                               HUDMSG_PLAIN, 0, CR_BRICK,              30.1,   136.0,  0.05);
        HudMessage("EP Timer: %k Sec\n", (fixed)Player.EPTime / (35.0 * 2.0),                               HUDMSG_PLAIN, 0, CR_LIGHTBLUE,          30.1,   144.0,  0.05);
        HudMessage("Regen Bonus: %d Sec\n", 5.0 + ((fixed)Player.Regeneration / 13.33),                     HUDMSG_PLAIN, 0, CR_PURPLE,             30.1,   152.0,  0.05);
        HudMessage("Toxicity Regen: %d Sec\n", 30 - Player.ToxicityRegenBonus,                              HUDMSG_PLAIN, 0, CR_GREEN,              30.1,   160.0,  0.05);
        HudMessage("Speed: %k\n", Player.Speed,                                                             HUDMSG_PLAIN, 0, CR_ORANGE,             230.1,  136.0,  0.05);
        HudMessage("Jump Height: %k\n", Player.JumpHeight,                                                  HUDMSG_PLAIN, 0, CR_ORANGE,             230.1,  144.0,  0.05);
        HudMessage("%d%% Weapon Speed\n", Player.WeaponSpeed,                                               HUDMSG_PLAIN, 0, CR_ORANGE,             230.1,  152.0,  0.05);
        HudMessage("%k%% Survival Bonus\n", Player.SurvivalBonus,                                           HUDMSG_PLAIN, 0, CR_ORANGE,             230.1,  160.0,  0.05);
        HudMessage("Bullets: %d/%d\n", Bullets, MaxBullets,                                                 HUDMSG_PLAIN, 0, CR_BRICK,              30.1,   186.0,  0.05);
        HudMessage("Shells: %d/%d\n", Shells, MaxShells,                                                    HUDMSG_PLAIN, 0, CR_ORANGE,             30.1,   194.0,  0.05);
        HudMessage("Rockets: %d/%d\n", Rockets, MaxRockets,                                                 HUDMSG_PLAIN, 0, CR_DARKGREY,           30.1,   202.0,  0.05);
        HudMessage("Cells: %d/%d\n", Cells, MaxCells,                                                       HUDMSG_PLAIN, 0, CR_GREEN,              30.1,   210.0,  0.05);
        HudMessage("Stim Vial Max: %d\n", Player.Stim.VialMax,                                              HUDMSG_PLAIN, 0, CR_CYAN,               30.1,   218.0,  0.05);
        if (GetCVar("drpg_inv_capacity"))
            HudMessage("Inventory: %d/%d\n", Player.InvItems, CheckInventoryMax(),                          HUDMSG_PLAIN, 0, CR_WHITE,              30.1,   226.0,  0.05);
        HudMessage("%k%% Health Drop Chance\n", Player.HealthChance,                                        HUDMSG_PLAIN, 0, CR_GOLD,               230.1,  186.0,  0.05);
        HudMessage("%k%% EP Capsule Drop Chance\n", Player.EPChance,                                        HUDMSG_PLAIN, 0, CR_GOLD,               230.1,  194.0,  0.05);
        HudMessage("%k%% Armor Drop Chance\n", Player.ArmorChance,                                          HUDMSG_PLAIN, 0, CR_GOLD,               230.1,  202.0,  0.05);
        HudMessage("%k%% Powerup Drop Chance\n", Player.PowerupChance,                                      HUDMSG_PLAIN, 0, CR_GOLD,               230.1,  210.0,  0.05);
        HudMessage("%k%% Weapon Drop Chance\n", Player.WeaponChance,                                        HUDMSG_PLAIN, 0, CR_GOLD,               230.1,  218.0,  0.05);
        HudMessage("%k%% Token Drop Chance\n", Player.TokenChance,                                          HUDMSG_PLAIN, 0, CR_GOLD,               230.1,  226.0,  0.05);
        HudMessage("%k%% Aug Drop Chance\n", Player.AugChance,                                              HUDMSG_PLAIN, 0, CR_GOLD,               230.1,  234.0,  0.05);
        HudMessage("%k%% Shield Part Drop Chance\n", Player.ShieldChance,                                   HUDMSG_PLAIN, 0, CR_GOLD,               230.1,  242.0,  0.05);
        HudMessage("%k%% Stim Drop Chance\n", Player.StimChance,                                            HUDMSG_PLAIN, 0, CR_GOLD,               230.1,  250.0,  0.05);
        
        // Stat Upgrade Cursor
        if (CheckInventory("DRPGStatToken") > 0)
        {
            SetFont("BIGFONT");
            if (Player.MenuIndex == 0)  HudMessage("Strength: %d\n", Player.Strength,                       HUDMSG_PLAIN, MENU_ID, MenuCursorColor,             0.1,    25.0,   0.05);
            if (Player.MenuIndex == 1)  HudMessage("Defense: %d\n", Player.Defense,                         HUDMSG_PLAIN, MENU_ID + 1, MenuCursorColor,         200.1,  25.0,   0.05);
            if (Player.MenuIndex == 2)  HudMessage("Vitality: %d\n", Player.Vitality,                       HUDMSG_PLAIN, MENU_ID + 2, MenuCursorColor,         0.1,    75.0,   0.05);
            if (Player.MenuIndex == 3)  HudMessage("Energy: %d\n", Player.Energy,                           HUDMSG_PLAIN, MENU_ID + 3, MenuCursorColor,         200.1,  75.0,   0.05);
            if (Player.MenuIndex == 4)  HudMessage("Regen: %d\n", Player.Regeneration,                      HUDMSG_PLAIN, MENU_ID + 4, MenuCursorColor,         0.1,    125.0,  0.05);
            if (Player.MenuIndex == 5)  HudMessage("Agility: %d\n", Player.Agility,                         HUDMSG_PLAIN, MENU_ID + 5, MenuCursorColor,         200.1,  125.0,  0.05);
            if (Player.MenuIndex == 6)  HudMessage("Capacity: %d\n", Player.Capacity,                       HUDMSG_PLAIN, MENU_ID + 6, MenuCursorColor,         0.1,    175.0,  0.05);
            if (Player.MenuIndex == 7)  HudMessage("Luck: %d\n", Player.Luck,                               HUDMSG_PLAIN, MENU_ID + 7, MenuCursorColor,         200.1,  175.0,  0.05);
        };

        // Perk Icons
        if (Player.Perks[STAT_STRENGTH]) PrintSprite("STATP", 0, 16.1 + 8.0, 56.1, 0.05);
        if (Player.Perks[STAT_DEFENSE]) PrintSprite("STATP", 0, 214.1 + 8.0, 48.1, 0.05);
        if (Player.Perks[STAT_VITALITY]) PrintSprite("STATP", 0, 16.1 + 8.0, 104.1, 0.05);
        if (Player.Perks[STAT_ENERGY]) PrintSprite("STATP", 0, 214.1 + 8.0, 106.1, 0.05);
        if (Player.Perks[STAT_REGENERATION]) PrintSprite("STATP", 0, 16.1 + 8.0, 157.1, 0.05);
        if (Player.Perks[STAT_AGILITY]) PrintSprite("STATP", 0, 214.1 + 8.0, 160.1, 0.05);
        if (Player.Perks[STAT_CAPACITY]) PrintSprite("STATP", 0, 16.1 + 8.0, 202.1, 0.05);
        if (Player.Perks[STAT_LUCK]) PrintSprite("STATP", 0, 216.1 + 8.0, 202.1, 0.05);
        
        // Icons
        PrintSprite("STAT1", 0, 16.1, 56.1, 0.05);
        PrintSprite("STAT2", 0, 214.1, 48.1, 0.05);
        PrintSprite("STAT3", 0, 16.1, 104.1, 0.05);
        PrintSprite("STAT4", 0, 214.1, 106.1, 0.05);
        PrintSprite("STAT5", 0, 16.1, 157.1, 0.05);
        PrintSprite("STAT6", 0, 214.1, 160.1, 0.05);
        PrintSprite("STAT7", 0, 16.1, 202.1, 0.05);
        PrintSprite("STAT8", 0, 216.1, 202.1, 0.05);
    };
    
    // Perks Page
    if (Player.StatPage == STATPAGE_PERKS)
    {
        int[STAT_MAX] PerkColors =
        {
            CR_RED;         // Strength
            CR_GREEN;       // Defense
            CR_BRICK;       // Vitality
            CR_LIGHTBLUE;   // Energy
            CR_PURPLE;      // Regeneration
            CR_ORANGE;      // Agility
            CR_BLUE;        // Capacity
            CR_GOLD;        // Luck
        };
        
        // Holds the perk information
        str[STAT_MAX][] PerkInfo = 
        {
            // Strength
            {
                "Damage exponentially increases as health lowers";
                "";
            };
            
            // Defense
            {
                "Damage taken exponentially decreases as health lowers";
                "";
            };
            
            // Vitality
            {
                "No Movement Penalties";
                "2x HP regeneration rate below 10% health";
                "";
            };
            
            // Energy
            {
                "2x EP regeneration rate when burned out";
                "Use multiple Auras at once";
                "";
            };
            
            // Regeneration
            {
                "Regeneration speeds increase as your HP/EP gets lower";
                "";
            };
            
            // Agility
            {
                "+30% Survival Bonus";
                "Movement increases Regeneration speed";
                "";
            };
            
            // Capacity
            {
                "Ammo regeneration";
                "";
            };
            
            // Luck
            {
                "Always have full automap and scanner";
                "";
            };
        };
        
        for (int i = 0; i < STAT_MAX; i++)
        {
            str Description = "";
            int Color = CR_GRAY;
            
            // Icon
            if (Player.Perks[i])
                PrintSpritePulse(StrParam("STAT%d\n", i + 1), 0, 16.1, 56.1 + (i * 32.0), 0.75, 64.0, 0.25)
            else
                PrintSpriteAlpha(StrParam("STAT%d\n", i + 1), 0, 16.1, 56.1 + (i * 32.0), 0.05, 0.5);
            
            // Build description string
            for (int j = 0; StrLen(PerkInfo[i][j]) != 0; j++)
                Description = StrParam("%s%s\n\n", Description, PerkInfo[i][j]);
            
            // Determine Color
            if (Player.Perks[i])
                Color = PerkColors[i];
            
            // Descriptions
            SetFont("SMALLFONT");
            HudMessage("%s\n", Description, HUDMSG_PLAIN, 0, Color, 40.1, 44.0 + (i * 32.0), 0.05);        
        };
    };
    
    // Team Page
    if (Player.StatPage == STATPAGE_TEAM)
    {
        PlayerData *PlayerPtr = &Players(Player.MenuIndex);
        int PlayerNum = Player.MenuIndex;
        fixed X = 32.1;
        fixed Y = 52.0;
        
        // Player List
        SetFont("SMALLFONT");
        for (int i = 0; i < MAX_PLAYERS; i++)
        {
            if (!PlayerInGame(i)) continue;
            
            // Currently selected
            if (Player.MenuIndex == i)
                HudMessage("-->\n", HUDMSG_PLAIN, 0, MenuCursorColor, X - 24.0, Y, 0.05);
            
            if (i == PlayerNumber())
                HudMessage("%N\n", i + 1, HUDMSG_PLAIN, 0, CR_GREEN, X, Y, 0.05)
            else
                HudMessage("%N (\ci%d\c-)\n", i + 1, Distance(Player.TID, Players(i).TID), HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
            
            Y += 8.0;
        };
        
        // Player Icon
        DrawPlayerSprite(PlayerNum, 184.1, 100.1);
        
        // XP/Rank
        SetFont("BIGFONT");
        HudMessage("Level: %d\n", PlayerPtr->Level, HUDMSG_PLAIN, 0, CR_WHITE, 208.1, 56.0, 0.05);
        HudMessage("XP: %lu / %lu\n", PlayerPtr->XP, PlayerPtr->XPNext, HUDMSG_PLAIN, 0, CR_WHITE, 208.1, 68.0, 0.05);
        HudMessage("Title: %s (%d/%d)\n", Ranks[PlayerPtr->RankLevel], PlayerPtr->RankLevel, MAX_RANK, HUDMSG_PLAIN, 0, CR_YELLOW, 208.1, 80.0, 0.05);
        HudMessage("Rank: %lu / %lu\n", PlayerPtr->Rank, PlayerPtr->RankNext, HUDMSG_PLAIN, 0, CR_YELLOW, 208.1, 92.0, 0.05);
        if (PlayerPtr->RankLevel > 0)
            HudMessage("Payout: %d C (%s) [%d%%]\n",
                       CalculatePay(PlayerNum), FormatTime(Player.PayTimer), Player.PayBonus,
                       HUDMSG_PLAIN, 0, CR_YELLOW, 208.1, 104.0, 0.05);
       
        // Stats
        HudMessage("%d\n", PlayerPtr->Strength, HUDMSG_PLAIN, 0, CR_RED, 244.0, 120.0, 0.05);
        HudMessage("%d\n", PlayerPtr->Defense, HUDMSG_PLAIN, 0, CR_GREEN, 244.0, 140.0, 0.05);
        HudMessage("%d\n", PlayerPtr->Vitality, HUDMSG_PLAIN, 0, CR_BRICK, 244.0, 160.0, 0.05);
        HudMessage("%d\n", PlayerPtr->Energy, HUDMSG_PLAIN, 0, CR_LIGHTBLUE, 244.0, 180.0, 0.05);
        HudMessage("%d\n", PlayerPtr->Regeneration, HUDMSG_PLAIN, 0, CR_PURPLE, 244.0, 200.0, 0.05);
        HudMessage("%d\n", PlayerPtr->Agility, HUDMSG_PLAIN, 0, CR_ORANGE, 244.0, 220.0, 0.05);
        HudMessage("%d\n", PlayerPtr->Capacity, HUDMSG_PLAIN, 0, CR_BLUE, 244.0, 240.0, 0.05);
        HudMessage("%d\n", PlayerPtr->Luck, HUDMSG_PLAIN, 0, CR_YELLOW, 244.0, 260.0, 0.05);
        PrintSprite("STAT1S", 0, 228.0, 136.0, 0.05);
        PrintSprite("STAT2S", 0, 228.0, 155.0, 0.05);
        PrintSprite("STAT3S", 0, 228.0, 176.0, 0.05);
        PrintSprite("STAT4S", 0, 228.0, 196.0, 0.05);
        PrintSprite("STAT5S", 0, 228.0, 217.0, 0.05);
        PrintSprite("STAT6S", 0, 228.0, 237.0, 0.05);
        PrintSprite("STAT7S", 0, 228.0, 256.0, 0.05);
        PrintSprite("STAT8S", 0, 228.0, 277.0, 0.05);
        
        // Augs
        for (int i = 0; i < MAX_AUGS; i++)
        {
            AugInfoPtr AugPtr = &AugData[i];
            
            SetFont("SMALLFONT");
            
            if (PlayerPtr->Augs.Active[i])
                HudMessage("E\n", HUDMSG_PLAIN, 0, CR_GREEN, 271.1 + ((i % 3) * 34.0), 140.0 + ((i / 3) * 34.0), 0.05);
            
            // Draw the level and max level
            HudMessage("%d/%d\n", PlayerPtr->Augs.Level[i], AugPtr->MaxLevel, HUDMSG_PLAIN, 0, CR_WHITE, 303.2 + ((i % 3) * 34.0), 140.0 + ((i / 3) * 34.0), 0.05);
            
            // Icon
            if (PlayerPtr->Augs.Active[i])
                PrintSprite(StrParam("Aug%dE\n", i + 1), 0, 280.1 + ((i % 3) * 34.0), 120.1 + ((i / 3) * 34.0), 0.05)
            else if (PlayerPtr->Augs.Level[i] > 0)
                PrintSprite(StrParam("Aug%dB\n", i + 1), 0, 280.1 + ((i % 3) * 34.0), 120.1 + ((i / 3) * 34.0), 0.05)
            else
                PrintSprite(StrParam("Aug%d\n", i + 1), 0, 280.1 + ((i % 3) * 34.0), 120.1 + ((i / 3) * 34.0), 0.05);
        };
        
        // Aug Battery
        SetFont("BIGFONT");
        HudMessage("%d%%\n", PlayerPtr->Augs.Battery, HUDMSG_PLAIN, 0, CR_YELLOW, 320.1, 240.0, 0.05);
        PrintSprite("AUGBATT", 0, 302.1, 240.1, 0.05);
        
        // Shield
        if (PlayerPtr->Shield.Body != 0 || PlayerPtr->Shield.Battery != 0 || PlayerPtr->Shield.Capacitor != 0)
        {
            SetFont("SMALLFONT");
            
            // Shield Stats
            HudMessage("\cvCapacity: %d / %d\n", PlayerPtr->Shield.Charge, PlayerPtr->Shield.Capacity, HUDMSG_PLAIN, 0, CR_WHITE, 240.1, 281.0, 0.05);
            HudMessage("\cdCharge: %d\n", PlayerPtr->Shield.ChargeRate, HUDMSG_PLAIN, 0, CR_WHITE, 240.1, 289.0, 0.05);
            HudMessage("\caDelay: %k\n", PlayerPtr->Shield.DelayRate, HUDMSG_PLAIN, 0, CR_WHITE, 240.1, 297.0, 0.05);
            
            // Draw Shield Model
            DrawShieldModel(PlayerNum, 218, 304);
        };
        
        // Toxicity
        if (PlayerPtr->Toxicity > 0 || PlayerPtr->Stim.Size > 0)
            DrawToxicityBar(241, 318);
        
        // Health/Armor
        int Health = PlayerPtr->ActualHealth;
        str Armor = (GetCVar("drpg_ext_doomrl") && CheckActorInventory(PlayerPtr->TID, "RLIndestructibleArmorWorn") ? "\caIndestructible\cd" : StrParam("%d\n", CheckActorInventory(PlayerPtr->TID, "Armor")));
        SetFont("SMALLFONT");
        if (CheckActorInventory(PlayerPtr->TID, "Armor") > 0)
            HudMessage("\ca%d Health\c- / \cd%s Armor\n", Health, Armor, HUDMSG_PLAIN, 0, CR_WHITE, 48.1, 348.0, 0.05)
        else
            HudMessage("\ca%d Health\n", Health, HUDMSG_PLAIN, 0, CR_WHITE, 48.1, 348.0, 0.05);
        
        // Weapon
        for (int i = 0; i < ItemMax[0]; i++)
        {
            ItemInfoPtr ItemPtr = &ItemData[0][i];

            // Horrible, horrible hacks
            if (PlayerWeapon[PlayerNum] == ItemPtr->Actor)
            {
                SetFont("SMALLFONT");
                HudMessage("\cgWeapon: \c-%s\n", ItemPtr->Name, HUDMSG_PLAIN, 0, CR_WHITE, 48.1, 356.0, 0.05);
                PrintSprite(ItemPtr->Sprite.Name, 0, 100.0 + ItemPtr->Sprite.XOff, 312 + ItemPtr->Sprite.YOff, 0.05);
                break;
            };
        };
        
        // Armor
        for (int i = 1; i < ItemMax[3]; i++)
        {
            bool DRLA = GetCVar("drpg_ext_doomrl");
            ItemInfoPtr ItemPtr = &ItemData[3][i];
            str Actor = ItemPtr->Actor;

            // DoomRL Compatibility
            if (DRLA)
            {
                Actor = StrLeft(Actor, StrLen(Actor) - 6); // Strip "Pickup" off the end
                Actor = StrParam("%sToken\n", Actor);
            };
            
            if ((DRLA ? CheckActorInventory(PlayerPtr->TID, Actor) : GetArmorType(Actor, PlayerNum) > 0))
            {
                SetFont("SMALLFONT");
                HudMessage("\cdArmor: \c-%s\n", ItemPtr->Name, HUDMSG_PLAIN, 0, CR_WHITE, 48.1, 364.0, 0.05);
                PrintSprite(ItemPtr->Sprite.Name, 0, 160.0 + ItemPtr->Sprite.XOff, 312 + ItemPtr->Sprite.YOff, 0.05);
                break;
            };
        };
    };
};

function void DrawAugsMenu()
{
    // Titles
    SetFont("BIGFONT");
    HudMessage("Augmentations\n", HUDMSG_PLAIN, 0, CR_GREEN, 0.1, 10.0, 0.05);
    
    // Aug Canisters
    PrintSprite("AUGCA0", 0, 200.0, 54.0, 0.05);
    SetFont("BIGFONT");
    HudMessage("%d\n", CheckInventory("DRPGAugCanister"), HUDMSG_PLAIN, 0, CR_GREEN, 208.1, 30.0, 0.05);
    
    // Aug Upgrade Canisters
    PrintSprite("AUGUA0", 0, 200.0, 72.0, 0.05);
    SetFont("BIGFONT");
    HudMessage("%d\n", CheckInventory("DRPGAugUpgradeCanister"), HUDMSG_PLAIN, 0, CR_GREEN, 208.1, 53.0, 0.05);
    
    // Aug Slots
    PrintSprite("AUGUB0", 0, 204.0, 102.0, 0.05);
    SetFont("BIGFONT");
    HudMessage("%d / %d\n", Player.Augs.SlotsUsed, Player.Augs.Slots, HUDMSG_PLAIN, 0, CR_GREEN, 208.1, 76.0, 0.05);
    
    // Aug Battery Power
    PrintSprite("AUGBATT", 0, 200.0, 110.0, 0.05);
    SetFont("BIGFONT");
    HudMessage("%d%%\n", Player.Augs.Battery, HUDMSG_PLAIN, 0, CR_YELLOW, 208.1, 99.0, 0.05);
    
    // Draw Aug slots
    for (int i = 0; i < 2; i++)
        for (int j = 0; j < 5; j++)
        {
            int Index = j + (i * 5);
            AugInfoPtr AugPtr = &AugData[Index];
            
            // Catch to make sure unimplemented stuff isn't drawn
            if (Index > MAX_AUGS - 1) continue;
            
            // Draw the augs that we have
            SetFont("SMALLFONT");
            
            // Draw the E if it's equipped
            if (Player.Augs.Active[Index])
                HudMessage("E\n", HUDMSG_PLAIN, 0, CR_GREEN, 0.1 + (j * 34.0), 48.0 + (i * 34.0), 0.05);
            
            // Draw the level and max level
            HudMessage("%d/%d\n", Player.Augs.Level[Index], AugPtr->MaxLevel, HUDMSG_PLAIN, 0, CR_WHITE, 32.2 + (j * 34.0), 48.0 + (i * 34.0), 0.05);
            
            // Icon
            if (Player.MenuIndex == Index)
            {
                if (Player.Augs.Active[Index])
                    PrintSpritePulse(StrParam("Aug%dE\n", Index + 1), 0, 9.1 + (j * 34.0), 28.1 + (i * 34.0), 0.75, 32.0, 0.25)
                else if (Player.Augs.Level[Index] > 0)
                    PrintSpritePulse(StrParam("Aug%dB\n", Index + 1), 0, 9.1 + (j * 34.0), 28.1 + (i * 34.0), 0.75, 32.0, 0.25)
                else
                    PrintSpritePulse(StrParam("Aug%d\n", Index + 1), 0, 9.1 + (j * 34.0), 28.1 + (i * 34.0), 0.75, 32.0, 0.25);
            }
            else
            {
                if (Player.Augs.Active[Index])
                    PrintSprite(StrParam("Aug%dE\n", Index + 1), 0, 9.1 + (j * 34.0), 28.1 + (i * 34.0), 0.05)
                else if (Player.Augs.Level[Index] > 0)
                    PrintSprite(StrParam("Aug%dB\n", Index + 1), 0, 9.1 + (j * 34.0), 28.1 + (i * 34.0), 0.05)
                else
                    PrintSprite(StrParam("Aug%d\n", Index + 1), 0, 9.1 + (j * 34.0), 28.1 + (i * 34.0), 0.05);
            };
            
            // Currently highlighted Aug's name/description
            SetFont("SMALLFONT");
            if (Player.MenuIndex == Index)
            {
                HudMessage("\ca%s\n", AugPtr->Name,
                           HUDMSG_PLAIN, 0, CR_GREEN, 0.1, 128.1, 0.05);
                
                for (int k = 0; k < AugPtr->MaxLevel; k++)
                {
                    AugInfoPtr AugIterPtr = &AugData[Player.MenuIndex];
                    
                    if (Player.Augs.Level[Index] <= k)
                        HudMessage("\cu%s\n", AugIterPtr->Description[k],
                                   HUDMSG_PLAIN, 0, CR_GREEN, 0.1, 136.1 + (k * 8.0), 0.05)
                    else
                        HudMessage("\cd%s\n", AugIterPtr->Description[k],
                                   HUDMSG_PLAIN, 0, CR_GREEN, 0.1, 136.1 + (k * 8.0), 0.05);
                };
            };

            // Draw the cursor
            if (Player.MenuIndex == Index)
                PrintSprite("SelectBo", 0, 2.1 + (j * 34.0), 36.0 + (i * 34.0), 0.05);

            // Boxes
            PrintSprite("ItemBox", 0, 0.1 + (j * 34.0), 36.0 + (i * 34.0), 0.05);
        };
};

function void DrawSkillMenu()
{
    // Skill Catagories
    auto str[MAX_CATEGORIES] SkillCategories =
    {
        "Healing/Support";
        "Powerups";
        "Auras";
        "Attacks";
        "Summoning";
        "Utility";
    };
    
    SkillPtr CurrentSkill = &Skills[Player.SkillPage][Player.MenuIndex];
    SkillLevelInfo *SkillLevel = &Player.SkillLevel[Player.SkillPage][Player.MenuIndex];
    int SkillCost = ScaleEPCost(CurrentSkill->Cost * SkillLevel->CurrentLevel * Player.SkillCostMult);
    int SkillCostNext = ScaleEPCost(CurrentSkill->Cost * (SkillLevel->CurrentLevel + 1) * Player.SkillCostMult);
    
    // Title
    SetFont("BIGFONT");
    HudMessage("Skills\n", HUDMSG_PLAIN, 0, CR_GREEN, 0.1, 10.0, 0.05);

    // Skill Category
    HudMessage("%s \cd(%d/%d)\n", SkillCategories[Player.SkillPage], Player.SkillPage + 1, MAX_CATEGORIES,
               HUDMSG_PLAIN, 0, CR_WHITE,
               0.1, 25.0, 0.05);
    
    // Skill Tokens
    PrintSprite("TOKEN3", 0, 232.1, 64.1, 0.05);
    SetFont("BIGFONT");
    if (SkillLevel->Level < CurrentSkill->MaxLevel)
        HudMessage("%d \cg(-%d)\n", CheckInventory("DRPGSkillToken"), SkillLevel->Level + 1, HUDMSG_PLAIN, 0, CR_DARKGREEN, 256.1, 54.0, 0.05)
    else
        HudMessage("%d\n", CheckInventory("DRPGSkillToken"), HUDMSG_PLAIN, 0, CR_DARKGREEN, 256.1, 54.0, 0.05);

    // Skill Cost/Next Level Cost
    PrintSprite("EPUPA0", 0, 248.0, 88.1, 0.05);
    SetFont("BIGFONT");
    if (SkillLevel->Level < CurrentSkill->MaxLevel)
        HudMessage("%d\nNext Level: %d\n", SkillCost, SkillCostNext,
                   HUDMSG_PLAIN, 0, CR_LIGHTBLUE, 256.1, 72.1, 0.05)
    else
        HudMessage("%d\n", SkillCost,
                   HUDMSG_PLAIN, 0, CR_LIGHTBLUE, 256.1, 80.0, 0.05);
    
    // Aura Cost Multiplier
    if (Player.AuraCostMult > 0)
    {
        PrintSpritePulse("Aura", 0, 232.0, 111.0, 0.75, 64.0, 0.25);
        SetFont("BIGFONT");
        HudMessage("+%d%% Skill Cost\n", (int)(Player.AuraCostMult * 100 + 1),
                   HUDMSG_PLAIN, 0, CR_CYAN, 256.1, 112.0, 0.05);
    };
    
    // Active Aura Levels
    if (Player.AuraTimer > 0 || Player.TeamAura)
    {
        static int[AURA_MAX] AuraColors =
        {
            CR_RED;
            CR_GREEN;
            CR_WHITE;
            CR_BRICK;
            CR_CYAN;
            CR_PURPLE;
            CR_ORANGE;
            CR_BLUE;
            CR_YELLOW;
            CR_BLACK;
        };
        
        for (int i = 0; i < AURA_MAX; i++)
            if (Player.Aura[i])
            {
                PrintSpritePulse(AuraIcons[i], 0, 232.0 + (i * 24.0), 176.0, 0.75, 64.0, 0.25);
                SetFont("BIGFONT");
                HudMessage("%d\n", Player.AuraLevel[i],
                           HUDMSG_PLAIN, 0, AuraColors[i], 232.0 + (i * 24.0), 160.0, 0.05);
            };
    };
    
    // Skill Grid
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 6; j++)
        {
            int Index = j + (i * 6);
            SkillPtr CurrentSkillIter = &Skills[Player.SkillPage][Index];
            SkillLevelInfo *SkillLevelIter = &Player.SkillLevel[Player.SkillPage][Index];
            int Color = CR_RED;
            
            // Break when we reach the last skill
            if (Index >= SkillCategoryMax[Player.SkillPage]) break;
            
            SetFont("SMALLFONT");
            
            // This skill is on a skill key
            for (int k = 0; k < MAX_SKILLKEYS; k++)
                if (Player.SkillCategory[k] == Player.SkillPage && Player.SkillIndex[k] == Index)
                    HudMessage("%d\n", k + 1, HUDMSG_PLAIN, 0, CR_LIGHTBLUE, 24.1 + (j * 34.0), 40.0 + (i * 34.0), 0.05);
            
            // Determine Skill Levels Color
            if (SkillLevelIter->Level >= CurrentSkillIter->MaxLevel)
                Color = CR_GREEN
            else if (SkillLevelIter->Level > 0)
                Color = CR_WHITE;
            
            // Skill Levels
            HudMessage("%d/%d\n", SkillLevelIter->CurrentLevel, CurrentSkillIter->MaxLevel, HUDMSG_PLAIN, 0, Color, 0.1 + (j * 34.0), 64.0 + (i * 34.0), 0.05);
            
            // Skill Icon
            if (Player.MenuIndex == Index)
                PrintSpritePulse(Skills[Player.SkillPage][Index].Icon, 0, 0.1 + (j * 34.0), 52.0 + (i * 34.0), 0.75, 32.0, 0.25)
            else
                PrintSprite(Skills[Player.SkillPage][Index].Icon, 0, 0.1 + (j * 34.0), 52.0 + (i * 34.0), 0.05);
            
            // Highlight Box
            if (Player.MenuIndex == Index)
                PrintSprite("SelectBo", 0, 0.1 + (j * 34.0), 52.0 + (i * 34.0), 0.05);
            
            // Box
            PrintSprite("ItemBox", 0, 0.1 + (j * 34.0), 52.0 + (i * 34.0), 0.05);
        };
    
    // Skill Name
    SetFont("BIGFONT");
    HudMessage("%s\n", CurrentSkill->Name, HUDMSG_PLAIN, 0, (SkillLevel->Level > 0 ? CR_WHITE : CR_RED),
               0.1, 154.1, 0.05);
    
    // Skill Description
    SetFont("SMALLFONT");
    if (SkillLevel->Level > 0 && SkillLevel->Level < CurrentSkill->MaxLevel)
        HudMessage("%s\n\n\cdNext Level\n%s\n",
                   CurrentSkill->Description[SkillLevel->CurrentLevel - 1],
                   CurrentSkill->Description[SkillLevel->Level],
                   HUDMSG_PLAIN, 0, CR_YELLOW,
                   0.1, 168.1, 0.05)
    else if (SkillLevel->Level == CurrentSkill->MaxLevel)
        HudMessage("%s\n", CurrentSkill->Description[SkillLevel->CurrentLevel - 1],
                   HUDMSG_PLAIN, 0, CR_YELLOW,
                   0.1, 168.1, 0.05)
    else
        HudMessage("%s\n", CurrentSkill->Description[0],
                   HUDMSG_PLAIN, 0, CR_DARKGRAY,
                   0.1, 168.1, 0.05);
};

function void DrawShieldMenu()
{
    str Description = "";
    int Amount;
    
    // Title
    SetFont("BIGFONT");
    HudMessage("Shield\n", HUDMSG_PLAIN, 0, CR_GREEN, 0.1, 10.0, 0.05);
    
    auto str[4] PageTitles =
    {
        "Bodies";
        "Batteries";
        "Capacitors";
        "Accessories";
    };
    
    // Page
    HudMessage("%s\n", PageTitles[Player.ShieldPage], HUDMSG_PLAIN, 0, CR_GREEN, 208.1, 10.0, 0.05);

    // Draw Components
    for (int i = 0; i < 7; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            ShieldPartPtr CurrentPart;
            ShieldAccsPtr CurrentAccessory;
            int MaxItems;
            int Index = j + (i * 10);
            
            if (Player.ShieldPage == 3)
            {
                CurrentAccessory = &ShieldAccessories[Index];
                MaxItems = MAX_ACCESSORIES;
            }
            else
            {
                CurrentPart = &ShieldParts[Player.ShieldPage][Index];
                MaxItems = ShieldPartsMax[Player.ShieldPage];
            };
            
            // Break if we're at the end of the list
            if (Index >= MaxItems) break;
            
            // Draw Available Components
            for (int k = 0; k < 4; k++)
            {
                if (Index < MaxItems)
                {
                    // Draw Equipped Status
                    SetFont("SMALLFONT");
                    if (Player.ShieldPage == 0 && Player.Shield.Body && !StrCmp(Player.Shield.Body->Actor, CurrentPart->Actor))
                        HudMessage("E\n", HUDMSG_PLAIN, 0, CR_WHITE,        0.1 + (j * 34.0), 48.0 + (i * 34.0), 0.05);
                    if (Player.ShieldPage == 1 && Player.Shield.Battery && !StrCmp(Player.Shield.Battery->Actor, CurrentPart->Actor))
                        HudMessage("E\n", HUDMSG_PLAIN, 0, CR_GOLD,         0.1 + (j * 34.0), 48.0 + (i * 34.0), 0.05);
                    if (Player.ShieldPage == 2 && Player.Shield.Capacitor && !StrCmp(Player.Shield.Capacitor->Actor, CurrentPart->Actor))
                        HudMessage("E\n", HUDMSG_PLAIN, 0, CR_LIGHTBLUE,    0.1 + (j * 34.0), 48.0 + (i * 34.0), 0.05);
                    if (Player.ShieldPage == 3 && Player.Shield.Accessory && !StrCmp(Player.Shield.Accessory->Actor, CurrentAccessory->Actor))
                        HudMessage("E\n", HUDMSG_PLAIN, 0, CR_GREEN,        0.1 + (j * 34.0), 48.0 + (i * 34.0), 0.05);
                    
                    // Draw Quantity if you have more than one
                    if (Player.ShieldPage < 3 && CheckInventory(CurrentPart->Actor) > 1)   HudMessage("%d\n", CheckInventory(CurrentPart->Actor),  HUDMSG_PLAIN, 0, CR_WHITE, 32.2 + (j * 34.0), 48.0 + (i * 34.0), 0.05);
                    if (Player.ShieldPage == 3 && CheckInventory(CurrentAccessory->Actor) > 1)   HudMessage("%d\n", CheckInventory(CurrentAccessory->Actor),  HUDMSG_PLAIN, 0, CR_WHITE, 32.2 + (j * 34.0), 48.0 + (i * 34.0), 0.05);
                };
                
                // Draw Components and set Description
                if (Player.ShieldPage == k && k < 3)
                {
                    if (Index < MaxItems && CheckInventory(CurrentPart->Actor))
                    {
                        // Draw Component
                        if (Player.MenuIndex == Index)
                            PrintSpritePulse(CurrentPart->Icon, 0, 17.1 + (j * 34.0), 52.1 + (i * 34.0), 0.75, 32.0, 0.25)
                        else
                            PrintSprite(CurrentPart->Icon, 0, 17.1 + (j * 34.0), 52.1 + (i * 34.0), 0.05);
                        
                        // Set Description
                        if (Index == Player.MenuIndex)
                        {
                            // Name
                            Description = StrParam("%s\n", CurrentPart->Name);
                            
                            str Prepend;
                            
                            // Capacity
                            if (CurrentPart->Capacity < 0)
                                Prepend = "\ca"
                            else
                                Prepend = "\cd+";
                            if (CurrentPart->Capacity != 0)
                                Description = StrParam("%s\n%s%d Capacity\n", Description, Prepend, CurrentPart->Capacity);
                            
                            // Charge Rate
                            if (CurrentPart->ChargeRate < 0)
                                Prepend = "\ca"
                            else
                                Prepend = "\cd+";
                            if (CurrentPart->ChargeRate != 0)
                                Description = StrParam("%s\n%s%d Charge Rate/Sec\n", Description, Prepend, CurrentPart->ChargeRate);
                            
                            // Delay Rate
                            if (CurrentPart->DelayRate > 0)
                                Prepend = "\ca+"
                            else
                                Prepend = "\cd";
                            if (CurrentPart->DelayRate != 0)
                                Description = StrParam("%s\n%s%k Delay\n", Description, Prepend, CurrentPart->DelayRate);
                        };
                    };
                }
                else if (Player.ShieldPage == 3 && k == 3)
                {
                    if (Index < MaxItems && CheckInventory(CurrentAccessory->Actor))
                    {
                        // Draw Component
                        if (Player.MenuIndex == Index)
                            PrintSpritePulse(CurrentAccessory->Icon, 0, 17.1 + (j * 34.0), 52.1 + (i * 34.0), 0.75, 32.0, 0.25)
                        else
                            PrintSprite(CurrentAccessory->Icon, 0, 17.1 + (j * 34.0), 52.1 + (i * 34.0), 0.05);
                        
                        // Set Description
                        if (Index == Player.MenuIndex)
                        {
                            // Name
                            Description = StrParam("%s\n", CurrentAccessory->Name);
                            
                            str Prepend;
                            
                            // Extra Description
                            if (CurrentAccessory->Description != "")
                                Description = StrParam("%s\n%s\n", Description, CurrentAccessory->Description);
                        };
                    };
                };
            };

            // Draw the cursor
            if (Player.MenuIndex == Index)
                PrintSprite("SelectBo", 0, 2.1 + (j * 34.0), 36.0 + (i * 34.0), 0.05);

            // Boxes
            PrintSprite("ItemBox", 0, 0.1 + (j * 34.0), 36.0 + (i * 34.0), 0.05);
        };
    };
    
    SetFont("SMALLFONT");
    
    // Epic Shield Name
    if (Player.Shield.Body || Player.Shield.Battery || Player.Shield.Capacitor)
    {
        str ShieldName = "";
        if (Player.Shield.Capacitor)    ShieldName = StrParam("%s %s\n", ShieldName, Player.Shield.Capacitor->Name);
        if (Player.Shield.Battery)      ShieldName = StrParam("%s \c-%s\n", ShieldName, Player.Shield.Battery->Name);
        if (Player.Shield.Body)         ShieldName = StrParam("%s \c-%s\n", ShieldName, Player.Shield.Body->Name);
        if (Player.Shield.Accessory)    ShieldName = StrParam("%s \c-%s\n", ShieldName, Player.Shield.Accessory->Name);
        ShieldName = StrParam("%s\c- Shield\n", ShieldName);
        HudMessage("%s\n", ShieldName, HUDMSG_PLAIN, 0, CR_WHITE, 0.1, 312.1, 0.05);
    };
    
    // Component Description
    SetFont("SMALLFONT");
    HudMessage("%s\n", Description, HUDMSG_PLAIN, 0, CR_WHITE, 0.1, 332.1, 0.05);

    // Shield Stats
    HudMessage("\cvCapacity: %d / %d\n", Player.Shield.Charge, Player.Shield.Capacity,  HUDMSG_PLAIN, 0, CR_WHITE, 36.1, 286.0, 0.05);
    HudMessage("\cdCharge: %d\n", Player.Shield.ChargeRate,                             HUDMSG_PLAIN, 0, CR_WHITE, 36.1, 294.0, 0.05);
    HudMessage("\caDelay: %k\n", Player.Shield.DelayRate,                               HUDMSG_PLAIN, 0, CR_WHITE, 36.1, 302.0, 0.05);
    
    // Draw Shield Model
    DrawShieldModel(-1, 18, 308);
};

function void DrawStimsMenu()
{
    fixed X = 32.1;
    fixed Y = 50.0;
    str StimString;
    int Color;
    
    // Title
    SetFont("BIGFONT");
    HudMessage("Stims\n", HUDMSG_PLAIN, 0, CR_GREEN, 0.1, 10.0, 0.05);
    
    // Stim String
    if (Player.Stim.Size == 1)
        StimString = StrParam("Small Stim: %d/%d\n", Player.Stim.Amount, Player.Stim.Capacity)
    else if (Player.Stim.Size == 2)
        StimString = StrParam("Medium Stim: %d/%d\n", Player.Stim.Amount, Player.Stim.Capacity)
    else if (Player.Stim.Size == 3)
        StimString = StrParam("Large Stim: %d/%d\n", Player.Stim.Amount, Player.Stim.Capacity)
    else if (Player.Stim.Size == 4)
        StimString = StrParam("Extra-Large Stim: %d/%d\n", Player.Stim.Amount, Player.Stim.Capacity)
    else
    {
        if (Player.StimSelected == 0)
            StimString = StrParam("Small Stim: %d\n", CheckInventory("DRPGStimSmall"))
        else if (Player.StimSelected == 1)
            StimString = StrParam("Medium Stim: %d\n", CheckInventory("DRPGStimMedium"))
        else if (Player.StimSelected == 2)
            StimString = StrParam("Large Stim: %d\n", CheckInventory("DRPGStimLarge"))
        else if (Player.StimSelected == 3)
            StimString = StrParam("Extra-Large Stim: %d\n", CheckInventory("DRPGStimXL"));
    };
    
    // Set the Color
    if (Player.MenuIndex == 0)
        Color = MenuCursorColor
    else if (Player.Stim.Size > 0)
        Color = CR_GREEN
    else
        Color = CR_WHITE;
    
    // Draw Current Stim
    HudMessage("%s\n", StimString, HUDMSG_PLAIN, 0, Color, 30.1, 24.0, 0.05);
    
    // Draw Current Stim Bar
    if (Player.Stim.Size > 0)
        for (int i = 0; i < MAX_COMPOUNDS; i++)
            if (Player.Stim.Current[i] > 0)
            {
                DrawBar(StrParam("Stim%d\n", i + 1), X, 34, Player.Stim.Current[i], true);
                X += Player.Stim.Current[i];
            };
    
    for (int i = 1; i <= MAX_COMPOUNDS; i++)
    {
        // Reset X
        X = 32.1;
        
        // Set the Color
        if (i == Player.MenuIndex)
            Color = MenuCursorColor
        else
            Color = CompoundColors[i - 1];
        
        // Vial Bar
        DrawBar(StrParam("Stim%d\n", i), X, Y, (int)(((fixed)Player.Stim.Vials[i - 1] / (fixed)(Player.Stim.VialMax + 1)) * 100.0));
        
        // Vial
        X = 144.1;
        SetFont("SMALLFONT");
        HudMessage("%s: %d/%d\n", CompoundNames[i - 1], Player.Stim.Vials[i - 1], Player.Stim.VialMax, HUDMSG_PLAIN, 0, Color, X, Y, 0.05);
        
        Y += 8.0;
    };
    
    // Toxicity
    DrawToxicityBar(32, 224);
};

function void MenuInput()
{
    int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
    int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
    
    // Reset the menu block
    Player.MenuBlock = false;
    
    // Main Menu
    if (Player.Menu == MENUPAGE_MAIN)
    {
        if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD)
        {
            ActivatorSound("menu/move", 127);
            Player.MenuIndex--;
            if (Player.MenuIndex < 0) Player.MenuIndex = MAX_MENU - 1;
        };
        if (Buttons == BT_BACK && OldButtons != BT_BACK)
        {
            if (!GetCVar("drpg_shoptype") && Player.MenuIndex == 4)
                return;
            
            ActivatorSound("menu/move", 127);
            Player.MenuIndex++;
            if (Player.MenuIndex > MAX_MENU - 1) Player.MenuIndex = 0;
        };
        if (Buttons == BT_USE && OldButtons != BT_USE)
        {
            Player.MenuBlock = true;
            
            if (Player.MenuIndex == 5)
                OpenShop(true)
            else
            {
                ActivatorSound("menu/move", 127);
                Player.Menu = Player.MenuIndex + 1;
                Player.MenuIndex = 0;
                Player.DelayTimer = 0;
                ClearToxicityMeter();
            };
        };
    };
    
    // Stats menu
    if (Player.Menu == MENUPAGE_STATS && !Player.MenuBlock)
    {
        if (Buttons & BT_FORWARD && !(OldButtons & BT_FORWARD))
        {
            if (Player.StatPage == STATPAGE_STATS && CheckInventory("DRPGStatToken") > 0)
            {
                ActivatorSound("menu/move", 127);
                Player.MenuIndex -= 2;
                if (Player.MenuIndex < 0) Player.MenuIndex = STAT_MAX - 1;
            }
            else if (Player.StatPage == STATPAGE_TEAM)
            {
                ActivatorSound("menu/move", 127);
                Player.MenuIndex--;
                ClearToxicityMeter();
                if (Player.MenuIndex < 0) Player.MenuIndex = PlayerCount() - 1;
            };
        };
        if (Buttons & BT_BACK && !(OldButtons & BT_BACK))
        {
            if (Player.StatPage == STATPAGE_STATS && CheckInventory("DRPGStatToken") > 0)
            {
                ActivatorSound("menu/move", 127);
                Player.MenuIndex += 2;
                if (Player.MenuIndex > STAT_MAX - 1) Player.MenuIndex = 0;
            }
            else if (Player.StatPage == STATPAGE_TEAM)
            {
                ActivatorSound("menu/move", 127);
                Player.MenuIndex++;
                ClearToxicityMeter();
                if (Player.MenuIndex > PlayerCount() - 1) Player.MenuIndex = 0;
            };
        };
        if ((Buttons & BT_LEFT && !(OldButtons & BT_LEFT)) ||
            (Buttons & BT_MOVELEFT && !(OldButtons & BT_MOVELEFT)))
        {
            if (Buttons & BT_SPEED)
            {
                if (Player.StatPage > 0)
                {
                    ActivatorSound("menu/move", 127);
                    Player.StatPage--;
                    Player.MenuIndex = 0;
                };
            }
            else if (Player.StatPage == STATPAGE_STATS && CheckInventory("DRPGStatToken") > 0)
            {
                ActivatorSound("menu/move", 127);
                Player.MenuIndex--;
                if (Player.MenuIndex < 0) Player.MenuIndex = STAT_MAX - 1;
            };
        };
        if ((Buttons & BT_RIGHT && !(OldButtons & BT_RIGHT)) ||
            (Buttons & BT_MOVERIGHT && !(OldButtons & BT_MOVERIGHT)))
        {
            if (Buttons & BT_SPEED)
            {
                if (Player.StatPage < STATPAGE_MAX - (InMultiplayer ? 1 : 2))
                {
                    ActivatorSound("menu/move", 127);
                    Player.StatPage++;
                    Player.MenuIndex = 0;
                };
            }
            else if (Player.StatPage == STATPAGE_STATS && CheckInventory("DRPGStatToken") > 0)
            {
                ActivatorSound("menu/move", 127);
                Player.MenuIndex++;
                if (Player.MenuIndex > STAT_MAX - 1) Player.MenuIndex = 0;
            };
        };
        if (Buttons == BT_USE && (OldButtons != BT_USE || Player.DelayTimer > 35.0 * GetCVarFixed("drpg_menu_repeat")))
            if (Player.StatPage == STATPAGE_STATS && CheckInventory("DRPGStatToken") > 0)
                IncreaseStat(0)
            else if (Player.StatPage == STATPAGE_TEAM && Player.MenuIndex != PlayerNumber())
            {
                PlayerTeleport(Player.MenuIndex);
                Player.EP -= ScaleEPCost(50);
            };
        if (Buttons == BT_USE)
            Player.DelayTimer++;
    };
    
    // Augmentations menu
    if (Player.Menu == MENUPAGE_AUGS && !Player.MenuBlock)
    {
        if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && Player.MenuIndex > 0)
        {
            ActivatorSound("menu/move", 127);
            Player.MenuIndex -= 5;
            if (Player.MenuIndex < 0) Player.MenuIndex = 0;
        };
        if (Buttons == BT_BACK && OldButtons != BT_BACK && Player.MenuIndex < MAX_AUGS - 1)
        {
            ActivatorSound("menu/move", 127);
            Player.MenuIndex += 5;
            if (Player.MenuIndex > MAX_AUGS - 1) Player.MenuIndex = MAX_AUGS - 1;
        };
        if (((Buttons == BT_LEFT && OldButtons != BT_LEFT) ||
            (Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT))
            && Player.MenuIndex > 0)
        {
            ActivatorSound("menu/move", 127);
            Player.MenuIndex--;
        };
        if (((Buttons == BT_RIGHT && OldButtons != BT_RIGHT) ||
            (Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT))
            && Player.MenuIndex < MAX_AUGS - 1)
        {
            ActivatorSound("menu/move", 127);
            Player.MenuIndex++;
        };
        if (Buttons == BT_USE && OldButtons != BT_USE)
        {
            if (Player.Augs.Level[Player.MenuIndex] == 0)
                LevelUpAug(Player.MenuIndex)
            else
                EquipAug(Player.MenuIndex);
        };
        if (Buttons & BT_SPEED && !(OldButtons & BT_SPEED))
            LevelUpAug(Player.MenuIndex);
    };
    
    // Skills Menu
    if (Player.Menu == MENUPAGE_SKILLS && !Player.MenuBlock && !Player.SkillWheelOpen)
    {
        if (Buttons & BT_FORWARD && !(OldButtons & BT_FORWARD))
        {
            if (Buttons & BT_SPEED)
            {
                if (Player.SkillLevel[Player.SkillPage][Player.MenuIndex].CurrentLevel > 1)
                {
                    Player.SkillLevel[Player.SkillPage][Player.MenuIndex].CurrentLevel--;
                    ActivatorSound("menu/move", 127);
                };
            }
            else if (Player.MenuIndex > 0)
            {
                ActivatorSound("menu/move", 127);
                Player.MenuIndex -= 6;
                if (Player.MenuIndex < 0) Player.MenuIndex = 0;
            };
        };
        if (Buttons & BT_BACK && !(OldButtons & BT_BACK))
        {
            if (Buttons & BT_SPEED)
            {
                if (Player.SkillLevel[Player.SkillPage][Player.MenuIndex].CurrentLevel < Player.SkillLevel[Player.SkillPage][Player.MenuIndex].Level)
                {
                    Player.SkillLevel[Player.SkillPage][Player.MenuIndex].CurrentLevel++;
                    ActivatorSound("menu/move", 127);
                };
            }
            else if (Player.MenuIndex < SkillCategoryMax[Player.SkillPage] - 1)
            {
                ActivatorSound("menu/move", 127);
                Player.MenuIndex += 6;
                if (Player.MenuIndex > SkillCategoryMax[Player.SkillPage] - 1) Player.MenuIndex = SkillCategoryMax[Player.SkillPage] - 1;
            };
        };
        if ((Buttons & BT_LEFT && !(OldButtons & BT_LEFT)) ||
            (Buttons & BT_MOVELEFT && !(OldButtons & BT_MOVELEFT)))
        {
            if (Buttons & BT_SPEED)
            {
                ActivatorSound("menu/move", 127);
                Player.MenuIndex = 0;
                Player.SkillPage--;
                if (Player.SkillPage < 0) Player.SkillPage = MAX_CATEGORIES - 1;
            }
            else if (Player.MenuIndex > 0)
            {
                ActivatorSound("menu/move", 127);
                Player.MenuIndex--;
            };
        };
        if ((Buttons & BT_RIGHT && !(OldButtons & BT_RIGHT)) ||
            (Buttons & BT_MOVERIGHT && !(OldButtons & BT_MOVERIGHT)))
        {
            if (Buttons & BT_SPEED)
            {
                ActivatorSound("menu/move", 127);
                Player.MenuIndex = 0;
                Player.SkillPage++;
                if (Player.SkillPage >= MAX_CATEGORIES) Player.SkillPage = 0;
            }
            else if (Player.MenuIndex < SkillCategoryMax[Player.SkillPage] - 1)
            {
                ActivatorSound("menu/move", 127);
                Player.MenuIndex++;
            };
        };
        if (Buttons == BT_USE && OldButtons != BT_USE)
            IncreaseSkill();
        if (Buttons & BT_ATTACK && !(OldButtons & BT_ATTACK))
            UseSkill(0);
    };
    
    // Shield Menu
    if (Player.Menu == MENUPAGE_SHIELD && !Player.MenuBlock)
    {
        int PartsMax;
        ShieldPartPtr CurrentPart;
        ShieldAccsPtr CurrentAccessory;
        if (Player.ShieldPage == 3)
        {
            CurrentAccessory = &ShieldAccessories[Player.MenuIndex];
            PartsMax = MAX_ACCESSORIES;
        }
        else
        {
            CurrentPart = &ShieldParts[Player.ShieldPage][Player.MenuIndex];
            PartsMax = ShieldPartsMax[Player.ShieldPage];
        };
        
        if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD)
        {
            ActivatorSound("menu/move", 127);
            Player.MenuIndex -= 10;
            if (Player.MenuIndex < 0) Player.MenuIndex = 0;
        };
        if (Buttons == BT_BACK && OldButtons != BT_BACK)
        {
            ActivatorSound("menu/move", 127);
            Player.MenuIndex += 10;
            if (Player.MenuIndex > PartsMax - 1) Player.MenuIndex = PartsMax - 1;
        };
        if ((Buttons & BT_LEFT && !(OldButtons & BT_LEFT)) ||
            (Buttons & BT_MOVELEFT && !(OldButtons & BT_MOVELEFT)))
        {
            if (Buttons & BT_SPEED)
            {
                if (Player.ShieldPage > 0)
                {
                    ActivatorSound("menu/move", 127);
                    Player.ShieldPage--;
                    Player.MenuIndex = 0;
                };
            }
            else
            {
                ActivatorSound("menu/move", 127);
                Player.MenuIndex--;
                if (Player.MenuIndex < 0) Player.MenuIndex = PartsMax - 1;
            };
        };
        if ((Buttons & BT_RIGHT && !(OldButtons & BT_RIGHT)) ||
            (Buttons & BT_MOVERIGHT && !(OldButtons & BT_MOVERIGHT)))
        {
            if (Buttons & BT_SPEED)
            {
                if (Player.ShieldPage < 3)
                {
                    ActivatorSound("menu/move", 127);
                    Player.ShieldPage++;
                    Player.MenuIndex = 0;
                };
            }
            else
            {
                ActivatorSound("menu/move", 127);
                Player.MenuIndex++;
                if (Player.MenuIndex > PartsMax - 1) Player.MenuIndex = 0;
            };
        };
        if (Buttons == BT_USE && OldButtons != BT_USE)
        {
            if (Player.MenuIndex < PartsMax)
            {
                for (int i = 0; i < 3; i++)
                    if (i == Player.ShieldPage)
                        if (CheckInventory(CurrentPart->Actor))
                        {
                            if (i == 0) Player.Shield.Body = CurrentPart;
                            if (i == 1) Player.Shield.Battery = CurrentPart;
                            if (i == 2) Player.Shield.Capacitor = CurrentPart;
                            
                            ActivatorSound("shield/equip", 127);
                        };
                if (Player.ShieldPage == 3)
                    if (CheckInventory(CurrentAccessory->Actor))
                    {
                        SetShieldAccessory(CurrentAccessory);
                        
                        ActivatorSound("shield/equip", 127);
                    };
            };
        };
        if (Buttons & BT_USE && !(OldButtons & BT_USE) && Buttons & BT_SPEED)
        {
            if (Player.MenuIndex < PartsMax)
                for (int i = 0; i < 4; i++)
                    if (i == Player.ShieldPage)
                    {
                        if (i == 0) Player.Shield.Body = nullptr;
                        if (i == 1) Player.Shield.Battery = nullptr;
                        if (i == 2) Player.Shield.Capacitor = nullptr;
                        if (i == 3) RemoveShieldAccessory();
                        
                        ActivatorSound("shield/unequip", 127);
                    };
        };
    };
    
    // Stims Menu
    if (Player.Menu == MENUPAGE_STIMS && !Player.MenuBlock)
    {
        if (Buttons == BT_FORWARD && (OldButtons != BT_FORWARD || Player.DelayTimer > 35.0 * GetCVarFixed("drpg_menu_repeat")))
        {
            Player.MenuIndex--;
            ActivatorSound("menu/move", 127);
            if (Player.MenuIndex < 0) Player.MenuIndex = MAX_COMPOUNDS;
        };
        if (Buttons == BT_FORWARD)
            Player.DelayTimer++;
        if (Buttons == BT_BACK && (OldButtons != BT_BACK || Player.DelayTimer > 35.0 * GetCVarFixed("drpg_menu_repeat")))
        {
            Player.MenuIndex++;
            ActivatorSound("menu/move", 127);
            if (Player.MenuIndex > MAX_COMPOUNDS) Player.MenuIndex = 0;
        };
        if (Buttons == BT_BACK)
            Player.DelayTimer++;
        if (((Buttons == BT_LEFT && OldButtons != BT_LEFT) ||
            (Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT))
            && Player.StimSelected > 0)
        {
            if (Player.Stim.Size > 0) return;
            
            Player.StimSelected--;
            ActivatorSound("menu/move", 127);
        };
        if (((Buttons == BT_RIGHT && OldButtons != BT_RIGHT) ||
            (Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT))
            && Player.StimSelected < 4 - 1)
        {
            if (Player.Stim.Size > 0) return;
            
            Player.StimSelected++;
            ActivatorSound("menu/move", 127);
        };
        if (Buttons == BT_USE && (OldButtons != BT_USE || Player.DelayTimer > 35.0 * GetCVarFixed("drpg_menu_repeat")))
        {
            if (Player.MenuIndex == 0)
                SetStim(Player.StimSelected)
            else
                MixStim(Player.MenuIndex - 1);
        };
        if (Buttons == BT_USE)
            Player.DelayTimer++;
    };
    
    // Reset the Delay Timer if no buttons are pressed
    if (Buttons == 0 && OldButtons == 0)
        Player.DelayTimer = 0;
};

function void IncreaseStat(int Stat)
{
    int StatAmount;
    
    // Determine which Stat we're working with for Stat amount calculation on upgrade
    if (Stat > 0)
    {
        switch (Stat)
        {
        case 1: StatAmount = Player.Strength;        break;
        case 2: StatAmount = Player.Defense;         break;
        case 3: StatAmount = Player.Vitality;        break;
        case 4: StatAmount = Player.Energy;          break;
        case 5: StatAmount = Player.Regeneration;    break;
        case 6: StatAmount = Player.Agility;         break;
        case 7: StatAmount = Player.Capacity;        break;
        case 8: StatAmount = Player.Luck;            break;
        };
    }
    else
    {
        switch (Player.MenuIndex)
        {
        case 0: StatAmount = Player.Strength;        break;
        case 1: StatAmount = Player.Defense;         break;
        case 2: StatAmount = Player.Vitality;        break;
        case 3: StatAmount = Player.Energy;          break;
        case 4: StatAmount = Player.Regeneration;    break;
        case 5: StatAmount = Player.Agility;         break;
        case 6: StatAmount = Player.Capacity;        break;
        case 7: StatAmount = Player.Luck;            break;
        };
    };
    
    if (GetCVar("drpg_statcost") == 0) // Normal Costs
        StatAmount = 1;
    if (GetCVar("drpg_statcost") == 1) // Progressive Costs
        StatAmount = Abs(StatAmount + 1);
    if (GetCVar("drpg_statcost") == 2) // Tiered Costs
        StatAmount = Abs((StatAmount / 10) + 1);

    // Make sure you have enough Stat Tokens
    if (CheckInventory("DRPGStatToken") < StatAmount && Stat == 0)
    {
        if (Player.DelayTimer > 0) return;
        ActivatorSound("menu/error", 127);
        SetHudSize(0, 0, false);
        SetFont("BIGFONT");
        HudMessage("You don't have enough Stat Tokens\n", HUDMSG_FADEOUT, 0, CR_RED, 0.5, 0.5, 2.0, 1.0);
        return;
    }
    else if (CheckInventory("DRPGStatToken") < StatAmount && Stat > 0)
        return;
    
    // Check Stat Caps
    CheckStatCaps();
    
    // Upgrade the Stat
    if (Stat > 0)
    {
        switch (Stat)
        {
        case 1: if (Player.Strength >= Player.StatCap)      { return; } else Player.Strength++;     break;
        case 2: if (Player.Defense >= Player.StatCap)       { return; } else Player.Defense++;      break;
        case 3: if (Player.Vitality >= Player.StatCap)      { return; } else Player.Vitality++;     break;
        case 4: if (Player.Energy >= Player.StatCap)        { return; } else Player.Energy++;       break;
        case 5: if (Player.Regeneration >= Player.StatCap)  { return; } else Player.Regeneration++; break;
        case 6: if (Player.Agility >= Player.StatCap)       { return; } else Player.Agility++;      break;
        case 7: if (Player.Capacity >= Player.StatCap)      { return; } else Player.Capacity++;     break;
        case 8: if (Player.Luck >= Player.StatCap)          { return; } else Player.Luck++;         break;
        };
    }
    else
    {
        switch (Player.MenuIndex)
        {
        case 0: if (Player.Strength >= Player.StatCap)      { PrintStatError();     return; }   else Player.Strength++;     break;
        case 1: if (Player.Defense >= Player.StatCap)       { PrintStatError();     return; }   else Player.Defense++;      break;
        case 2: if (Player.Vitality >= Player.StatCap)      { PrintStatError();     return; }   else Player.Vitality++;     break;
        case 3: if (Player.Energy >= Player.StatCap)        { PrintStatError();     return; }   else Player.Energy++;       break;
        case 4: if (Player.Regeneration >= Player.StatCap)  { PrintStatError();     return; }   else Player.Regeneration++; break;
        case 5: if (Player.Agility >= Player.StatCap)       { PrintStatError();     return; }   else Player.Agility++;      break;
        case 6: if (Player.Capacity >= Player.StatCap)      { PrintStatError();     return; }   else Player.Capacity++;     break;
        case 7: if (Player.Luck >= Player.StatCap)          { PrintStatError();     return; }   else Player.Luck++;         break;
        };
    };
    
    if (Stat == 0)
        ActivatorSound("menu/move", 127);
    
    TakeInventory("DRPGStatToken", StatAmount);
};

function void IncreaseSkill()
{
    SkillPtr CurrentSkill = &Skills[Player.SkillPage][Player.MenuIndex];
    SkillLevelInfo *SkillLevel = &Player.SkillLevel[Player.SkillPage][Player.MenuIndex];
    
    if (CheckInventory("DRPGSkillToken") > 0)
    {
        if (SkillLevel->Level < CurrentSkill->MaxLevel && CheckInventory("DRPGSkillToken") > SkillLevel->Level)
        {
            SkillLevel->Level++;
            SkillLevel->CurrentLevel++;
            TakeInventory("DRPGSkillToken", SkillLevel->Level);
            ActivatorSound("menu/move", 127);
        };
    }
    else
        ActivatorSound("menu/error", 127);
};

function void PrintStatError()
{
    if (Player.DelayTimer > 0) return;
    
    ActivatorSound("menu/error", 127);
    SetHudSize(0, 0, false);
    SetFont("BIGFONT");
    HudMessage("You cannot increase stats past %d\n", Player.StatCap, HUDMSG_FADEOUT, 0, CR_RED, 0.5, 0.5, 2.0, 1.0);
};

function void MenuHelp()
{
    fixed X = 8.1;
    fixed Y = 380.1;
    
    // Return if the help CVAR is off
    if (!GetCVar("drpg_menuhelp")) return;
    
    // Set the HUD Size and Font
    SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);
    SetFont("SMALLFONT");
    
    // Main Menu Help
    if (Player.InMenu && !Player.InShop)
        switch (Player.Menu)
        {
        case 0: // Main Menu
            HudMessage("\cd%K and %K\c- to navigate\n\cd%K\c- to select\n",
                       "+forward", "+back", "+use",
                       HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
            break;
        case 1: // Stats Menu
            if (Player.StatPage == STATPAGE_STATS)
                HudMessage("\cd%K/%K/%K/%K\c- to navigate\n\cd%K + %K + %K\c- to switch pages\n\cd%K\c- to Increase Stat\n",
                           "+forward", "+back", "+moveleft", "+moveright", "+speed", "+moveleft", "+moveright", "+use",
                           HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
            if (Player.StatPage == STATPAGE_PERKS)
                HudMessage("\cd%K + %K + %K\c- to switch pages\n",
                           "+speed", "+moveleft", "+moveright",
                           HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
            if (Player.StatPage == STATPAGE_TEAM)
                HudMessage("\cd%K/%K\c- to navigate\n\cd%K + %K + %K\c- to switch pages\n\cd%K\c- to Teleport to selected Player (\cn%d EP\c-)\n",
                           "+forward", "+back", "+speed", "+moveleft", "+moveright", "+use", ScaleEPCost(50),
                           HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
            break;
        case 2: // Augmentations Menu
            HudMessage("\cd%K/%K/%K/%K\c- to navigate\n\cd%K\c- to Toggle On/Off\n\cd%K\c- to Upgrade\n",
                       "+forward", "+back", "+moveleft", "+moveright", "+use", "+speed",
                       HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
            break;
        case 3: // Skills Menu
            HudMessage("\cd%K/%K/%K/%K\c- to navigate\n\cd%K + %K/%K\c- to Switch Pages\n\cd%K\c- to Learn/Upgrade Skill\nHold \cd%K\c- to Assign Skill to Wheel Slot\n\cd%K + %K/%K\c- to Switch Current Skill Level\n\cd%K\c- to Quickuse selected skill\n",
                       "+forward", "+back", "+moveleft", "+moveright", "+speed", "+moveleft", "+moveright", "+use", "+user1", "+speed", "+forward", "+back", "+attack",
                       HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
            break;
        case 4: // Shield Menu
            HudMessage("\cd%K/%K/%K/%K\c- to navigate\n\cd%K + %K/%K\c- to Switch Pages\n\cd%K\c- to Equip Part\n\cd%K + %K\c- to Unequip Part\n",
                       "+forward", "+back", "+moveleft", "+moveright", "+speed", "+moveleft", "+moveright", "+use", "+speed", "+use",
                       HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
            break;
        case 5: // Stims Menu
            HudMessage("\cd%K/%K\c- to navigate\n\cd%K/%K\c- to select Stim Size\n\cd%K\c- to Choose Stim or Add Compound to Stim\n",
                       "+forward", "+back", "+moveleft", "+moveright", "+use",
                       HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
            break;
        };
    
    // Shop Menu Help
    if (!Player.InMenu && Player.InShop)
        HudMessage("\cd%K/%K/%K/%K\c- to navigate\n\cd%K + %K/%K\c- to Switch Pages\n\cd%K\c- to Buy Item\n\cd%K + %K\c- to Sell Item, Hold to Bulk Sell Item\n\cd%K\c- to toggle Auto-Selling of item\n\cd%K\c- to Drop selected item\n\cd%K\c- to Exit\n",
                   "+forward", "+back", "+moveleft", "+moveright", "+speed", "+moveleft", "+moveright", "+use", "+speed", "+use", "+attack", "+zoom", "drpg_menu",
                   HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
    
    // Outpost Menus
    if (Player.OutpostMenu > 0)
    {
        switch (Player.OutpostMenu)
        {
        case OMENU_LEVELTRANSPORT: // Level Transporter
            HudMessage("\cd%K/%K/%K/%K\c- to Select Level\n\cd%K\c- to Teleport to Level\n\cd%K\c- to Exit\n",
                       "+forward", "+back", "+moveleft", "+moveright", "+use", "+speed",
                       HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
            break;
        case OMENU_SKILLCOMPUTER: // Skill Computer
            HudMessage("\cd%K/%K\c- to navigate\n\cd%K\c- to Change Skill\n\cd%K\c- to Exit\n",
                       "+forward", "+back", "+use", "+speed",
                       HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
            break;
        case OMENU_TOKENCONVERTER: // Token Converter
            HudMessage("\cd%K/%K\c- to navigate\n\cd%K\c- to Convert\n\cd%K\c- to exit\n",
                       "+forward", "+back", "+use", "+speed",
                       HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
            break;
        case OMENU_WAVESELECTOR: // Wave Selector
            HudMessage("\cd%K/%K/%K/%K\c- to Choose Wave\n\cd%K\c- to Change Wave\n\cd%K\c- to Exit\n",
                       "+forward", "+back", "+moveleft", "+moveright", "+use", "+speed",
                       HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
            break;
        case OMENU_SHOPSPECIAL: // Shop Special
            HudMessage("\cd%K\c- to buy\n\cd%K\c- to exit\n",
                       "+use", "+speed",
                       HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
            break;
        case OMENU_BONUSSELECTOR: // Arena Bonus Selector
            HudMessage("\cd%K/%K\c- to navigate\n\cd%K\c- to Select\n",
                       "+forward", "+back", "+use",
                       HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
            break;
        case OMENU_LOCKER: // Locker
            HudMessage("\cd%K/%K/%K/%K\c- to navigate\n\cd%K + %K/%K\c- to Switch Pages\n\cd%K\c- to Deposit Item\n\cd%K + %K\c- to Withdraw Item\n\cd%K\c- to Exit\n",
                       "+forward", "+back", "+moveleft", "+moveright", "+speed", "+moveleft", "+moveright", "+use", "+speed", "+use", "drpg_menu",
                       HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
            break;
        case OMENU_BBS: // Mission BBS
            HudMessage("\cd%K/%K\c- to navigate\n\cd%K/%K\c- to Adjust Mission Difficulty\n\cd%K\c- to Accept Mission\n\cd%K\c- to Abort Mission\n\cd%K\c- to Exit\n",
                       "+forward", "+back", "+moveleft", "+moveright", "+use", "+attack", "+speed",
                       HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
            break;
        };
    };
};

function void DrawPlayerSprite(int PlayerNum, fixed X, fixed Y)
{
    if (GetCVar("drpg_ext_doomrl"))
    {
        if (PlayerClass(PlayerNum) == 0) // Marine
            PrintSprite("PMARA1", 0, X, Y, 0.05);
        if (PlayerClass(PlayerNum) == 1) // Scout
            PrintSprite("PSCOA1", 0, X + 4.0, Y - 2.0, 0.05);
        if (PlayerClass(PlayerNum) == 2) // Technician
            PrintSprite("PTECA1", 0, X + 2.0, Y - 2.0, 0.05);
        if (PlayerClass(PlayerNum) == 3) // Renegade
            PrintSprite("PRENA1", 0, X + 4.0, Y - 2.0, 0.05);
    }
    else
        PrintSprite("PLAYA1", 0, X, Y + 2.0, 0.05);
};

function void DrawMissionInfo()
{
    SetFont("BIGFONT");
    
    if (Player.Mission.Active)
        switch (Player.Mission.Type)
        {
        case MT_COLLECT:
            HudMessage("Mission: %s\nDifficulty: %s\n", MissionTypes[MT_COLLECT], MissionDifficulties[Player.Mission.Difficulty], HUDMSG_PLAIN, 0, CR_WHITE, 240.1, 20.1, 0.05);
            HudMessage("%d / %d\n", Player.Mission.Current, Player.Mission.Amount, HUDMSG_PLAIN, 0, CR_GREEN, 320.1, 64.0, 0.05);
            PrintSprite(Player.Mission.Item->Icon, 0, 290.4, 64.4, 0.05);
            break;
        case MT_KILL:
            HudMessage("Mission: %s\nDifficulty: %s\nKilled: \ca%d / %d\n\cg%s\n",
                       MissionTypes[MT_KILL], MissionDifficulties[Player.Mission.Difficulty], Player.Mission.Current, Player.Mission.Amount, Player.Mission.Monster->Name,
                       HUDMSG_PLAIN, 0, CR_WHITE, 240.1, 20.1, 0.05);
            break;
        case MT_KILLAURAS:
            HudMessage("Mission: %s\nDifficulty: %s\nKilled: \ca%d / %d\n",
                       MissionTypes[MT_KILLAURAS], MissionDifficulties[Player.Mission.Difficulty], Player.Mission.Current, Player.Mission.Amount,
                       HUDMSG_PLAIN, 0, CR_WHITE, 240.1, 20.1, 0.05);
            break;
        case MT_REINFORCEMENTS:
            HudMessage("Mission: %s\nDifficulty: %s\nKilled: \ca%d / %d\n",
                       MissionTypes[MT_REINFORCEMENTS], MissionDifficulties[Player.Mission.Difficulty], Player.Mission.Current, Player.Mission.Amount,
                       HUDMSG_PLAIN, 0, CR_WHITE, 240.1, 20.1, 0.05);
            break;
        case MT_ASSASSINATION:
            HudMessage("Mission: %s\nDifficulty: %s\n\cg%s\n",
                       MissionTypes[MT_ASSASSINATION], MissionDifficulties[Player.Mission.Difficulty], Player.Mission.Monster->Name,
                       HUDMSG_PLAIN, 0, CR_WHITE, 240.1, 20.1, 0.05);
            break;
        case MT_SECRETS:
            HudMessage("Mission: %s\nDifficulty: %s\nFound: \cf%d / %d\n",
                       MissionTypes[MT_SECRETS], MissionDifficulties[Player.Mission.Difficulty], Player.Mission.Current, Player.Mission.Amount,
                       HUDMSG_PLAIN, 0, CR_WHITE, 240.1, 20.1, 0.05);
            break;
        case MT_ITEMS:
            HudMessage("Mission: %s\nDifficulty: %s\nFound: \cn%d / %d\n",
                       MissionTypes[MT_ITEMS], MissionDifficulties[Player.Mission.Difficulty], Player.Mission.Current, Player.Mission.Amount,
                       HUDMSG_PLAIN, 0, CR_WHITE, 240.1, 20.1, 0.05);
            break;
        case MT_COMBO:
            HudMessage("Mission: %s\nDifficulty: %s\nLargest: \ct%d / %d\n",
                       MissionTypes[MT_COMBO], MissionDifficulties[Player.Mission.Difficulty], Player.Mission.Current, Player.Mission.Amount,
                       HUDMSG_PLAIN, 0, CR_WHITE, 240.1, 20.1, 0.05);
            break;
        };
};

function void DrawToxicityBar(int X, int Y)
{
    // Title
    SetFont("BIGFONT");
    HudMessage("Toxicity: %d%%\n", Player.Toxicity, HUDMSG_PLAIN, 0, CR_GREEN, X + 0.1, Y, 0.05);
    
    // Pixel Color
    str Color;
    if (Player.Toxicity >= 0 && Player.Toxicity <= 24)
        Color = "PGreen";
    if (Player.Toxicity >= 25 && Player.Toxicity <= 49)
        Color = "PYellow";
    if (Player.Toxicity >= 50 && Player.Toxicity <= 74)
        Color = "POrange";
    if (Player.Toxicity >= 75)
        Color = "PRed";
    
    // Beat
    int[] BeatTics = { 8 / (1 + (Player.Toxicity >= 75)); 16 / (1 + (Player.Toxicity >= 50)); 8 / (1 + (Player.Toxicity >= 25)); };
    int TotalTics;
    for (int i = 0; i < 3; i++)
        TotalTics += BeatTics[i];
    if ((Player.ToxicTimer % (35 * (3 - (Player.Toxicity * 0.0275)))) < TotalTics)
    {
        if (Player.ToxicOffset >= -8 && Player.ToxicStage == 0)
            Player.ToxicOffset -= 1 + (Player.Toxicity >= 75);
        if (Player.ToxicOffset <= 8 && Player.ToxicStage == 1)
            Player.ToxicOffset += 1 + (Player.Toxicity >= 50);
        if (Player.ToxicOffset >= 0 && Player.ToxicStage == 2)
            Player.ToxicOffset -= 1 + (Player.Toxicity >= 25);
        
        if (Player.ToxicOffset == -8)
            Player.ToxicStage = 1;
        if (Player.ToxicOffset == 8)
            Player.ToxicStage = 2;
        if (Player.ToxicOffset == 0 && Player.ToxicStage == 2)
            Player.ToxicStage = 0;
    };
    
    // Increase Timer
    Player.ToxicTimer++;
    
    // Draw Pixel
    if (Player.Toxicity >= 100)
        PrintSpriteFade(Color, TOXMETER_ID + (Player.ToxicTimer % 100), X + (Player.ToxicTimer % 100), Y + 16, 0.05, 1.0)
    else
        PrintSpriteFade(Color, TOXMETER_ID + (Player.ToxicTimer % 100), X + (Player.ToxicTimer % 100), Y + 16 + Player.ToxicOffset, 0.05, 1.0);
    
    // Toxicity Penalties
    if (GetCVar("drpg_menuhelp"))
    {
        SetFont("SMALLFONT");
        if (Player.Toxicity > 25)
            HudMessage("- No Regeneration\n", HUDMSG_PLAIN, 0, CR_BRICK, X + 0.1, Y + 32, 0.05);
        if (Player.Toxicity > 50)
            HudMessage("- Energy Loss\n", HUDMSG_PLAIN, 0, CR_BRICK, X + 0.1, Y + 40, 0.05);
        if (Player.Toxicity > 75)
            HudMessage("- Reduced Movement Speed\n", HUDMSG_PLAIN, 0, CR_BRICK, X + 0.1, Y + 48, 0.05);
    };
};

function void ClearToxicityMeter()
{
    Player.ToxicTimer = 0;
    Player.ToxicOffset = 0;
    Player.ToxicStage = 0;
    
    for (int i = TOXMETER_ID; i < TOXMETER_ID + 100; i++)
        ClearMessage(i);
};
