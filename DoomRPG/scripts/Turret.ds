#include "RPG.dh"

#include "Monsters.dh"
#include "Turret.dh"
#include "Utils.dh"

script void TurretMenu() enter
{
    Start:
    
    MonsterStatsPtr Stats = &Monsters[GetMonsterID(Player.Turret.TID)];
    int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
    int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
    int Page;
    int Index;
    
    // Open the Menu
    if (Buttons & BT_USER2 && !(Player.InMenu || Player.InShop || Player.OutpostMenu > 0))
    {
        // You don't have a turret
        if (!Player.Turret.Init && !(OldButtons & BT_USER2))
        {
            SetHudSize(0, 0, false);
            SetFont("BIGFONT");
            HudMessage("You don't have a turret\n", HUDMSG_FADEOUT, 0, CR_RED, 1.5, 0.5, 2.0, 1.0);
            ActivatorSound("menu/error", 127);
            Delay(1);
            goto Start;
        }
        else if (Player.Turret.Init)
        {
            ActivatorSound("menu/click", 127);
            Player.Turret.MenuOpen = true;
        };
    };
    
    // Menu Loop
    while (Player.Turret.MenuOpen)
    {
        SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
        
        // Check Input
        Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
        OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
        
        // Check for release
        if (!(Buttons & BT_USER2))
        {
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            Player.Turret.MenuOpen = false;
        };
        
        // Basic Stats and Commands
        if (Page == TURRETPAGE_MAIN)
        {
            // Turret
            SetHudSize(320, 240, false);
            PrintSprite("OTURA1", 0, 64.0, 64.0, 0.05);
            
            SetHudSize(640, 480, false);
            
            fixed X = 190.0;
            fixed Y = 110.0;
            
            // Turret Upgrade Units
            PrintSprite("TUPGA0", 0, X, Y + 16.0, 0.05);
            SetFont("BIGFONT");
            HudMessage("%d\n", 0, HUDMSG_PLAIN, 0, CR_WHITE, X + 16.0, Y, 0.05);

            // Health
            HudMessage("HP: %d / %d\n", GetActorProperty(Player.Turret.TID, APROP_Health), Stats->HealthMax, HUDMSG_PLAIN, 0, CR_BRICK, X - 114.0 + 0.1, Y + 20.0, 0.05);
            DrawBar("Stim1", X - 114.0, Y + 32.0, (GetActorProperty(Player.Turret.TID, APROP_Health) * Stats->HealthMax) / 100 * 2, true);
            
            // Threat Level
            Y += 24.0;
            for (int i = 1; i <= Player.Turret.Threat; i++)
            {
                if (i == 1)
                    PrintSprite("RankEmb1", 0, X + 36.0 + (i * 7.0), Y + 22.0, 0.05)
                else if (i >= 2 && i <= 4)
                    PrintSprite("RankEmb2", 0, X + 36.0 + (i * 7.0), Y + 22.0, 0.05)
                else if (i == 5 || i == 6)
                    PrintSprite("RankEmb3", 0, X + 36.0 + (i * 7.0), Y + 22.0, 0.05)
                else if (i == 7 || i == 8)
                    PrintSprite("RankEmb4", 0, X + 36.0 + (i * 7.0), Y + 22.0, 0.05)
                else if (i == 9)
                    PrintSprite("RankEmb5", 0, X + 36.0 + (i * 7.0), Y + 22.0, 0.05)
                else if (i == 10)
                    PrintSprite("RankEmb6", 0, X + 36.0 + (i * 7.0), Y + 22.0, 0.05);
            };
            
            // Stat Amounts
            // TODO: This is getting really tiring to repeat, this is the third place now, make this into some sort of generic function or something to draw stats/icons
            SetFont("BIGFONT");
            HudMessage("%d\n", Player.Turret.Level, HUDMSG_PLAIN, 0, CR_WHITE, X - 96.1, Y + 21.0, 0.05);
            HudMessage("%d\n", Player.Turret.Strength, HUDMSG_PLAIN, 0, CR_RED, X - 96.1, Y + 39.0, 0.05);
            HudMessage("%d\n", Player.Turret.Defense, HUDMSG_PLAIN, 0, CR_GREEN, X - 40.1, Y + 39.0, 0.05);
            HudMessage("%d\n", Player.Turret.Vitality, HUDMSG_PLAIN, 0, CR_BRICK, X + 16.1, Y + 39.0, 0.05);
            HudMessage("%d\n", Player.Turret.Energy, HUDMSG_PLAIN, 0, CR_LIGHTBLUE, X + 72.1, Y + 39.0, 0.05);
            HudMessage("%d\n", Player.Turret.Regeneration, HUDMSG_PLAIN, 0, CR_PURPLE, X - 96.1, Y + 58.0, 0.05);
            HudMessage("%d\n", Player.Turret.Agility, HUDMSG_PLAIN, 0, CR_ORANGE, X - 40.1, Y + 58.0, 0.05);
            HudMessage("%d\n", Player.Turret.Capacity, HUDMSG_PLAIN, 0, CR_BLUE, X + 16.1, Y + 58.0, 0.05);
            HudMessage("%d\n", Player.Turret.Luck, HUDMSG_PLAIN, 0, CR_YELLOW, X + 72.1, Y + 58.0, 0.05);
            
            // Stat Icons
            PrintSprite("MonLevel", 0, X - 107.0, Y + 21.0, 0.05);
            PrintSprite("STAT1S", 0, X - 96.0, Y + 54.0, 0.05);
            PrintSprite("STAT2S", 0, X - 40.0, Y + 54.0, 0.05);
            PrintSprite("STAT3S", 0, X + 16.0, Y + 54.0, 0.05);
            PrintSprite("STAT4S", 0, X + 72.0, Y + 54.0, 0.05);
            PrintSprite("STAT5S", 0, X - 96.0, Y + 74.0, 0.05);
            PrintSprite("STAT6S", 0, X - 40.0, Y + 74.0, 0.05);
            PrintSprite("STAT7S", 0, X + 16.0, Y + 74.0, 0.05);
            PrintSprite("STAT8S", 0, X + 71.0, Y + 74.0, 0.05);
            
            // Ammo
            Y += 100.0;
            PrintSprite("AMMOA0", 0, X + 0.1 - 96.0, Y, 0.05);
            PrintSprite("SBOXA0", 0, X + 0.1 - 96.0, Y + 16.0, 0.05);
            PrintSprite("BROKA0", 0, X + 0.1 - 96.0, Y + 46.0, 0.05);
            PrintSprite("CELPA0", 0, X + 0.1 - 96.0, Y + 72.0, 0.05);
        };
        
        // Upgrades
        if (Page == TURRETPAGE_UPGRADE)
        {
        };
        
        // Movement/Positioning
        if (Page == TURRETPAGE_MOVE)
        {
        };
        
        Delay(1);
    };
    
    Delay(1);
    goto Start;
};

acscript void TurretSetOffset(int Angle, int LookAngle, int DistanceOffset)
{
    Player.Turret.AngleOffset += (fixed)Angle / 100.0;
    Player.Turret.LookAngleOffset += (fixed)LookAngle / 100.0;
    Player.Turret.DistanceOffset += (fixed)DistanceOffset;
};

acscript void TurretInit(int TID)
{
    int PlayerTID = GetActorProperty(0, APROP_MasterTID);
    
    SetActivator(PlayerTID);
    
    // You already have a turret
    if (Player.Turret.Init && Player.Turret.Active)
    {
        // TODO: If you picked up an extra turret and you already have one, give random parts
        
        Thing_Remove(TID);
        return;
    };
    
    // Turret Init
    if (!Player.Turret.Init)
    {
        Player.Turret.Active = false;
        
        Player.Turret.TID = 0;
        
        Player.Turret.Level = 1;
        Player.Turret.Threat = 0;
        Player.Turret.Strength = 0;
        Player.Turret.Defense = 0;
        Player.Turret.Vitality = 0;
        Player.Turret.Energy = 0;
        Player.Turret.Regeneration = 0;
        Player.Turret.Agility = 0;
        Player.Turret.Capacity = 0;
        Player.Turret.Luck = 0;
        
        Player.Turret.Aura = 0;
        Player.Turret.AuraTimer = 0;
        
        Player.Turret.BatteryMax = 60 * 2;
        Player.Turret.Battery = Player.Turret.BatteryMax;
        
        Player.Turret.Clip = 100;
        Player.Turret.ClipMax = 200;
        Player.Turret.Shell = 0;
        Player.Turret.ShellMax = 50;
        Player.Turret.Rocket = 0;
        Player.Turret.RocketMax = 50;
        Player.Turret.Plasma = 0;
        Player.Turret.PlasmaMax = 300;
        
        Player.Turret.RefitTimer = 0;
        
        Player.Turret.AngleOffset = -0.125;
        Player.Turret.LookAngleOffset = 0;
        Player.Turret.DistanceOffset = 48;
        
        Player.Turret.Init = true;
    };
    
    // Nametag
    SetActorPropertyString(TID, APROP_Nametag, StrParam("%N\c-'s Turret\n", PlayerNumber() + 1));
    
    // Setup Stats
    Delay(4);
    MonsterStatsPtr Stats = &Monsters[GetMonsterID(TID)];
    Stats->Level = Player.Turret.Level;
    Stats->Strength = Player.Turret.Strength;
    Stats->Defense = Player.Turret.Defense;
    Stats->Vitality = Player.Turret.Vitality;
    Stats->Energy = Player.Turret.Energy;
    Stats->Regeneration = Player.Turret.Regeneration;
    Stats->Agility = Player.Turret.Agility;
    Stats->Capacity = Player.Turret.Capacity;
    Stats->Luck = Player.Turret.Luck;
    Stats->Threat = CalculateMonsterThreatLevel(&Monsters[GetMonsterID(TID)]);
    Stats->NeedReinit = true;
    
    // Set Active and TID
    Player.Turret.Active = true;
    Player.Turret.TID = TID;
    
    // Enter Loop
    SetActivator(TID);
    TurretLoop();
};

script void TurretLoop()
{
    bool Spawned;

    while (true)
    {
        int PlayerTID = GetActorProperty(0, APROP_MasterTID);
        int PlayerID = FindPlayerID(PlayerTID);
        
        // Turret is ded or inactive
        if (GetActorProperty(0, APROP_Health) <= 0 || !Players(PlayerID).Turret.Active)
        {
            Player.Turret.Active = false;
            return;
        };
        
        // Offset
        fixed Angle = GetActorAngle(PlayerTID) + Players(PlayerID).Turret.AngleOffset;
        fixed LookAngle = GetActorAngle(PlayerTID) + Players(PlayerID).Turret.LookAngleOffset;
        fixed X = GetActorX(PlayerTID) + Cos(Angle) * Players(PlayerID).Turret.DistanceOffset;
        fixed Y = GetActorY(PlayerTID) + Sin(Angle) * Players(PlayerID).Turret.DistanceOffset;
        fixed Z = GetActorZ(PlayerTID) + 32.0;
        
        // Set Position/Angle
        SetActorPosition(Players(PlayerID).Turret.TID, X, Y, Z, false);
        SetActorAngle(Players(PlayerID).Turret.TID, LookAngle);
        
        // Teleport Fog
        if (!Spawned)
        {
            SpawnForced("TeleportFog", X, Y, Z, 0, Angle);
            Spawned = true;
        };
        
        /* Drain Battery
           No point in having this active right now with no way to restore the battery implemented yet
        if ((Timer() % 35) == 0)
            Players(PlayerID).Turret.Battery--;
        */
        
        // Battery is drained
        if (Players(PlayerID).Turret.Battery <= 0)
            TurretDespawn();
        
        Delay(1);
    };
};

function void TurretSpawn()
{
    Player.Turret.Active = false;
    GiveInventory("DRPGPortableTurretPickup", 1);
};

function void TurretDespawn()
{
    Player.Turret.Active = false;
    SetActorState(Player.Turret.TID, "Despawn");
};
