#include "RPG.dh"

#include "HUD.dh"
#include "Mission.dh"
#include "Shield.dh"
#include "Skills.dh"
#include "Stats.dh"
#include "Stims.dh"
#include "Utils.dh"

str[SE_MAX] StatusEffects =
{
    "\ccBlind";
    "\cfConfusion";
    "\cqPoison";
    "\cdCorrosion";
    "\ciFatigue";
    "\ctVirus";
    "\cnSilence";
    "\cgCurse";
    "\cvEMP";
    "\cdRadiation";
};

str[] StatusNumerals =
{
    "";
    "I";
    "II";
    "III";
    "IV";
    "V";
};

script void StatHUD() enter
{
    Start:
    
    int StatTokens = CheckInventory("DRPGStatToken");
    fixed X = GetCVarFixed("drpg_stats_x");
    fixed Y = GetCVarFixed("drpg_stats_y");
    fixed Offset = 11.0;
    
    SetHudSize(GetCVar("drpg_hud_width"), GetCVar("drpg_hud_height"), false);
    
    if ((GetCVar("drpg_auto_spend") && StatTokens > 0) || GetCVar("drpg_stats_alwaysshow"))
    {
        // Stat Amounts
        SetFont("BIGFONT");
        HudMessage("%d\n", Player.Strength, HUDMSG_FADEOUT, STAT_ID, CR_RED, X - 96.0 - Offset, Y + 39.0, 5.0, 5.0);
        HudMessage("%d\n", Player.Defense, HUDMSG_FADEOUT, STAT_ID + 1, CR_GREEN, X - 64.0 - Offset, Y + 39.0, 5.0, 5.0);
        HudMessage("%d\n", Player.Vitality, HUDMSG_FADEOUT, STAT_ID + 2, CR_BRICK, X - 32.0 - Offset, Y + 39.0, 5.0, 5.0);
        HudMessage("%d\n", Player.Energy, HUDMSG_FADEOUT, STAT_ID + 3, CR_LIGHTBLUE, X - 0.0 - Offset, Y + 39.0, 5.0, 5.0);
        HudMessage("%d\n", Player.Regeneration, HUDMSG_FADEOUT, STAT_ID + 4, CR_PURPLE, X - 96.0 - Offset, Y + 58.0, 5.0, 5.0);
        HudMessage("%d\n", Player.Agility, HUDMSG_FADEOUT, STAT_ID + 5, CR_ORANGE, X - 64.0 - Offset, Y + 58.0, 5.0, 5.0);
        HudMessage("%d\n", Player.Capacity, HUDMSG_FADEOUT, STAT_ID + 6, CR_BLUE, X - 32.0 - Offset, Y + 58.0, 5.0, 5.0);
        HudMessage("%d\n", Player.Luck, HUDMSG_FADEOUT, STAT_ID + 7, CR_YELLOW, X - 0.0 - Offset, Y + 58.0, 5.0, 5.0);
        
        // Stat Icons
        PrintSpriteFade("STAT1S", STAT_ID + 8, X - 96.0, Y + 54.0, 5.0, 5.0);
        PrintSpriteFade("STAT2S", STAT_ID + 9, X - 64.0, Y + 54.0, 5.0, 5.0);
        PrintSpriteFade("STAT3S", STAT_ID + 10, X - 32.0, Y + 54.0, 5.0, 5.0);
        PrintSpriteFade("STAT4S", STAT_ID + 11, X - 0.0, Y + 54.0, 5.0, 5.0);
        PrintSpriteFade("STAT5S", STAT_ID + 12, X - 96.0, Y + 74.0, 5.0, 5.0);
        PrintSpriteFade("STAT6S", STAT_ID + 13, X - 64.0, Y + 74.0, 5.0, 5.0);
        PrintSpriteFade("STAT7S", STAT_ID + 14, X - 32.0, Y + 74.0, 5.0, 5.0);
        PrintSpriteFade("STAT8S", STAT_ID + 15, X - 0.0, Y + 74.0, 5.0, 5.0);
    };
    
    Delay(1);
    goto Start;
};

script void StatusEffectHUD() enter
{
    Start:
    
    fixed X = GetCVarFixed("drpg_stateffect_x");
    fixed Y = GetCVarFixed("drpg_stateffect_y");
    
    for (int i = 0; i < SE_MAX; i++)
    {
        str Icon;
        str Fill;
        int TimerPercent;
        
        switch (i)
        {
        case SE_BLIND:      Icon = "SE_Blnd";   Fill = "BarSBlnd";    break;
        case SE_CONFUSION:  Icon = "SE_Conf";   Fill = "BarSConf";    break;
        case SE_POISON:     Icon = "SE_Pois";   Fill = "BarSPois";    break;
        case SE_CORROSION:  Icon = "SE_Corr";   Fill = "BarSCorr";    break;
        case SE_FATIGUE:    Icon = "SE_Fati";   Fill = "BarSFati";    break;
        case SE_VIRUS:      Icon = "SE_Viru";   Fill = "BarSViru";    break;
        case SE_SILENCE:    Icon = "SE_Sile";   Fill = "BarSSile";    break;
        case SE_CURSE:      Icon = "SE_Curs";   Fill = "BarSCurs";    break;
        case SE_EMP:        Icon = "SE_EMP";    Fill = "BARSEmp";     break;
        case SE_RADIATION:  Icon = "SE_Radi";   Fill = "BARSRadi";    break;
        };
        
        if (Player.StatusType[i])
        {
            TimerPercent = (int)(((fixed)Player.StatusTimer[i] / (fixed)Player.StatusTimerMax[i]) * 100.0);
            
            SetHudSize(GetCVar("drpg_hud_width"), GetCVar("drpg_hud_height"), false);
            
            // Text
            SetFont("SMALLFONT");
            HudMessage("%s %s\n", StatusEffects[i], StatusNumerals[Player.StatusIntensity[i]], HUDMSG_PLAIN | HUDMSG_ALPHA, 0, CR_WHITE, X + 50.0, Y, 0.05, 0.75);
            
            // Bar
            SetHudClipRect((int)X, (int)(Y - 6), TimerPercent, (int)(Y + 6));
            PrintSpriteAlpha(Fill, 0, X + 0.1, Y, 0.05, 0.75);
            SetHudClipRect(0, 0, 0, 0);
            
            // Increment Y
            Y += 16.0;
        };
    };
    
    Delay(1);
    goto Start;
};

script void ComboHUD() enter
{
    Start:
    
    fixed X = GetCVarFixed("drpg_combo_x");
    fixed Y = GetCVarFixed("drpg_combo_y");
    SetHudSize(GetCVar("drpg_hud_width"), GetCVar("drpg_hud_height"), false);
    
    if (GetCVar("drpg_combo") && Player.Combo > 0)
    {
        int TimerPercent = (int)(((fixed)Player.ComboTimer / (fixed)COMBO_MAX) * 100.0);
        
        // Bar
        DrawBar("Stim1", X, Y, (TimerPercent > 50 ? 50 : TimerPercent), true);
        DrawBar("Stim2", X + 50, Y, TimerPercent - 50, true);
        
        // Combo Info
        SetFont("BIGFONT");
        HudMessage("%d\n", Player.Combo, HUDMSG_PLAIN, 0, CR_PURPLE, X + 0.1, Y + 10.0, 0.05);
        if (Player.XPGained > 0)
            HudMessage("%d\n", Player.XPGained, HUDMSG_PLAIN, 0, CR_WHITE, X + 0.1, Y + 22.0, 0.05);
        if (Player.RankGained > 0)
            HudMessage("%d\n", Player.RankGained, HUDMSG_PLAIN, 0, CR_YELLOW, X + 0.1, Y + 34.0, 0.05);
        if (Player.BonusGained > 0)
            HudMessage("%d\n", Player.BonusGained, HUDMSG_PLAIN, 0, CR_GREEN, X + 0.1, Y + 46.0, 0.05);
    };
    
    Delay(1);
    goto Start;
};

script void SkillHUD() enter
{
    Start:
    
    fixed X = GetCVarFixed("drpg_skill_x");
    fixed Y = GetCVarFixed("drpg_skill_y");
    
    SetHudSize(GetCVar("drpg_hud_width"), GetCVar("drpg_hud_height"), false);
    
    if (!(GetCVar("drpg_menu_hideskills") && (Player.InMenu || Player.InShop || Player.OutpostMenu > 0)))
    {
        // Current Skill
        if (Player.SkillCategory[Player.SkillSelected] != -1 && Player.SkillIndex[Player.SkillSelected] != -1)
        {
            SkillPtr CurrentSkill = &Skills[Player.SkillCategory[Player.SkillSelected]][Player.SkillIndex[Player.SkillSelected]];
            SkillLevelInfo *SkillLevel = &Player.SkillLevel[Player.SkillCategory[Player.SkillSelected]][Player.SkillIndex[Player.SkillSelected]];
            
            int Cost = ScaleEPCost(CurrentSkill->Cost * SkillLevel->CurrentLevel * Player.SkillCostMult);
            int Color = CR_LIGHTBLUE;
            
            if (Player.EP < Cost)
                Color = CR_RED;
            
            // Cost
            SetFont("SMALLFONT");
            HudMessage("%d\n", Cost, HUDMSG_PLAIN, 0, Color, X, Y - 16.0, 0.05);
            
            // Level
            HudMessage("%d/%d\n", SkillLevel->CurrentLevel, SkillLevel->Level, HUDMSG_PLAIN, 0, CR_GREEN, X, Y + 16.0, 0.05);
            
            // Icon
            PrintSprite(CurrentSkill->Icon, 0, X, Y, 0.05);
        };
    };
    
    Delay(1);
    goto Start;
};

script void StimHUD() enter
{
    static int[STAT_MAX] StatColors =
    {
        CR_RED; CR_GREEN; CR_BRICK; CR_LIGHTBLUE;
        CR_PURPLE; CR_ORANGE; CR_BLUE; CR_GOLD;
    };
    
    Start:
    
    fixed X = GetCVarFixed("drpg_stim_x");
    fixed Y = GetCVarFixed("drpg_stim_y");
    
    SetHudSize(GetCVar("drpg_hud_width"), GetCVar("drpg_hud_height"), false);
    
    // Stat Boosts
    if (Player.Stim.Timer > 0)
    {
        int TimerPercent = (int)(((fixed)Player.Stim.Timer / (fixed)Player.Stim.TimerMax) * 100.0);
        
        // Time Bar
        DrawBar("Stim10", X, Y, TimerPercent, true);
        
        // Time
        SetFont("BIGFONT");
        HudMessage("%s\n", FormatTime(Player.Stim.Timer), HUDMSG_PLAIN | HUDMSG_ALPHA, 0, CR_WHITE, X + 110.1, Y, 0.05, 0.75);
        
        // Icons
        for (int i = 0; i < StimStatsEnd; i++)
            if (Player.Stim.ActiveBonus[i])
            {
                SetFont("BIGFONT");
                HudMessage("+%d\n", Player.Stim.Last[i], HUDMSG_PLAIN | HUDMSG_ALPHA, 0, StatColors[i], X + 8.0 + ((i % 4) * 36.0), Y + 16.0 + ((i / 4) * 24.0), 0.05, 0.75);
                PrintSpritePulse(StrParam("STAT%dS\n", i + 1), 0, X + 20.0 + ((i % 4) * 36.0), Y + 32.0 + ((i / 4) * 24.0), 0.75, 32.0, 0.25);
            };
    };
        
    // Powerups
    for (int i = StimPowerupStart; i < StimPowerupEnd; i++)
        if (Player.Stim.ActiveBonus[i] && Player.Stim.PowerupTimer[i] > 0)
        {
            int TimerPercent = (int)(((fixed)Player.Stim.PowerupTimer[i] / (fixed)Player.Stim.PowerupTimerMax[i]) * 100.0);
            SetFont("SMALLFONT");
            HudMessage("%s\n", FormatTime(Player.Stim.PowerupTimer[i]), HUDMSG_PLAIN | HUDMSG_ALPHA, 0, CompoundColors[i], X + 112.1, Y + 56.0, 0.05, 0.75);
            DrawBar(StrParam("Stim%d\n", i + 1), X, Y + 56.0, TimerPercent, true);
            Y += 8.0;
        };
    
    Delay(1);
    goto Start;
};

script void MissionHUD() enter
{
    Start:
    
    int OldAmount = Player.Mission.Current;
    fixed X = GetCVarFixed("drpg_mission_x");
    fixed Y = GetCVarFixed("drpg_mission_y");
    
    Delay(1);
    
    if (Player.Mission.Active && Player.Mission.Current != OldAmount)
    {
        SetHudSize(GetCVar("drpg_hud_width"), GetCVar("drpg_hud_height"), false);
        SetFont("BIGFONT");
        
        switch (Player.Mission.Type)
        {
        case MT_COLLECT:
            HudMessage("%d / %d\n", Player.Mission.Current, Player.Mission.Amount, HUDMSG_FADEOUT, MISSION_ID, CR_GREEN, X + 0.1, Y, 2.0, 1.0);
            PrintSpriteFade(Player.Mission.Item->Icon, MISSION_ID + 1, X - 40.0 + 0.4, Y + 0.4, 2.0, 1.0);
            break;
        case MT_KILL:
            HudMessage("\cg%s\n\c-%d / %d\n", Player.Mission.Monster->Name, Player.Mission.Current, Player.Mission.Amount, HUDMSG_FADEOUT, MISSION_ID, CR_BRICK, X + 0.4, Y, 2.0, 1.0);
            break;
        case MT_KILLAURAS:
            HudMessage("Uniques: %d / %d\n", Player.Mission.Current, Player.Mission.Amount, HUDMSG_FADEOUT, MISSION_ID, CR_BRICK, X, Y, 2.0, 1.0);
            break;
        case MT_REINFORCEMENTS:
            HudMessage("Reinforcements: %d / %d\n", Player.Mission.Current, Player.Mission.Amount, HUDMSG_FADEOUT, MISSION_ID, CR_BRICK, X, Y, 2.0, 1.0);
            break;
        case MT_SECRETS:
            HudMessage("Secrets: %d / %d\n", Player.Mission.Current, Player.Mission.Amount, HUDMSG_FADEOUT, MISSION_ID, CR_GOLD, X, Y, 2.0, 1.0);
            break;
        case MT_ITEMS:
            HudMessage("Items: %d / %d\n", Player.Mission.Current, Player.Mission.Amount, HUDMSG_FADEOUT, MISSION_ID, CR_LIGHTBLUE, X, Y, 2.0, 1.0);
            break;
        case MT_COMBO:
            HudMessage("Combo: %d / %d\n", Player.Mission.Current, Player.Mission.Amount, HUDMSG_FADEOUT, MISSION_ID, CR_PURPLE, X, Y, 2.0, 1.0);
            break;
        };
    };
    
    goto Start;
};

script void AuraTimerHUD() enter
{
    Start:
    
    bool HaveAura = false;
    fixed Offset = 0;
    
    // Determine if we have any Auras or not
    for (int i = 0; i < AURA_MAX; i++)
        if (Player.Aura[i] || Player.TeamAura)
        {
            HaveAura = true;
            break;
        };
    
    while (HaveAura)
    {
        fixed X = GetCVarFixed("drpg_auratimer_x");
        fixed Y = GetCVarFixed("drpg_auratimer_y");
        int AuraCount = 0;
        int AuraAdd = 0;
        int Radius = 16;
        
        SetHudSize(GetCVar("drpg_hud_width"), GetCVar("drpg_hud_height"), false);
        
        // Timer
        if (Player.AuraTimer > 0)
        {
            SetFont("BIGFONT");
            HudMessage("%s\n", FormatTime(Player.AuraTimer), HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
        };
        
        // Calculate number of active Auras
        for (int i = 0; i < AURA_MAX; i++)
            if (Player.Aura[i])
                AuraCount++;
        
        // Main Icon
        if (Player.AuraTimer > 0 && AuraCount >= 9)
            PrintSpritePulse("AuraBlac", 0, X, Y + 32.0, 0.75, 64.0, 0.25)
        else if (Player.AuraTimer > 0)
            PrintSpritePulse("Aura", 0, X, Y, 0.75, 64.0, 0.25);
        
        // Team Aura Icon
        if (Player.TeamAura)
            PrintSpritePulse("SAURK0", 0, X + 18.0, Y + 24.0, 0.75, 64.0, 0.25);
        
        // Orbiting Icons
        for (int i = 0; i < AURA_MAX; i++)
            if (Player.Aura[i])
            {
                fixed Angle = -0.25 + ((1.0 / AuraCount) * AuraAdd++) + Offset;
                fixed XOff = X + (Radius * Cos(Angle));
                fixed YOff = Y + (Radius * Sin(Angle)) + 32.0;
                PrintSpriteAlpha(AuraIcons[i], 0, (int)XOff, (int)YOff, 0.05, 0.75);
            };
        
        // Offset
        Offset += 0.0025;
        
        // Check and remove the Aura when the timer is up
        if (Player.AuraTimer <= 0 && !Player.TeamAura)
            HaveAura = false;
        
        Delay(1);
    };
    
    Delay(1);
    goto Start;
};

script void DamageHUD(int Loss)
{
    if (GetCVar("drpg_damagenumbers_hud"))
    {
        int Color = CR_WHITE;
        str Text = "";
        fixed Time;
        
        // Size
        if (Loss == 1)
            SetFont("SMALLFONT")
        else
            SetFont("BIGFONT");
        
        // Color
        switch (Player.DamageType)
        {
        case DT_NORMAL:                     Color = CR_WHITE;       break;
        case DT_TOXIC:                      Color = CR_GREEN;       break;
        case DT_MELEE:                      Color = CR_GREY;        break;
        case DT_FIRE:                       Color = CR_RED;         break;
        case DT_PLASMA: case DT_LIGHTNING:  Color = CR_LIGHTBLUE;   break;
        };
        
        if (Loss > 0 && Loss < SHIELD_HEALTH - Player.HealthMax - Loss)
        {
            if (Loss >= Player.HealthMax / 2) // Critical Hit
            {
                Text = StrParam("%s\cgCRITICAL\n\n", Text);
                Time += 1.0;
            };
            
            // Status Effect
            if (Player.StatusTypeHUD > 0)
            {
                Text = StrParam("%s%s %s\n\n", Text, StatusEffects[Player.StatusTypeHUD], StatusNumerals[Player.StatusIntensity[Player.StatusTypeHUD]]);
                Player.StatusTypeHUD = 0;
                Time += 1.0;
            };
            
            // Loss
            Text = StrParam("%s%d\n", Text, Loss);
            
            // Display
            HudMessage("%s\n", Text, HUDMSG_FADEOUT, 0, Color, 1.4 + RandomFixed(0.0, 0.4), 0.6 + RandomFixed(0.0, 0.3), 0.5, 1.0 + Time);
        };
    };
};
