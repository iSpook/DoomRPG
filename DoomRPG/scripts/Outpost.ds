#include "RPG.dh"

#include "Arena.dh"
#include "Augs.dh"
#include "ItemData.dh"
#include "Map.dh"
#include "Menu.dh"
#include "Minigame.dh"
#include "Mission.dh"
#include "Outpost.dh"
#include "Shop.dh"
#include "Stats.dh"
#include "Skills.dh"
#include "Utils.dh"

// Globals
static int[ITEM_CATEGORIES][ITEM_MAX]   GlobalLocker;
static bool                             ShopSpecialBought;
static int                              ShopSpecialTimer;
static ItemInfo ItemSpace *             ShopSpecialItem;
static int                              OutpostNotoriety;

// Spawn Spots and TIDs
int ShopSpecialTID = 1001;
int SecretTeleportTID = 1010;
int MarineSpotTID = 1300;
int NotorietySpotTID = 1301;
int MarineTID = 1400;
int MarineMaxTID = 1419;
int MarineBossTID = 1421;
int TurretTID = 1450;
int OutpostAlarmTID = 1600;
int BossSpotTID = 1475;
int ForcefieldID = 1500;
int BlastDoorID = 1501;
int GeneratorTID = 1510;
int EntrySectorID = 200;
int HallTeleportSpotID = 1601;

// Timers
int ForcefieldTimer = 35 * 60 * GameSkill(); // 1 Minute per skill increment

// Choices
int LevelChoice = 0;
int SkillChoice = 0;
int WaveChoice = 1;

// Flags
bool MarinesHostile = false;
bool PowerOut = false;
bool BossDead = false;
bool Invasion = false;

// Base costs for wireless page access
int[ITEM_CATEGORIES] LockerWirelessCosts =
{
    100;    // Weapons
    1;      // Ammo
    50;     // Health
    50;     // Armor
    50;     // Powerups
    200;    // Tokens
    100;    // Shield Parts
    100;    // Stims/Augmentations
    10;     // Loot
    50;     // Mod Packs
    50;     // Boots
};

acscript void EnterOutpost()
{
    InBase = true;
    
    // Assign the current level to the level choice
    LevelChoice = LastVisitedLevel;
    
    // Use alternate music if you have a high Notoriety
    if (OutpostNotoriety >= 3)
        SetOutpostMusic(OUTPOST_MUSIC_NORMAL, false, 2);
    
    // Assign the current skill level to the skill choice
    SkillChoice = GameSkill() - 1;
    
    // Set the current wave to the max wave
    ArenaWave = ArenaMaxWave;
    
    // Spawn the Shop Special item
    SpawnShopSpecialItem();
    
    // Make the Portable Turret not attack Outpost Turrets
    SetActorProperty(TurretTID, APROP_Friendly, true);
    
    // Boss Placement
    PlaceBoss();
    
    // Get new Missions
    PopulateMissions();
};

acscript void RegenArea(int ID)
{
    // If you're dead, terminate
    if (ClassifyActor(Player.TID) & ACTOR_DEAD) return;
    
    // Health
    if (ID == 1)
    {
        int HealthCharges;
        bool DoMessage = false;
        
        if (CheckInventory("DRPGCredits") > 0 && Player.ActualHealth < Player.HealthMax)
        {
            HealthCharges = Player.HealthMax - Player.ActualHealth;
            if (HealthCharges > CheckInventory("DRPGCredits"))
                HealthCharges = CheckInventory("DRPGCredits");
            
            AddHealthDirect(HealthCharges, 100);
            TakeInventory("DRPGCredits", HealthCharges);
            DoMessage = true;
        };
        
        if (CheckInventory("DRPGCredits") >= 5 && Player.Toxicity > 0)
        {
            HealthCharges = Player.Toxicity;
            if (HealthCharges > CheckInventory("DRPGCredits") / 5)
                HealthCharges = CheckInventory("DRPGCredits") / 5;
            
            ClearToxicityMeter();
            Player.Toxicity -= HealthCharges;
            TakeInventory("DRPGCredits", HealthCharges * 5);
            DoMessage = true;
        };
        
        if (CheckInventory("DRPGCredits") >= 50 && HaveStatusEffect())
        {
            ClearStatusEffects();
            TakeInventory("DRPGCredits", 50);
            DoMessage = true;
        };
        
        if (DoMessage)
        {
            SetFont("BigFont");
            HudMessage("Health restored\n", HUDMSG_FADEOUT, 1, CR_BRICK, 0.5, 0.33, 2.0, 0.5);
            FadeRange(255, 0, 0, 0.5, 255, 0, 0, 0.0, 1.0);
            ActivatorSound("regen/health", 127);
        };
    };
    
    // Armor
    if (ID == 2)
    {
        if (CheckInventory("Armor") >= GetArmorInfo(ARMORINFO_SAVEAMOUNT))
            return;
        
        int ArmorPercent = CheckInventory("Armor") * 100 / GetArmorInfo(ARMORINFO_SAVEAMOUNT);
        int ArmorFee = (ArmorPercent / 5) * 5;
        if (ArmorFee < 5)
            ArmorFee = 5;
        
        if (CheckInventory("DRPGCredits") < ArmorFee)
        {
            SetFont("BigFont");
            HudMessage("You need %d credits to repair armor\n", ArmorFee, HUDMSG_FADEOUT, 1, CR_RED, 0.5, 0.33, 2.0, 0.5);
            ActivatorSound("menu/error", 127);
            return;
        };
        
        GiveInventory(GetArmorInfoString(ARMORINFO_CLASSNAME), 1);
        TakeInventory("DRPGCredits", ArmorFee);
        
        SetFont("BigFont");
        HudMessage("Armor repaired\n", HUDMSG_FADEOUT, 1, CR_GREEN, 0.5, 0.33, 2.0, 0.5);
        FadeRange(0, 255, 0, 0.5, 0, 255, 0, 0.0, 1.0);
        ActivatorSound("regen/armor", 127);
    };
    
    // EP
    if (ID == 3)
    {
        if (CheckInventory("DRPGCredits") < 1 || Player.EP >= Player.EPMax) return;
        
        int EPCharges = (Player.EPMax - Player.EP) / 5;
        if (Player.EP % 5 > 0)
            EPCharges++;
        if (CheckInventory("DRPGCredits") < EPCharges)
            EPCharges = CheckInventory("DRPGCredits");
        
        int EPGive = EPCharges * 5;
        
        if (Player.EP + EPGive > Player.EPMax)
            EPGive = Player.EPMax - Player.EP;
        
        Player.EP += EPGive;
        
        TakeInventory("DRPGCredits", EPCharges);
        
        SetFont("BigFont");
        HudMessage("EP restored\n", HUDMSG_FADEOUT, 1, CR_LIGHTBLUE, 0.5, 0.33, 2.0, 0.5);
        FadeRange(0, 255, 255, 0.5, 0, 255, 255, 0.0, 1.0);
        ActivatorSound("regen/ep", 127);
    };
    
    // Augmentation Battery
    if (ID == 4)
    {
        if (CheckInventory("DRPGCredits") < 10 || Player.Augs.Battery >= Player.Augs.BatteryMax) return;
        
        int BatteryCharges = Player.Augs.BatteryMax - Player.Augs.Battery;
        if (CheckInventory("DRPGCredits") / 10 < BatteryCharges)
            BatteryCharges = CheckInventory("DRPGCredits") / 10;
        
        AddBattery(BatteryCharges);
        TakeInventory("DRPGCredits", BatteryCharges * 10);
        
        SetFont("BigFont");
        HudMessage("Augmentation Battery Recharged\n", HUDMSG_FADEOUT, 1, CR_YELLOW, 0.5, 0.33, 2.0, 0.5);
        FadeRange(255, 255, 0, 0.5, 255, 255, 0, 0.0, 1.0);
        ActivatorSound("regen/battery", 127);
    };
};

acscript void LevelTransport()
{
    // if you're already in a menu, terminate
    if (Player.OutpostMenu == OMENU_LEVELTRANSPORT) return;
    
    // If the Marines are hostile and the bosses aren't dead, terminate
    if (MarinesHostile && ThingCount(0, MarineBossTID) > 0) return;
    
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
    Player.OutpostMenu = OMENU_LEVELTRANSPORT;
    
    SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);
    
    while (true)
    {
        // Stop Underflow
        if (LevelChoice < 0)
            LevelChoice = 0;
        
        // And Overflow
        if (LevelChoice >= KnownLevels.Position)
            LevelChoice = KnownLevels.Position - 1;
        
        LevelInfo *TeleDest = &((LevelInfo *)KnownLevels.Data)[LevelChoice];
        
        // Text
        SetFont("BIGFONT");
        HudMessage("Level Transporter\n", HUDMSG_FADEOUT, MENU_ID, CR_WHITE, 32.1, 32.1, 0.05, 0.5);
        
        int TitleColor = CR_GOLD;
        if (TeleDest->NeedsRealInfo)
            TitleColor = CR_RED
        else if (TeleDest->AllBonus)
            TitleColor = CR_GREEN;
        HudMessage("%s\n", TeleDest->NiceName, HUDMSG_FADEOUT, MENU_ID + 1, TitleColor, 32.1, 64.1, 0.05, 0.5);
        SetFont("SMALLFONT");
        HudMessage("%s\n", TeleDest->LumpName, HUDMSG_FADEOUT, MENU_ID + 2, CR_ORANGE, 32.1, 80.1, 0.05, 0.5);
        
        if (!TeleDest->NeedsRealInfo)
        {
            int KillColor = CR_BRICK;
            if (TeleDest->KillBonus && Timer() & 16)
                KillColor = CR_GREEN;
            int ItemColor = CR_LIGHTBLUE;
            if (TeleDest->ItemsBonus && Timer() & 16)
                ItemColor = CR_GREEN;
            int SecretColor = CR_YELLOW;
            if (TeleDest->SecretsBonus && Timer() & 16)
                SecretColor = CR_GREEN;
            int ParColor = CR_GOLD;
            if (TeleDest->ParBonus && TeleDest->Par > 0 && Timer() & 16)
                ParColor = CR_GREEN;
            
            if (TeleDest->MaxTotalMonsters > 0)
                HudMessage("Kills: %d / %d (%d%%)\n", TeleDest->MaxMonstersKilled, TeleDest->MaxTotalMonsters, TeleDest->MaxMonsterPercentage, HUDMSG_FADEOUT, MENU_ID + 3, KillColor, 32.1, 96.1, 0.05, 0.5);
            if (TeleDest->MaxTotalItems > 0)
                HudMessage("Items: %d / %d (%d%%)\n", TeleDest->MaxItemsFound, TeleDest->MaxTotalItems, TeleDest->MaxItemPercentage, HUDMSG_FADEOUT, MENU_ID + 4, ItemColor, 32.1, 104.1, 0.05, 0.5);
            if (TeleDest->MaxTotalSecrets > 0)
                HudMessage("Secrets: %d / %d (%d%%)\n", TeleDest->MaxSecretsFound, TeleDest->MaxTotalSecrets, TeleDest->MaxSecretPercentage, HUDMSG_FADEOUT, MENU_ID + 5, SecretColor, 32.1, 112.1, 0.05, 0.5);
            
            if (TeleDest->Par > 0)
                HudMessage("Par Time: %s\n", FormatTime(TeleDest->Par * 35), HUDMSG_FADEOUT, MENU_ID + 6, ParColor, 32.1, 128.1, 0.05, 0.5);
            if (TeleDest->ShortestTime < 0x7FFFFFFF)
                HudMessage("Completion Time: %s\n", FormatTime(TeleDest->ShortestTime * 35), HUDMSG_FADEOUT, MENU_ID + 7, ParColor, 32.1, 136.1, 0.05, 0.5)
            else
                HudMessage("Completion Time: \c[Red]N/A\n", HUDMSG_FADEOUT, MENU_ID + 7, ParColor, 32.1, 136.1, 0.05, 0.5);
            
            SetFont("BIGFONT");
            str AreaText = "No anomalies detected";
            switch (TeleDest->Event)
            {
            case MAPEVENT_NONE:
            default:
                break;
            case MAPEVENT_MEGABOSS:
                AreaText = "\c[Grey]Detected: Unknown Hostile Lifeform\n\cgUse extreme caution when engaging target.\c-\nA quarantine has been issued for this area.";
                break;
            case MAPEVENT_TOXICHAZARD:
                AreaText = "\c[DarkGreen]Detected: High Radiation Levels\c-\nPlease wear protective clothing when traversing this location.";
                break;
            case MAPEVENT_NUCLEARBOMB:
                AreaText = "\c[Orange]Detected: Armed Nuclear Device\c-\nDo not stay within the detonation area.";
                break;
            case MAPEVENT_LOWPOWER:
                AreaText = "\c[Red]Scan failed due to insufficient power\c-\nPlease contact the maintenance team for replacement power cell.";
                break;
            case MAPEVENT_ALLAURAS:
                AreaText = "\c[Yellow]Detected: Abnormal Energy Signature\c-\nAnomalies may occur within this area.";
                break;
            case MAPEVENT_ONEMONSTER:
                AreaText = StrParam("\c[LightBlue]Detected: Anomalous Lifeform Distribution\n\c[Red]Last seen: %s\n", TeleDest->SelectedMonster->Name);
                break;
            case MAPEVENT_HELLUNLEASHED:
                AreaText = "\ciWARNING: \cgThis area is an active battle front. Take preparatory measures before engaging the enemy.";
                break;
            case MAPEVENT_BONUS_RAINBOWS:
                AreaText = "\c[Red]Scan \c[Green]failed \c[Purple]due \c[White]to \c[Blue]internal \c[Grey]software \c[Orange]failure";
                break;
            case MAPEVENT_DRLA_NIGHTMARE:
                AreaText = "\c[Red]Scan failed due to internal mechanism corruption";
                break;
            case MAPEVENT_DRLA_TECHNOPHOBIA:
                AreaText = "\c[Red]Scan failed due to electromagnetic interference";
                break;
            case MAPEVENT_DRLA_ARMAGEDDON:
                AreaText = "\c[Red]Scan failed - Area scanning mechanism destroyed";
                break;
            };
            
            HudMessage("Area Status\n", HUDMSG_FADEOUT, MENU_ID + 8, CR_GREEN, 32.1, 152.1, 0.05, 0.5);
            SetFont("SMALLFONT");
            HudMessage("%s\n", AreaText, HUDMSG_FADEOUT, MENU_ID + 9, CR_WHITE, 32.1, 168.1, 0.05, 0.5);
        };
        
        // Input
        int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
        int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);

        if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && LevelChoice > 0)
        {
            ActivatorSound("menu/move", 127);
            LevelChoice--;
        };
        if (Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT && LevelChoice > 0)
        {
            ActivatorSound("menu/move", 127);
            LevelChoice -= 10;
        };
        if (Buttons == BT_BACK && OldButtons != BT_BACK && LevelChoice < KnownLevels.Position - 1)
        {
            ActivatorSound("menu/move", 127);
            LevelChoice++;
        };
        if (Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT && LevelChoice < KnownLevels.Position - 1)
        {
            ActivatorSound("menu/move", 127);
            LevelChoice += 10;
        };
        if (Buttons == BT_USE && OldButtons != BT_USE)
        {
            // Special handling for Marine Hostility and Emergency Power
            if (MarinesHostile || PowerOut)
            {
                bool IsTechnician = (GetCVar("drpg_ext_doomrl") && PlayerClass(PlayerNumber()) == 2);
                int TransportTimerMax = (35 * (5 + GameSkill() + PlayerCount())) / (IsTechnician ? 2 : 1);
                int TransportTimer = TransportTimerMax;
                
                // Setup power transfer
                SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
                SetPlayerProperty(0, 1, PROP_FROZEN);
                Player.OutpostMenu = 0;
                PlaySound(0, "transfer/loop", CHAN_BODY, 1.0, true, ATTN_NORM);
                
                // Power transfer loop
                while (TransportTimer > 0)
                {
                    // Calculate percentage complete and input
                    int TransportPercent = (int)Abs(100 - ((fixed)TransportTimer / (TransportTimerMax)) * 100.0);
                    Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
                    
                    // Transfer is cancelled either by death or input
                    if (ClassifyActor(Player.TID) & ACTOR_DEAD || Buttons & BT_SPEED)
                    {
                        PlaySound(0, "transfer/fail", CHAN_BODY, 1.0, false, ATTN_NONE);
                        SetPlayerProperty(0, 0, PROP_FROZEN);
                        return;
                    };
                    
                    // Draw transfer bar/text
                    SetHudSize(320, 240, false);
                    SetFont("SMALLFONT");
                    HudMessage("Transferring Power: %d%%\n", TransportPercent, HUDMSG_PLAIN, 0, CR_GREEN, 160.4, 200.4, 0.05);
                    SetHudClipRect(60, 200 - 6, (int)((fixed)TransportPercent * 2.02), 200 + 6);
                    PrintSprite("FillBar", 0, 160.4, 200.4, 0.05);
                    SetHudClipRect(0, 0, 0, 0);
                    
                    // Decrement timer
                    TransportTimer--;
                    Delay(1);
                };
                
                PlaySound(0, "transfer/complete", CHAN_BODY, 1.0, false, ATTN_NONE);
                Delay(10);
            };
            
            Player.OutpostMenu = 0;
            FadeRange(255, 255, 255, 0.0, 255, 255, 255, 1.0, 2.0);
            
            Delay(35 * 2.5);
            
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            SetPlayerProperty(0, 0, PROP_FROZEN);
            InBase = false;
            Transported = true;
            
            if (BossDead) OutpostNotoriety++;
            ChangeLevel(TeleDest->LumpName, 0, CHANGELEVEL_NOINTERMISSION, -1);
            break;
        };
        if (Buttons == BT_SPEED)
        {
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            Player.OutpostMenu = 0;
            return;
        };
        
        Delay(1);
    };
};

acscript void SkillComputer()
{
    // If Marines are hostile or the power is out, terminate
    if (MarinesHostile || PowerOut) return;
    
    // Terminate if you aren't the Arbitrator
    if (InMultiplayer && !Arbitrator) return;
    
    // if you're already in a menu, terminate
    if (Player.OutpostMenu == OMENU_SKILLCOMPUTER) return;
    
    // DoomRL Compatibility
    if (GetCVar("drpg_ext_doomrl"))
        SkillLevels[5] = "Armageddon";
    
    ActivatorSound("misc/edgar", 127);
    
    Player.OutpostMenu = OMENU_SKILLCOMPUTER;
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
    
    while (true)
    {
        // Draw the background
        if (GetCVar("drpg_menudim"))
            FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);

        // Text
        SetFont("BIGFONT");
        HudMessage("Skill Level: \cg%d (%s)\n", SkillChoice + 1, SkillLevels[SkillChoice],
                   HUDMSG_FADEOUT, MENU_ID, CR_GOLD, 0.5, 0.5, 0.05, 0.5);
        
        // Input
        int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
        int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);

        if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && SkillChoice > 0)
        {
            ActivatorSound("menu/move", 127);
            SkillChoice--;
        };
        if (Buttons == BT_BACK && OldButtons != BT_BACK && SkillChoice < (GetCVar("drpg_ext_doomrl") ? 5 : 4))
        {
            ActivatorSound("menu/move", 127);
            SkillChoice++;
        };
        if (Buttons == BT_USE && OldButtons != BT_USE)
        {
            SetSkill(SkillChoice);
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            Player.OutpostMenu = 0;
            return;
        };
        if (Buttons == BT_SPEED)
        {
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            Player.OutpostMenu = 0;
            return;
        };
        
        Delay(1);
    };
};

acscript void ToggleArena()
{
    // If Marines are hostile or the power is out, terminate
    if (MarinesHostile || PowerOut) return;
    
    // If you try to toggle the Arena and you aren't the Arena Arbitrator, terminate
    if (InMultiplayer && (ArenaPlayerNumber >= 0 && PlayerNumber() != ArenaPlayerNumber)) return;
    
    ArenaActive = !ArenaActive;
    
    SetFont("BIGFONT");
    
    if (ArenaActive)
    {
        ActivatorSound("arena/activate", 127);
        HudMessage("Arena Active\n", HUDMSG_FADEOUT, MENU_ID, CR_GREEN, 0.5, 0.5, 2.0, 1.0);
        ArenaPlayerNumber = PlayerNumber();
    }
    else
    {
        ActivatorSound("arena/deactivate", 127);
        HudMessage("Arena Inactive\n", HUDMSG_FADEOUT, MENU_ID, CR_RED, 0.5, 0.5, 2.0, 1.0);
        ArenaPlayerNumber = -1;
    };
};

acscript void PassArenaLine()
{
    // If Marines are hostile or the power is out, terminate
    if (MarinesHostile || PowerOut) return;
    
    if (InMultiplayer && (ArenaPlayerNumber >= 0 && PlayerNumber() != ArenaPlayerNumber)) return;
    
    if (ArenaActive)
    {
        Ceiling_LowerToFloor(99, 64);
        ArenaState = ARENA_READY;
        ArenaLoop();
    };
};

acscript void SelectArenaWave()
{
    // If Marines are hostile or the power is out, terminate
    if (MarinesHostile || PowerOut) return;
    
    // if you're already in a menu, terminate
    if (Player.OutpostMenu == OMENU_TOKENCONVERTER) return;
    
    if (InMultiplayer && (ArenaPlayerNumber >= 0 && PlayerNumber() != ArenaPlayerNumber)) return;

    ActivatorSound("menu/move", 127);
    Player.OutpostMenu = OMENU_WAVESELECTOR;

    WaveChoice = ArenaMaxWave;
    
    Delay(1);

    while (true)
    {
        SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
        
        // Draw the background
        if (GetCVar("drpg_menudim"))
            FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
        
        // Text
        SetFont("BIGFONT");
        HudMessage("Wave: \cd%d\c-/\cd%d\n", WaveChoice, ArenaMaxWave,
                   HUDMSG_FADEOUT, MENU_ID, CR_WHITE, 0.5, 0.5, 0.05, 1.0);
        
        // Input
        int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
        int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);

        if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && WaveChoice > 1)
        {
            ActivatorSound("menu/move", 127);
            WaveChoice--;
        };
        if (Buttons == BT_BACK && OldButtons != BT_BACK && WaveChoice < ArenaMaxWave)
        {
            ActivatorSound("menu/move", 127);
            WaveChoice++;
        };
        if ((Buttons == BT_LEFT && OldButtons != BT_LEFT) ||
            (Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT))
        {
            ActivatorSound("menu/move", 127);
            WaveChoice -= 10;
            if (WaveChoice <= 0) WaveChoice = 1;
        };
        if ((Buttons == BT_RIGHT && OldButtons != BT_RIGHT) ||
            (Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT))
        {
            ActivatorSound("menu/move", 127);
            WaveChoice += 10;
            if (WaveChoice > ArenaMaxWave) WaveChoice = ArenaMaxWave;
        };
        if (Buttons == BT_USE && OldButtons != BT_USE)
        {
            if (WaveChoice > 1)
                ArenaWave = WaveChoice - 1
            else
                ArenaWave = 1;
            
            ActivatorSound("menu/move", 127);
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            Player.OutpostMenu = 0;
            return;
        };
        if (Buttons == BT_SPEED)
        {
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            Player.OutpostMenu = 0;
            return;
        };
        
        Delay(1);
    };
};

acscript void PissOffMarines(bool Steal)
{
    int ForcefieldState;
    
    // If the Marines are already hostile, terminate
    if (MarinesHostile) return;
    
    // Set flag
    MarinesHostile = true;
    
    // Demotion
    if (Player.RankLevel > 0 && Steal)
        Player.Rank = RankTable[Player.RankLevel - 2];
    
    // Iterate Marines pre-Delay
    if (Steal)
        for (int i = MarineTID; i <= MarineMaxTID; i++)
        {
            // Sight Alert
            if (CheckSight(i, 0, 0))
            {
                PlaySound(i, "drpgmarines/shopkeephatred", 0, 1.0);
                SpawnForced("DRPGAlertIcon", GetActorX(i), GetActorY(i), GetActorZ(i) + GetActorPropertyFixed(i, APROP_Height) + 4.0, 0, 0);
            };
        };
    
    Delay(35 * 2);
    
    // Pick combat music from Arena selection
    SetOutpostMusic(OUTPOST_MUSIC_COMBAT);
    
    SetActorProperty(TurretTID, APROP_Friendly, false);
    
    // Iterate Marines post-Delay
    for (int i = MarineTID; i <= MarineMaxTID; i++)
    {
        // Remove Friendly flag
        SetActorProperty(i, APROP_Friendly, false);
        
        // Enrage Marines
        if (GetActorProperty(i, APROP_Health) > 0)
            SetActorState(i, "Enraged", false);
        
        // Give Credits to Marines
        SetActorInventory(i, "DRPGCredits", Random(10, 1000));
    };
    
    // Enrage Turrets
    if (ClassifyActor(TurretTID) & ACTOR_ALIVE)
    {
        SetActorState(TurretTID, "Enraged", false);
        
        // Power-down Turrets for Large Powersuit
        if (OutpostNotoriety >= 3)
            SetActorState(TurretTID, "PoweredDown", false);
    };
    
    // Enrage placeholder bosses
    SetActorState(MarineBossTID - 1, "Enraged", false);
    
    // You fool! You set off the alarms!
    Thing_Activate(OutpostAlarmTID);
    
    // Boss Spawning
    SpawnBoss();
    
    // Seal off the lobby
    Door_Close(BlastDoorID, 72);
    SpawnSpotForced("TeleportFog", GeneratorTID, 0, 0);
    SpawnSpotForced("DRPGForcefieldGenerator", GeneratorTID, GeneratorTID, 0);
    
    // Synchronize delay with SpawnBoss()
    if (OutpostNotoriety >= 3)
        Delay(35 * 30);
    
    // Loop
    while (true)
    {
        // Move all players outside the entry sector
        if (!BossDead)
            for (int i = 0; i < MAX_PLAYERS; i++)
                if (ThingCountSector(0, Players(i).TID, EntrySectorID) > 0)
                    TeleportOther(Players(i).TID, HallTeleportSpotID + i, true);
        
        // Spawn Reinforcements
        if ((Timer() % (35 * 10)) == 0 && OutpostNotoriety <= 2)
        {
            SpawnSpotForced("TeleportFog", MarineSpotTID, 0, 0);
            if (OutpostNotoriety == 2) // Special handling for Chasing Minigunners
                SpawnSpotFacingForced("DRPGMarineMinigunHuntingYerAss", MarineSpotTID, MarineTID)
            else
                if (GetCVar("drpg_ext_doomrl"))
                    SpawnSpotFacingForced("DRPGMarineReinforcementDRLASpawner", MarineSpotTID, MarineTID)
                else
                    SpawnSpotFacingForced("DRPGMarineReinforcementSpawner", MarineSpotTID, MarineTID);
            SetActorProperty(MarineTID, APROP_Friendly, false);
        };
        
        // Boss Timer
        if (ForcefieldTimer > 0 && OutpostNotoriety == 2)
        {
            // Set completion state on the Shield Generator
            SetActorState(GeneratorTID, StrParam("%dPowerLoop\n", ForcefieldTimer / ((35 * 60 * GameSkill()) / 7)), false);
            
            // Decrement timer
            ForcefieldTimer--;
        };
        
        // Different checks for specific Notoriety levels
        if (ForcefieldState == 0)
            if (OutpostNotoriety == 2 && ForcefieldTimer <= 0)
                ForcefieldState = 1
            else if (OutpostNotoriety != 2 && ThingCount(0, MarineBossTID) <= 0)
                ForcefieldState = 1;
        
        // Bosses are dead or boss timer expires
        if (ForcefieldState == 1)
        {
            AmbientSound("misc/poweroff", 127);
            
            // Re-open the lobby
            Door_Open(BlastDoorID, 72);
            SetActorState(GeneratorTID, "Death", false);
            
            // Boss is dead
            BossDead = true;
            ForcefieldState = 2;
        };
        
        Delay(1);
    };
};

acscript void TokenConverter()
{
    // If Marines are hostile or the power is out, terminate
    if (MarinesHostile || PowerOut) return;
    
    // if you're already in a menu, terminate
    if (Player.OutpostMenu == OMENU_TOKENCONVERTER) return;
    
    int StatWorth = 1;
    int StatCapWorth = 10;
    int SkillWorth = 5;
    int InAmount = 1;
    int Amount1;
    int Amount2;
    int MaxAmount;
    int Type;
    int Cost;
    str Text;
    
    // Rank Check
    if (Player.RankLevel == 0)
    {
        SetFont("BIGFONT");
        HudMessage("\cgYou must be at least Rank 1 to use the Token Converter\n", HUDMSG_FADEOUT, 0, CR_RED, 1.5, 0.5, 2.0, 1.0);
        ActivatorSound("menu/error", 127);
        return;
    };
    
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
    ActivatorSound("menu/move", 127);
    Player.OutpostMenu = OMENU_TOKENCONVERTER;

    while (true)
    {
        int StatTokens = CheckInventory("DRPGStatToken");
        int StatCapTokens = CheckInventory("DRPGStatCapToken");
        int SkillTokens = CheckInventory("DRPGSkillToken");
        int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
        int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
        
        // Draw the background
        if (GetCVar("drpg_menudim"))
            FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
        
        switch (Type)
        {
        case 0: // Stat -> Skill
            Amount1 = InAmount * SkillWorth;
            Amount2 = InAmount;
            MaxAmount = StatTokens / SkillWorth;
            Cost = 5000 * Amount1;
            Text = StrParam("Convert: \cf%d C\n\cg%d Stat Tokens \cj-> \cd%d Skill Tokens\n", Cost, Amount1, Amount2);
            break;
        case 1: // Stat -> Stat Cap
            Amount1 = InAmount * StatCapWorth;
            Amount2 = InAmount;
            MaxAmount = StatTokens / StatCapWorth;
            Cost = 1000 * Amount1;
            Text = StrParam("Convert: \cf%d C\n\cg%d Stat Tokens \cj-> \ck%d Stat Cap Tokens\n", Cost, Amount1, Amount2);
            break;
        case 2: // Skill -> Stat
            Amount1 = InAmount * StatWorth;
            Amount2 = InAmount * SkillWorth;
            MaxAmount = SkillTokens;
            Cost = 25000 * Amount1;
            Text = StrParam("Convert: \cf%d C\n\cd%d Skill Tokens \cj-> \cg%d Stat Tokens\n", Cost, Amount1, Amount2);
            break;
        case 3: // Skill -> Stat Cap
            Amount1 = InAmount * (StatCapWorth / SkillWorth);
            Amount2 = InAmount;
            MaxAmount = SkillTokens / 2;
            Cost = 12500 * Amount1;
            Text = StrParam("Convert: \cf%d C\n\cd%d Skill Tokens \cj-> \ck%d Stat Cap Tokens\n", Cost, Amount1, Amount2);
            break;
        case 4: // Stat Cap -> Stat
            Amount1 = InAmount;
            Amount2 = InAmount * StatCapWorth;
            MaxAmount = StatCapTokens;
            Cost = 25000 * Amount1;
            Text = StrParam("Convert: \cf%d C\n\ck%d Stat Cap Tokens \cj-> \cg%d Stat Tokens\n", Cost, Amount1, Amount2);
            break;
        case 5: // Stat Cap -> Skill
            Amount1 = InAmount;
            Amount2 = InAmount * (StatCapWorth / SkillWorth);
            MaxAmount = StatCapTokens;
            Cost = 10000 * Amount1;
            Text = StrParam("Convert: \cf%d C\n\ck%d Stat Cap Tokens \cj-> \cd%d Skill Tokens\n", Cost, Amount1, Amount2);
            break;
        };

        // Input
        if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && Type > 0)
        {
            ActivatorSound("menu/move", 127);
            InAmount = 1;
            Type--;
        };
        if (Buttons == BT_BACK && OldButtons != BT_BACK && Type < 5)
        {
            ActivatorSound("menu/move", 127);
            InAmount = 1;
            Type++;
        };
        if ((Buttons == BT_LEFT && OldButtons != BT_LEFT) ||
            (Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT)
            && InAmount > 1)
        {
            ActivatorSound("menu/move", 127);
            InAmount--;
        };
        if ((Buttons == BT_RIGHT && OldButtons != BT_RIGHT) ||
            (Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT)
            && InAmount <= MaxAmount - 1)
        {
            ActivatorSound("menu/move", 127);
            InAmount++;
        };
        if (Buttons == BT_USE && OldButtons != BT_USE)
        {
            str InItem;
            str OutItem;
            
            switch (Type)
            {
            case 0: InItem = "DRPGStatToken";       OutItem = "DRPGSkillToken";     break;
            case 1: InItem = "DRPGStatToken";       OutItem = "DRPGStatCapToken";   break;
            case 2: InItem = "DRPGSkillToken";      OutItem = "DRPGStatToken";      break;
            case 3: InItem = "DRPGSkillToken";      OutItem = "DRPGStatCapToken";   break;
            case 4: InItem = "DRPGStatCapToken";    OutItem = "DRPGStatToken";      break;
            case 5: InItem = "DRPGStatCapToken";    OutItem = "DRPGSkillToken";     break;
            };
            
            if (CheckInventory("DRPGCredits") >= Cost)
            {
                if ((Type == 0 || Type == 1) && StatTokens >= Amount1)
                {
                    InAmount = 1;
                    GiveInventory(OutItem, Amount2);
                    TakeInventory(InItem, Amount1);
                    TakeInventory("DRPGCredits", Cost);
                    ActivatorSound("misc/tokenconvert", 127);
                    Player.OutpostMenu = 0;
                }
                else if ((Type == 2 || Type == 3) && SkillTokens >= Amount1)
                {
                    InAmount = 1;
                    GiveInventory(OutItem, Amount2);
                    TakeInventory(InItem, Amount1);
                    TakeInventory("DRPGCredits", Cost);
                    ActivatorSound("misc/tokenconvert", 127);
                    Player.OutpostMenu = 0;
                }
                else if ((Type == 4 || Type == 5) && StatCapTokens >= Amount1)
                {
                    InAmount = 1;
                    GiveInventory(OutItem, Amount2);
                    TakeInventory(InItem, Amount1);
                    TakeInventory("DRPGCredits", Cost);
                    ActivatorSound("misc/tokenconvert", 127);
                    Player.OutpostMenu = 0;
                }
                else
                    ActivatorSound("menu/error", 127);
            }
            else
                ActivatorSound("menu/error", 127);
        };
        if (Buttons == BT_SPEED && OldButtons != BT_SPEED)
        {
            ActivatorSound("menu/move", 127);
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            Player.OutpostMenu = 0;
            return;
        };
        
        // Drawing
        SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);
        PrintSpriteFade("TOKAA0", 0, 16.1, 188.1, 0.05, 0.5);
        PrintSpriteFade("TOKBA0", 0, 16.1, 208.1, 0.05, 0.5);
        PrintSpriteFade("TOKCA0", 0, 16.1, 228.1, 0.05, 0.5);
        SetFont("BIGFONT");
        HudMessage("%d\n", StatTokens,      HUDMSG_FADEOUT, 0, CR_RED,          40.1, 178.0, 0.05, 0.5);
        HudMessage("%d\n", StatCapTokens,   HUDMSG_FADEOUT, 0, CR_YELLOW,       40.1, 198.0, 0.05, 0.5);
        HudMessage("%d\n", SkillTokens,     HUDMSG_FADEOUT, 0, CR_DARKGREEN,    40.1, 218.0, 0.05, 0.5);
        SetFont("SMALLFONT");
        HudMessage("%s\n", Text,            HUDMSG_FADEOUT, MENU_ID, CR_WHITE,  140.1, 178.0, 0.05, 0.5);

        Delay(1);
    };
};

// Credit Room Script
acscript void CreditRoom(int ID)
{
    if (ID == 1) // Enter
        SetOutpostMusic(OUTPOST_MUSIC_CREDITS, true);
    if (ID == 2) // Exit
        ResetOutpostMusic();
    
    if (ID == 3) // Kyle873 - That's me!
    {
        SetFont("BIGFONT");
        HudMessage("Kyle873\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
        Delay(35);
        SetFont("SMALLFONT");
        HudMessage("What do you mean I can't nerf XP Gain to 1 per monster?!\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);

        int RealCredits = CheckInventory("DRPGCredits");
        
        ActivatorSound("credits/payout", 127);
        Log("\ckYou have been paid -2147483648 by the UAC!\n");
        TakeInventory("DRPGCredits", RealCredits);
        Delay(35 * 10);
        GiveInventory("DRPGCredits", RealCredits);
    };
    
    if (ID == 4) // Lord Misfit
    {
        SetFont("BIGFONT");
        HudMessage("Lord Misfit\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
        Delay(35);
        SetFont("SMALLFONT");
        HudMessage("I swear it's a real bug this time!\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);
        
        str VarString = "SetVar";
        
        Delay(35 * 3);
        for (int i = 0; i < 100; i++)
        {
            if (Random(1, 3) == 1) VarString = StrParam("%s%s\n", VarString, "Var");
            HudMessage("%s\n", VarString, HUDMSG_FADEOUT, 0, Random(1, 21), RandomFixed(0.0, 1.0), RandomFixed(0.0, 1.0), 3.0, 2.0);
            Delay(1);
        };
    };
    
    if (ID == 5) // Ryan Cordell
    {
        SetFont("BIGFONT");
        HudMessage("Ryan Cordell\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 7.0, 2.0);
        Delay(35);
        
        for (int i = 0; i < 10; i++)
        {
            ActivatorSound("weapons/rocklx", 127);
            Delay(Random(5, 10));
        };
        
        Delay(35 * 2);
        SetFont("SMALLFONT");
        HudMessage("Did I do that?\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);
    };
    
    if (ID == 6) // marrub
    {
        SetFont("BIGFONT");
        HudMessage("marrub\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
        Delay(35);
        HudMessage("I HOPE YOU LIKE SHOTGUNS!\n", HUDMSG_FADEOUT, 0, CR_BRICK, 0.5, 0.55, 3.0, 2.0);
        Delay(35 * 2);
        
        for (int i = 0; i < 50; i++)
        {
            DropItem(0, "DRPGDumbShotgun", 1, 255);
            Delay(1);
        };
    };

    if (ID == 7) // Kate
    {
        SetFont("BIGFONT");
        HudMessage("Kate\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
        Delay(35);
        HudMessage("\cgR\ciA\ckI\cdN\chB\ctO\caW\cjS\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);
        Delay(35);
        
        FadeTo(255, 0, 0, 0.5, 0.5);
        Delay(17);
        FadeTo(255, 128, 0, 0.5, 0.5);
        Delay(17);
        FadeTo(255, 255, 0, 0.5, 0.5);
        Delay(17);
        FadeTo(0, 255, 0, 0.5, 0.5);
        Delay(17);
        FadeTo(0, 0, 255, 0.5, 0.5);
        Delay(17);
        FadeTo(128, 0, 255, 0.5, 0.5);
        Delay(17);
        FadeTo(255, 0, 255, 0.5, 0.5);
        Delay(17);
        FadeTo(255, 255, 255, 0.5, 0.5);
        Delay(17);
        FadeTo(0, 0, 0, 0.0, 0.5);
    };
    
    if (ID == 8) // Yholl
    {
        SetFont("BIGFONT");
        HudMessage("Yholl\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
        Delay(35);
        HudMessage("\caYour suffering pleases me\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);
        Delay(35);
        
        for (int i = 0; i < 50; i++)
        {
            DropItem(0, "DRPGDumbPistol", 1, 255);
            Delay(1);
        };
    };
};

// Shop Special UI
acscript void ShopSpecial()
{
    // if you're already in a menu, terminate
    if (Player.OutpostMenu == OMENU_SHOPSPECIAL) return;
    
    if (ShopSpecialBought)
    {
        SetFont("BIGFONT");
        HudMessage("Shop Special is currently out of stock.\n\nNext restock will be in %s.\n", FormatTime(ShopSpecialTimer),
                   HUDMSG_FADEOUT, MENU_ID, CR_RED, 1.5, 0.5, 2.0, 1.0);
        ActivatorSound("menu/error", 127);
        return;
    };
    
    ActivatorSound("menu/move", 127);
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
    Player.OutpostMenu = OMENU_SHOPSPECIAL;
    
    while (true)
    {
        int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
        int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
        str Name = ShopSpecialItem->Name;
        int Discount = (30 - (GameSkill() * 5)) + Player.ShopDiscount;
        int Cost = ShopSpecialItem->Price - ShopSpecialItem->Price * Discount / 100;
        
        // Cap the Shop Special Discount at 75%
        if (Discount > 75) Discount = 75;
        
        // If the item's already been bought, terminate
        if (ShopSpecialBought)
        {
            SetPlayerProperty(true, 0, PROP_TOTALLYFROZEN);
            return;
        };
        
        // The cost should always be at least 1 Credit
        if (Cost <= 0) Cost = 1;
        
        // Draw the background
        if (GetCVar("drpg_menudim"))
            FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
        
        // Input
        if (Buttons == BT_USE && OldButtons != BT_USE)
        {
            // Buy Item
            if (CheckInventory("DRPGCredits") >= Cost)
            {
                TakeInventory("DRPGCredits", Cost);
                SpawnForced(ShopSpecialItem->Actor, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
                SetActorVelocity(Player.TID, 0.01, 0.01, 0, true, false);
                ShopSpecialBought = true;
                
                ActivatorSound("credits/payout", 127);
                Delay(1);
                SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
                Player.OutpostMenu = 0;
                return;
            }
            else
                ActivatorSound("menu/error", 127);
        };
        if (Buttons == BT_SPEED)
        {
            ActivatorSound("menu/move", 127);
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            Player.OutpostMenu = 0;
            return;
        };
        
        // Drawing
        SetFont("BIGFONT");
        HudMessage("%s\n\ck%d C (Discount: %d%%)\n\cdTime Left: %s\n",
                   Name, Cost, Discount, FormatTime(ShopSpecialTimer),
                   HUDMSG_FADEOUT, MENU_ID, CR_WHITE, 1.5, 0.5, 0.05, 1.0);
        
        Delay(1);
    };
};

// Player Locker
// TODO: This needs cleanup and such, see the TODO list for details
acscript void Locker(bool Wireless, int WirelessLevel)
{
    // If you already have the Locker open, return
    if (Player.OutpostMenu == OMENU_LOCKER) return;
    
    // Freeze the Player
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
    
    Player.OutpostMenu = OMENU_LOCKER;
    
    ActivatorSound("menu/move", 127);
    
    // Close other menus if they are open
    Player.InMenu = false;
    Player.InShop = false;
    
    while (Player.OutpostMenu == OMENU_LOCKER)
    {
        fixed X = 24.1;
        fixed Y = 50.0;
        int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
        int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
        int Efficiency = (WirelessLevel - 1) * 5;
        int WirelessCost = (int)((fixed)LockerWirelessCosts[Player.LockerPage] - ((fixed)LockerWirelessCosts[Player.LockerPage] * ((fixed)Efficiency / 100.0)));
        bool Success = false;
        int Color;
        
        // Set the HUD Size
        SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);
        
        // Title and Page
        SetFont("BIGFONT");
        if (Player.LockerGlobal)
            HudMessage("Global Locker - %s (%d/%d)\n",
                       ItemCategoryNames[Player.LockerPage], Player.LockerPage + 1, ItemCategories,
                       HUDMSG_PLAIN, 0, CR_GREEN, 24.1, 24.0, 0.05)
        else
            HudMessage("Personal Locker - %s (%d/%d)\n",
                       ItemCategoryNames[Player.LockerPage], Player.LockerPage + 1, ItemCategories,
                       HUDMSG_PLAIN, 0, CR_GREEN, 24.1, 24.0, 0.05);
        
        // Wireless EP Cost and Transfer Efficiency
        if (GetCVar("drpg_inv_capacity"))
        {
            if (Wireless && !InBase)
                HudMessage("Inventory: %d/%d \cn(%d EP) [%d%% Efficiency]\n",
                           Player.InvItems, CheckInventoryMax(), WirelessCost, Efficiency,
                           HUDMSG_PLAIN, 0, CR_WHITE, 24.1, 38.0, 0.05)
            else
                HudMessage("Inventory: %d/%d\n",
                           Player.InvItems, CheckInventoryMax(),
                           HUDMSG_PLAIN, 0, CR_WHITE, 24.1, 38.0, 0.05);
        }
        else
        {
            if (Wireless && !InBase)
                HudMessage("(%d EP) [%d%% Efficiency]\n",
                           WirelessCost, Efficiency, HUDMSG_PLAIN, 0, CR_LIGHTBLUE, 24.1, 38.0, 0.05);
        };
        
        DrawItemGrid(IG_LOCKER);
        
        // Check Input
        if (Buttons & BT_FORWARD && !(OldButtons & BT_FORWARD))
        {
            ActivatorSound("menu/move", 127);
            if (Buttons & BT_SPEED)
                Player.LockerIndex -= 54
            else
                Player.LockerIndex -= 9;
            if (Player.LockerIndex < 0) Player.LockerIndex = 0;
        };
        if (Buttons & BT_BACK && !(OldButtons & BT_BACK))
        {
            ActivatorSound("menu/move", 127);
            if (Buttons & BT_SPEED)
                Player.LockerIndex += 54
            else
                Player.LockerIndex += 9;
            if (Player.LockerIndex > ItemMax[Player.LockerPage] - 1) Player.LockerIndex = ItemMax[Player.LockerPage] - 1;
        };
        if ((Buttons & BT_LEFT && !(OldButtons & BT_LEFT)) ||
            (Buttons & BT_MOVELEFT && !(OldButtons & BT_MOVELEFT)))
            if (Buttons & BT_SPEED)
            {
                ActivatorSound("menu/move", 127);
                Player.LockerPage--;
                Player.LockerIndex = 0;
                if (Player.LockerPage < 0) Player.LockerPage = ItemCategories - 1;
            }
            else
            {
                ActivatorSound("menu/move", 127);
                Player.LockerIndex--;
                if (Player.LockerIndex < 0) Player.LockerIndex = 0;
            };
        if ((Buttons & BT_RIGHT && !(OldButtons & BT_RIGHT)) ||
            (Buttons & BT_MOVERIGHT && !(OldButtons & BT_MOVERIGHT)))
            if (Buttons & BT_SPEED)
            {
                ActivatorSound("menu/move", 127);
                Player.LockerPage++;
                Player.LockerIndex = 0;
                if (Player.LockerPage > ItemCategories - 1) Player.LockerPage = 0;
            }
            else
            {
                ActivatorSound("menu/move", 127);
                Player.LockerIndex++;
                if (Player.LockerIndex > ItemMax[Player.LockerPage] - 1) Player.LockerIndex = ItemMax[Player.LockerPage] - 1;
            };
        if (Buttons & BT_USE)
            Player.DelayTimer++
        else
            Player.DelayTimer = 0;
        if (Buttons & BT_USE && !(OldButtons & BT_USE) || Player.DelayTimer > 35.0 * GetCVarFixed("drpg_menu_repeat"))
            if (Buttons & BT_SPEED) // Withdraw
            {
                bool Check = (Player.LockerGlobal ? GlobalLocker[Player.LockerPage][Player.LockerIndex] : (Player.Locker[Player.LockerPage][Player.LockerIndex] > 0));
                str Item = ItemData[Player.LockerPage][Player.LockerIndex].Actor;
                
                // Strip the DRPG prefix off and possible number off the ammo actor names
                if (Player.LockerPage == 1) // Ammo
                {
                    Item = StrMid(Item, 4, StrLen(Item));
                    
                    // DoomRL Compatibility
                    if (GetCVar("drpg_ext_doomrl"))
                        Item = StrLeft(Item, StrLen(Item) - 1);
                };
                
                if (Check)
                {
                    if (!Wireless || InBase)
                        Success = true
                    else
                    {
                        if (Player.EP < WirelessCost)
                        {
                            SetHudSize(0, 0, false);
                            SetFont("BIGFONT");
                            HudMessage("Not Enough EP to Withdraw item\n", HUDMSG_FADEOUT, 0, CR_RED, 0.5, 0.5, 2.0, 2.0);
                            ActivatorSound("menu/error", 127);
                            Success = false;
                        }
                        else
                            Success = true;
                    };
                    
                    // Checking
                    if (Success)
                    {
                        if (Player.LockerPage == 0 && CheckInventory("RLWeaponLimit") >= 6) // Weapons
                        {
                            ActivatorSound("menu/error", 127);
                            Success = false;
                        }
                        else if (Player.LockerPage == 1 && CheckInventory(Item) >= GetAmmoCapacity(Item)) // Ammo
                        {
                            ActivatorSound("menu/error", 127);
                            Success = false;
                        }
                        else if (Player.LockerPage == 2 && CheckInventory("RLArmorInInventory") >= 1) // Armor
                        {
                            ActivatorSound("menu/error", 127);
                            Success = false;
                        }
                        else if (Player.LockerPage == 3 && Player.LockerIndex == 8 && CheckInventory("RLArmorModItemInInventory") >= 1) // Armor Modpack
                        {
                            ActivatorSound("menu/error", 127);
                            Success = false;
                        }
                        else if (Player.LockerPage == 3 && ((PlayerClass(PlayerNumber()) == 2) ? CheckInventory("RLScavengerModLimit") >= 8 : CheckInventory("RLModLimit") >= 4)) // Mod Packs
                        {
                            ActivatorSound("menu/error", 127);
                            Success = false;
                        }
                        else if (Player.LockerPage == 4 && CheckInventory("RLBootsInInventory") >= 1) // Boots
                        {
                            ActivatorSound("menu/error", 127);
                            Success = false;
                        }
                        else if (Player.LockerPage == 0) // Weapons
                        {
                            if (GetCVar("drpg_ext_doomrl"))
                                SpawnForced(StrParam("%sPickup\n", Item), GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0)
                            else
                                SpawnForced(Item, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
                        }
                        else if (Player.LockerPage == 1) // Ammo
                            GiveInventory(Item, 1)
                        else // Everything else
                            SpawnForced(Item, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
                        
                        if (Success)
                        {
                            SetActorVelocity(Player.TID, 0.01, 0.01, 0, true, false);
                            if (Player.LockerGlobal)
                                GlobalLocker[Player.LockerPage][Player.LockerIndex]--
                            else
                                Player.Locker[Player.LockerPage][Player.LockerIndex]--;
                            if (Wireless && !InBase)
                                Player.EP -= WirelessCost;
                            ActivatorSound("menu/move", 127);
                        };
                    };
                }
                else if (Player.DelayTimer < 35.0 * GetCVarFixed("drpg_menu_repeat"))
                    ActivatorSound("menu/error", 127);
            }
            else // Deposit
            {
                str Item = ItemData[Player.LockerPage][Player.LockerIndex].Actor;
                
                // Strip the DRPG prefix off and possible number off the ammo actor names
                if (Player.LockerPage == 1) // Ammo
                {
                    Item = StrMid(Item, 4, StrLen(Item));
                    
                    // DoomRL Compatibility
                    if (GetCVar("drpg_ext_doomrl"))
                        Item = StrLeft(Item, StrLen(Item) - 1);
                };
                
                if (CheckInventory(Item) > 0)
                {
                    if (!Wireless || InBase)
                    {
                        TakeInventory(Item, 1);
                        if (Player.LockerGlobal)
                            GlobalLocker[Player.LockerPage][Player.LockerIndex]++
                        else
                            Player.Locker[Player.LockerPage][Player.LockerIndex]++;
                        ActivatorSound("menu/move", 127);
                        Success = true;
                    }
                    else
                    {
                        if (Player.EP < WirelessCost)
                        {
                            SetHudSize(0, 0, false);
                            SetFont("BIGFONT");
                            HudMessage("Not Enough EP to Deposit item\n", HUDMSG_FADEOUT, 0, CR_RED, 0.5, 0.5, 2.0, 2.0);
                            ActivatorSound("menu/error", 127);
                            Success = false;
                        }
                        else
                        {
                            TakeInventory(Item, 1);
                            if (Player.LockerGlobal)
                                GlobalLocker[Player.LockerPage][Player.LockerIndex]++
                            else
                                Player.Locker[Player.LockerPage][Player.LockerIndex]++;
                            Player.EP -= WirelessCost;
                            ActivatorSound("menu/move", 127);
                            Success = true;
                        };
                    };
                    
                    if (Success)
                        if (Player.LockerPage == 0) // Weapons
                        {
                            TakeInventory("RLWeaponLimit", 1);
                            
                            // Weapon portion of Nuclear Set Bonus Checking
                            if (!CheckInventory("RLNuclearPlasmaPistol") || !CheckInventory("RLHighPowerNuclearPlasmaPistol") || !CheckInventory("RLStormNuclearPlasmaPistol") || CheckInventory("RLSuperchargedNuclearPlasmaPistol") ||
                                !CheckInventory("RLNuclearPlasmaRifle") || !CheckInventory("RLHighPowerNuclearPlasmaRifle") || !CheckInventory("RLAssaultRifleNuclearPlasmaRifle") || !CheckInventory("RLBurstCannonNuclearPlasmaRifle") ||
                                !CheckInventory("RLNuclearBFG9000") || !CheckInventory("RLHighPowerNuclearBFG9000") || !CheckInventory("RLNuclearVBFG9000") || !CheckInventory("RLNuclearBiggestFuckingGun"))
                            {
                                TakeInventory("RLNuclearWeaponSetBonusWeapon", 1);
                                TakeInventory("RLNuclearWeaponSetBonusActive", 1);
                            };
                            
                            // Tristar blaster Set Bonus Checking
                            if (!CheckInventory("RLTristarBlaster") || !CheckInventory("RLHighPowerTristarBlaster") || !CheckInventory("RLNanomanufactureAmmoTristarBlaster"))
                                TakeInventory("RLCerberusSetBonusTristarBlaster", 1);
                        }
                        else if (Player.LockerPage == 3) // Armor
                            TakeInventory("RLArmorInInventory", 1)
                        else if (Player.LockerPage == 9) // Mod Packs
                            if (Player.LockerIndex == 8) // Special handling case for Armor Modpack
                                TakeInventory("RLArmorModItemInInventory", 1)
                            else
                                if (PlayerClass(PlayerNumber()) == 2) // Special handling case for Technician
                                    TakeInventory("RLScavengerModLimit", 1)
                                else
                                    TakeInventory("RLModLimit", 1)
                        else if (Player.LockerPage == 10) // Boots
                            TakeInventory("RLBootsInInventory", 1);
                }
                else if (Player.DelayTimer < 35.0 * GetCVarFixed("drpg_menu_repeat"))
                    ActivatorSound("menu/error", 127);
            };
        
        Delay(1);
    };
};

// Mission BBS
acscript void MissionBBS()
{
    int Index;
    int Difficulty;
    
    // If Marines are hostile, terminate
    if (MarinesHostile) return;
    
    // if you're already in a menu, terminate
    if (Player.OutpostMenu == OMENU_BBS) return;

    // Make sure the Rewards List is finished Processing
    if (!RewardsInit || !MissionInit)
    {
        ActivatorSound("menu/error", 127);
        SetFont("BIGFONT");
        SetHudSize(640, 480, false);
        HudMessage("The Mission BBS is currently processing requests...\n", HUDMSG_FADEOUT, MISSION_ID, CR_RED, 320.0, 240.0, 3.0, 2.0);
        return;
    };
    
    // Freeze the Player
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
    
    Player.OutpostMenu = OMENU_BBS;
    
    ActivatorSound("menu/move", 127);
    
    while (Player.OutpostMenu == OMENU_BBS)
    {
        int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
        int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
        MissionInfo *Mission = &Missions[Difficulty][Index];
        
        // Set the HUD Size
        SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);
        
        // Difficulty
        HudMessage("Difficulty: %s\n", MissionDifficulties[Difficulty], HUDMSG_PLAIN, 0, CR_WHITE, 32.1, 136.0, 0.05);
        
        // Mission Labels
        for (int i = 0; i < MAX_MISSIONS; i++)
        {
            MissionInfo *MissionIter = &Missions[Difficulty][i];
            
            SetFont("SMALLFONT");
            
            // Cursor
            if (i == Index)
                HudMessage("-->\n", HUDMSG_PLAIN, 0, MenuCursorColor, 8.1, 160.0 + (i * 8.0), 0.05);
            
            // Type
            HudMessage("%s\n", MissionTypes[MissionIter->Type], HUDMSG_PLAIN, 0, CR_WHITE, 32.1, 160.0 + (i * 8.0), 0.05);
        };
        
        // Currently selected Mission
        SetFont("BIGFONT");
        HudMessage("Type: %s\n", MissionTypes[Mission->Type], HUDMSG_PLAIN, 0, CR_WHITE, 200.1, 160.0, 0.05);
        HudMessage("Difficulty: %s\n", MissionDifficulties[Mission->Difficulty], HUDMSG_PLAIN, 0, CR_WHITE, 200.1, 176.0, 0.05);
        HudMessage("XP: %d\n", Mission->RewardXP, HUDMSG_PLAIN, 0, CR_WHITE, 200.1, 192.0, 0.05);
        HudMessage("Rank: %d\n", Mission->RewardRank, HUDMSG_PLAIN, 0, CR_YELLOW, 200.1, 208.0, 0.05);
        HudMessage("Credits: %d\n", Mission->RewardCredits, HUDMSG_PLAIN, 0, CR_GOLD, 200.1, 224.0, 0.05);
        HudMessage("\ciItem: \c-%s\n", Mission->RewardItem->Name, HUDMSG_PLAIN, 0, CR_WHITE, 200.1, 234.1, 0.05);
        
        // Currently Selected Mission Objective
        switch (Mission->Type)
        {
        case MT_COLLECT:
            HudMessage("Amount: \cd%d\n", Mission->Amount, HUDMSG_PLAIN, 0, CR_WHITE, 200.1, 272.0, 0.05);
            HudMessage("Type: \ci%s\n", Mission->Item->Name, HUDMSG_PLAIN, 0, CR_WHITE, 200.1, 288.0, 0.05);
            break;
        case MT_KILL:
            HudMessage("Amount: \ca%d\n", Mission->Amount, HUDMSG_PLAIN, 0, CR_WHITE, 200.1, 272.0, 0.05);
            HudMessage("Type: \cg%s\n", Mission->Monster->Name, HUDMSG_PLAIN, 0, CR_WHITE, 200.1, 288.0, 0.05);
            break;
        case MT_KILLAURAS:
        case MT_REINFORCEMENTS:
            HudMessage("Amount: \ca%d\n", Mission->Amount, HUDMSG_PLAIN, 0, CR_WHITE, 200.1, 272.0, 0.05);
            break;
        case MT_ASSASSINATION:
            HudMessage("Type: \cg%s\n", Mission->Monster->Name, HUDMSG_PLAIN, 0, CR_WHITE, 200.1, 272.0, 0.05);
            break;
        case MT_SECRETS:
            HudMessage("Amount: \cf%d\n", Mission->Amount, HUDMSG_PLAIN, 0, CR_WHITE, 200.1, 272.0, 0.05);
            break;
        case MT_ITEMS:
            HudMessage("Amount: \cn%d\n", Mission->Amount, HUDMSG_PLAIN, 0, CR_WHITE, 200.1, 272.0, 0.05);
            break;
        case MT_COMBO:
            HudMessage("Amount: \ct%d\n", Mission->Amount, HUDMSG_PLAIN, 0, CR_WHITE, 200.1, 272.0, 0.05);
            break;
        };
        
        // Input
        if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD)
        {
            ActivatorSound("menu/move", 127);
            Index--;
            if (Index < 0) Index = MAX_MISSIONS - 1;
        };
        if (Buttons == BT_BACK && OldButtons != BT_BACK)
        {
            ActivatorSound("menu/move", 127);
            Index++;
            if (Index > MAX_MISSIONS - 1) Index = 0;
        };
        if (Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT)
        {
            ActivatorSound("menu/move", 127);
            Difficulty--;
            if (Difficulty < 0) Difficulty = MAX_DIFFICULTIES - 1;
        };
        if (Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT)
        {
            ActivatorSound("menu/move", 127);
            Difficulty++;
            if (Difficulty >= MAX_DIFFICULTIES) Difficulty = 0;
        };
        if (Buttons == BT_USE && OldButtons != BT_USE && !Player.Mission.Active)
        {
            ActivatorSound("mission/get", 127);
            Mission->Active = true;
            Player.Mission = *Mission;
            
            // Remove any of the selected loot item if you already have any
            if (Mission->Type == MT_COLLECT && CheckInventory(Mission->Item->Actor) > 0)
                SetInventory(Mission->Item->Actor, 0);
        
            CreateMissionAt(Difficulty, Index);
        };
        if (Buttons == BT_SPEED)
        {
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            Player.OutpostMenu = 0;
        };
        if (Buttons == BT_ATTACK && OldButtons != BT_ATTACK && Player.Mission.Active)
        {
            ActivatorSound("mission/fail", 127);
            SetFont("BIGFONT");
            SetHudSize(640, 480, false);
            HudMessage("Mission Aborted!\n", HUDMSG_FADEOUT, MISSION_ID, CR_RED, 320.4, 400.0, 3.0, 2.0);
            ClearMission();
        };
        
        Delay(1);
    };
};

// Roulette
acscript void MinigameHandler()
{
    if (Player.InMinigame) return;
    
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
    
    // TODO: This will just play Roulette for now
    if (GetPlayerInput(PlayerNumber(), INPUT_BUTTONS) & BT_SPEED)
    {
        if (CheckInventory("DRPGCredits") >= 10000)
        {
            SetFont("BIGFONT");
            HudMessage("Rare Item Roulette\n", HUDMSG_FADEOUT, 0, CR_GOLD, 0.5, 0.75, 0.75, 0.25);
            TakeInventory("DRPGCredits", 10000);
            Delay(35);
            ItemRoulette(Random(5, 8), Random(GameSkill(), GameSkill() * 2), 0);
        }
        else
        {
            SetFont("BIGFONT");
            HudMessage("You need 10000 Credits to use the Rare Item Roulette\n", HUDMSG_FADEOUT, 0, CR_RED, 0.5, 0.5, 2.0, 1.0);
            ActivatorSound("menu/error", 127);
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
        };
    }
    else
    {
        if (CheckInventory("DRPGCredits") >= 1000)
        {
            SetFont("BIGFONT");
            HudMessage("Item Roulette\n", HUDMSG_FADEOUT, 0, CR_GOLD, 0.5, 0.75, 0.75, 0.25);
            TakeInventory("DRPGCredits", 1000);
            Delay(35);
            ItemRoulette(Random(1, 4), Random(GameSkill(), GameSkill() * 2), 0);
        }
        else
        {
            SetFont("BIGFONT");
            HudMessage("You need 1000 Credits to use the Normal Item Roulette\n", HUDMSG_FADEOUT, 0, CR_RED, 0.5, 0.5, 2.0, 1.0);
            ActivatorSound("menu/error", 127);
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
        };
    };
};

// Handles the 6 Key Secret
acscript void OutpostSecret()
{
    if (CheckInventory("DRPGRedCard") && CheckInventory("DRPGYellowCard") && CheckInventory("DRPGBlueCard") &&
        CheckInventory("DRPGRedSkull") && CheckInventory("DRPGYellowSkull") && CheckInventory("DRPGBlueSkull"))
    {
        ActivatorSound("misc/secret", 127);
        Teleport(SecretTeleportTID + PlayerNumber(), false);
    };
};

acscript void PowerOutage()
{
    // If the power is already out, terminate
    if (PowerOut) return;
    
    Delay(10);
    
    PowerOut = true;
    
    // Blackout
    if (!MarinesHostile)
    {
        SetMusic("");
        ActivatorSound("misc/poweroff", 127);
        for (int i = 0; i < MAX_OUTPOST_ID; i++)
            Light_Fade(i, 0, 10);
    };
    
    // Disable Shop Forcefields
    Line_SetBlocking(ForcefieldID, 0, 1023);
    SetLineTexture(ForcefieldID, SIDE_FRONT, TEXTURE_MIDDLE, "");
    
    // Send Turrets into PoweredDown state
    SetActorState(TurretTID, "PoweredDown");
    
    // Randomized delay for the power to come back on
    Delay(Random(35 * 3, 35 * 5));
    
    // Enable Emergency Power
    if (!MarinesHostile)
    {
        if (OutpostNotoriety >= 3)
            SetOutpostMusic(OUTPOST_MUSIC_NORMAL, false, 2, 39)
        else
            SetOutpostMusic(OUTPOST_MUSIC_NORMAL, false, 1, 4);
        ActivatorSound("misc/poweron", 127);
        for (int i = 0; i < MAX_OUTPOST_ID; i++)
        {
            Sector_SetColor(i, 255, 0, 0, 0);
            Light_Fade(i, 160, 60);
        };
    };
};

acscript void PlaceBoss()
{
    // Minigunners
    if (OutpostNotoriety == 0)
        SpawnSpotFacingForced("DRPGMarineMinigunNotActuallyPeople", BossSpotTID, MarineBossTID - 1);
    
    // Small Powersuit
    if (OutpostNotoriety == 1)
        SpawnSpotFacingForced("DRPGPowerSuitSlackingOffDownstairs", BossSpotTID + 1, MarineBossTID - 1);
    
    // Heavy Marines
    if (OutpostNotoriety == 2)
        SpawnSpotFacingForced("DRPGMarineMinigunNotActuallyPeople", BossSpotTID, MarineBossTID - 1);
    
    // Heavy Powersuit & Heavy Powersuit Mk. II
    if (OutpostNotoriety >= 3)
        SpawnSpotFacingForced("DRPGHeavyPowerSuitHavingASiesta", BossSpotTID + 2, MarineBossTID - 1);
};

acscript void SpawnBoss()
{
    // Minigunners
    if (OutpostNotoriety == 0)
    {
        SpawnSpotForced("TeleportFog", NotorietySpotTID, 0, 0);
        SpawnSpotFacingForced("DRPGMarineMinigun", NotorietySpotTID, MarineBossTID);
    };
    
    // Small Powersuit
    if (OutpostNotoriety == 1)
    {
        SpawnSpotForced("DRPGBigTeleportFog", NotorietySpotTID, 0, 0);
        SpawnSpotFacingForced("DRPGPowerSuit", NotorietySpotTID, MarineBossTID);
    };
    
    // Heavy Marines
    if (OutpostNotoriety == 2)
    {
        SpawnSpotForced("TeleportFog", NotorietySpotTID, 0, 0);
        SpawnSpotFacingForced("DRPGMarineMinigunHuntingYerAss", NotorietySpotTID, MarineBossTID);
    };
    
    // Heavy Powersuit
    if (OutpostNotoriety >= 3)
    {
        // Teleport out guards
        for (int i = MarineTID; i <= MarineMaxTID; i++)
        {
            SpawnSpot("TeleportFog", i, 0, 0);
            Thing_Remove(i);
        };
        
        SetMusic("");
        if (OutpostNotoriety >= 4)
        {
            Delay(35);
            SetOutpostMusic(OUTPOST_MUSIC_BOSS, false, 2);
            Delay(35 * 19.25);
        }
        else
        {
            Delay(35 * 30);
            SetOutpostMusic(OUTPOST_MUSIC_BOSS, false, 1);
        };
        
        SpawnSpotForced("DRPGHugeTeleportFog", NotorietySpotTID + 1, 0, 0);
        SpawnSpotFacingForced((OutpostNotoriety >= 4 ? "DRPGSuperPowerSuit" : "DRPGHeavyPowerSuit"), NotorietySpotTID + 1, MarineBossTID);
    };
};

function void CheckShopSpecial(bool Force)
{
    // Reset the item
    if (ShopSpecialTimer <= 0 || Force)
    {
        int Category;
        int Index;
        bool ValidItem;

        // Item Blacklist
        auto int[][2] ItemBlacklist =
        {
            // Category, Index
            
            // Ammo
            { 1;    0;  };  // Clip
            { 1;    1;  };  // Box of Bullets
            { 1;    2;  };  // Shells
            { 1;    3;  };  // Box of Shells
            { 1;    4;  };  // Rockets
            { 1;    5;  };  // Box of Rockets
            { 1;    6;  };  // Cell
            { 1;    7;  };  // Cell Pack
            { 1;    8;  };  // Small Backpack
            { 1;    9;  };  // Backpack
            
            // Armor
            { 3;    0;  };  // Armor Bonus
            
            // End of list
            { -1;       };
        };
        
        while (!ValidItem)
        {
            // Pick an item
            Category = Random(0, ItemCategories - 1);
            Index = Random(0, ItemMax[Category] - 1);
            
            // Check the item against the blacklist
            for (int i = 0; ItemBlacklist[i][0] != -1; i++)
            {
                ValidItem = true;
                
                // Check Blacklist Category and Index
                if (Category == ItemBlacklist[i][0] && Index == ItemBlacklist[i][1])
                {
                    ValidItem = false;
                    break;
                };
            };
            
            // Skip Loot category entirely
            if (Category == 8)
                ValidItem = false;
            
            // Retry if you land on an item with no cost
            if (ItemData[Category][Index].Price == 0)
                ValidItem = false;
        };
        
        // Assign the item to the Shop Special item
        ShopSpecialItem = &ItemData[Category][Index];
        ShopSpecialItem->Category = Category;
        
        // Spawn the item if you're in the Outpost
        SpawnShopSpecialItem();
        
        // Reset the timer and bought status
        ShopSpecialTimer = SHOP_SPECIAL_TIMER;
        ShopSpecialBought = false;
        
        if (GetCVar("drpg_debug"))
            if (Arbitrator)
                Log("\cdDEBUG: Shop Special expired! Now \cj%s\n", ShopSpecialItem->Name);
    };
    
    // Remove the item if it was bought
    if (InBase && ShopSpecialBought)
        Thing_Remove(ShopSpecialTID + 1);
    
    // Decrease the timer
    ShopSpecialTimer--;
};

function void SpawnShopSpecialItem()
{
    if (InBase)
    {
        // DoomRL Compatibility
        str ItemSpawnActor = ShopSpecialItem->Actor;
        if (GetCVar("drpg_ext_doomrl"))
            if (ShopSpecialItem->Category == 0) // Weapons
                ItemSpawnActor = StrParam("%sPickup\n", ItemSpawnActor);
        
        Thing_Remove(ShopSpecialTID + 1);
        if (!SpawnSpotForced(ItemSpawnActor, ShopSpecialTID, ShopSpecialTID + 1, 0))
            CheckShopSpecial(true)
        else
        {
            SpawnSpotForced("TeleportFog", ShopSpecialTID, 0, 0);
            SetActorProperty(ShopSpecialTID, APROP_Invulnerable, true);
            Thing_SetSpecial(ShopSpecialTID, 80, 8);
        };
    };
};

function void ResetOutpostMusic()
{
    if (PowerOut)
        if (OutpostNotoriety >= 3)
            SetOutpostMusic(OUTPOST_MUSIC_NORMAL, true, 2, 4)
        else
            SetOutpostMusic(OUTPOST_MUSIC_NORMAL, true, 1, 4)
    else
        if (OutpostNotoriety >= 3)
            SetOutpostMusic(OUTPOST_MUSIC_NORMAL, true, 2)
        else
            SetOutpostMusic(OUTPOST_MUSIC_NORMAL, true, 1);
};

function void SetOutpostMusic(int Type, bool Local, int Index, int Pattern)
{
    str Music;
    
    // Normal
    if (Type == OUTPOST_MUSIC_NORMAL)
        Music = StrParam("Outpost%d\n", (Index > 0 ? Index : Random(1, MAX_OUTPOST_MUSIC)));
    
    // Combat
    if (Type == OUTPOST_MUSIC_COMBAT)
    {
        Index = (Index > 0 ? Index : Random(0, MAX_COMBAT_MUSIC));
        Music = StrParam("Arena%d\n", Index);
        
        if (Index == 0)
        {
            Music = "Outpost1";
            Pattern = 3;
        };
    };
    
    // Boss
    if (Type == OUTPOST_MUSIC_BOSS)
        Music = StrParam("Boss%d\n", (Index > 0 ? Index : Random(1, MAX_BOSS_MUSIC)));

    // Credits
    if (Type == OUTPOST_MUSIC_CREDITS)
        Music = StrParam("Credits%d\n", (Index > 0 ? Index : Random(1, MAX_CREDITS_MUSIC)));
    
    if (Local)
        LocalSetMusic(Music, Pattern)
    else
        SetMusic(Music, Pattern);
};
